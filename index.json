[{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/repl-it/","title":"Starting up with Repl.it","tags":[],"description":"","content":"Today you will be using Repl.it to build JSappy bird. Here is an example interactive window that you will use today:\nOpen your favorite internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer) and go to https://repl.it.\nYou should see something like the following screen:\nHere is the final output of the game:\nhttps://jsappybird-answers--nuevofoundation.repl.co/\n"},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/introduction/","title":"Introduction","tags":[],"description":"","content":"JavaScript Basics Hi there! If you\u0026rsquo;re reading this, it hopefully means that you\u0026rsquo;re here to learn JavaScript üòÅü•≥. Whether this is your first time coding or you want a way to quickly pick up a new language - you\u0026rsquo;re in the right place! Get ready to discover the power of programming and have fun.\nWhat is Code? We can\u0026rsquo;t learn how to code without first understanding what exactly code is. Think of your favorite website, if you can\u0026rsquo;t think of one let\u0026rsquo;s take NuevoFoundation.org. As a user, all you have to do is type the web address in your browser and before you know it - ta da! - the website appears, with all of its pretty colors and pictures of nuvi.\nEasy right? Not exactly, behind what seems like a simple interaction there exists hundreds - if not thousands! - lines of code to make it all work. Let\u0026rsquo;s take just one step of this interaction, searching and going to the Nuevo Foundation website. There are billions of websites (1.7 billion last time I checked), how does your browser get to the website you want so quickly? Think about that for a second\u0026hellip;\nThere are people who coded that, and people that coded your browser, and the Nuvi website, and this curriculum you\u0026rsquo;re reading, and \u0026hellip; well you get the point. Code is how we humans design and build things like websites, apps, and games. It\u0026rsquo;s the language we use to tell computers what to do.\nWhat is JavaScript and what is it used for? Just like there exists a bunch of human languages, there exists a bunch of programming languages. Perhaps you\u0026rsquo;ve heard of some of them, such as Python or Java. Each programming language has its strengths and purposes - for example, CSS is used for styling websites, Python is really good for data science, and so on.\nJavaScript is sometimes referred to as the \u0026ldquo;language of the web.\u0026rdquo; Pretty much any website you can think of uses JavaScript in some way of form. JavaScript is really good at controlling website behavior, for example, controlling what happens when you click a button or transferring data between pages.\nThe good thing is that once you learn one language, you can learn another one pretty quick as the fundamentals tend to stay the same.\nEnvironment Set Up Environment? I thought this was a coding workshop?\nEnvironment is just what programmers like to call their setup for coding. You know how you use things like Microsoft Word or Google Docs to write essays? You can think of that as your \u0026ldquo;writing essay\u0026rdquo; environment.\nFor programmers, there exists applications called IDEs, which stand for Integrated Development Environment. These are the types of applications that let us write and run code.\nFor this workshop, we will be using playcode.io.\nOnce you open playcode.io, there are a few things you need to do before we get started:\n close all files in the top left except for script.js. Delete everything in the script.js file. Turn off live by clicking once on the live button in the top right.  If you\u0026rsquo;ve done all the above steps correctly, your screen should look like this: Now we are finally ready to go and learn some JavaScript!\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/getting-started/","title":"Getting Started","tags":[],"description":"","content":"Getting Started What is Android? Android is currently the most used mobile operating system in the world! Android Studio lets you create apps that can be used by these Android devices. In fact, if you have an Android phone, then you can even download the app you‚Äôre making today onto your phone!\nDownload and Install Android Studio (Skip if already installed) Download Android Studio for your operating system and install the application.\nDownload the Project Files Download the project files for your game. On this adventure, you will need to solve the puzzles marked with PUZZLE tags to complete the game.\nStart Android Studio On a Windows Computer There are multiple ways to start the Android Studio application on your Windows computer, here are two methods.\nMethod 1  Click the Windows icon in the lower left hand corner of your computer Scroll through the list until you see the Android Studio folder Click the Android Studio folder to expand it Click the Android Studio application in the folder to start Android Studio  Method 2  In the search box on the bottom left of the screen, type in Android Studio In the results window, if \u0026ldquo;Best Match\u0026rdquo; highlights Android Studio, either click the Android Studio application or press ENTER on your keyboard  Open Project Files  Click on the File button on the upper-left corner of Android Studio. It\u0026rsquo;s the button beside the Android picture Click Open Look for the location where you downloaded the project files Highlight project you want to open and click OK You may get a box that pops up asking if you want to open the project in This Window or a New Window. Click This Window to load the project in your current Android Studio. Click New Window to start another Android Studio with your project files. If you don\u0026rsquo;t want to open the project files, you can click Cancel \n Run Android Studio and open the project. Your view will look similar to this: "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/","title":"Basics","tags":[],"description":"","content":"Topics  Starting up with Repl.it \n   Writing to Console (Print statement) \n   Comments \n   Variables \n   Reading from the Console \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/functions/more-about-functions/","title":"More about functions","tags":[],"description":"","content":"Suppose you have many lines of code, and you would like to give this section of code a meaningful name. Functions are blocks of code that do just that. A function is a set of instructions that we give to the computer to store, and it can take in parameters (input data) and output data. A function in Python looks like this:\nLet‚Äôs analyze this piece of code. The def tells the computer that you are writing a function. We give it a name, in this case, my_function. Then, we put a colon (the : symbol) to indicate that the function is starting. The next two lines are two spaces away from the left side of the text editor \u0026ndash; this tells the computer that these lines are part of the function definition. This is very important, so don\u0026rsquo;t miss out on this detail!\nPress run.\nYou will notice that nothing happens. This is only a function definition - we need to ‚Äúcall‚Äù the function to run the code within the function. In other words, the computer understands the instructions, but you need you tell the computer to do the given instructions. You can call my_function() anywhere, as long as it is after the function is defined. Place my_function() below the function definition, with no spaces in front. Your code should look like this:\nDon\u0026rsquo;t forget to remove the two spaces before calling my_function(). You might run into unexpected behavior otherwise!\n You might be familiar with the math definition of a function; for example, the function ùíá(ùíô) = 3ùíô. It takes an input value, ùíô, and transforms the value by multiplying it by 3. Similarly, in python, you can also give input values (called parameters) to a function and return (or produce) an output value. An example of a Python function which triples a given number is given below:\nNumber is the name of the parameter (input) that we are giving to the function triple. The word int tells the computer that the parameter number is an integer. The return word is only used within functions, and allows the function to output a value. In this case the triple function returns (outputs) number * 3, which then can be stored in a variable and printed. If the function variable. Check that the code above prints out the number 6.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-types/strings/","title":"Strings","tags":[],"description":"","content":"Anything that is surrounded by quotation marks is called a string. This is how a computer represents words or sentences. For example, \u0026ldquo;a\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026ldquo;banana!\u0026quot;, and \u0026ldquo;Hello World\u0026rdquo; are strings, but 2 and Hello World are not strings, because the quotation marks are missing. You can combine many strings together using the + sign!\nThe strings that you combine do not have to be real words! For example, \u0026quot;Ap\u0026quot; + \u0026quot;ple\u0026quot; will produce the string \u0026quot;Apple\u0026quot;. Ask for help if you are confused!\n For example,\n  \u0026quot;Apple\u0026quot; + \u0026quot;Pineapple\u0026quot; produces the string \u0026quot;ApplePineapple\u0026quot;\n  \u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot; produces \u0026quot;Nuevo Foundation\u0026quot;\n  Challenge 1 What if you combine your first and last name? How would you do that?\nChallenge 2 Delete all the print statements in your code. Start your code with the line print(\u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot;)\nIf you run it, you should get the following output:\nNuevo Foundation  Let‚Äôs try and find two more ways to print the string \u0026quot;Nuevo Foundation\u0026quot; using two plus (+) symbols in each print statement. Once you make this work, you should have \u0026ldquo;Nuevo Foundation\u0026rdquo; printed out 3 times. In other words, your console should look like this after you press run:\nNuevo Foundation Nuevo Foundation Nuevo Foundation  "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/using-repl-it/","title":"Using Repl.It","tags":[],"description":"","content":"To build our game we will use the Pygame library, which provides a set of readymade functionality that we can use to build video games and animations.\nUsing Repl.it Today you will be using Repl.it to build the Pong game.\nIf you would like to re-cap on how to use Repl.it. Checkout the following Python basics tutorial\nNext, let\u0026rsquo;s explain further some of the code that has been provided to you in the main.py file.\nLibraries and import statements Look at the top of the code. You will see the following line:\nimport pygame This statement allows us to import all of the animation and object drawing functionality provided by the pygame library. A library is a place where related functionality are grouped together for use in the Python language. For example, the pygame library provides a way to draw a rectangle on screen, which we can use to draw the boundaries, the ball and the paddles used in Pong game.\nComments The gray line that starts with # is called a comment. These are notes in the code that helps to explain what is happening in plain English. As they are ignored by the computer, they are often used so that when other developers work on the same code, they will have an easier time reading and understanding what is going on. In main.py we will use comments to walk you through the activities where we need you to make changes to build the game in correct form.\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/using-repl-it/","title":"Using Repl.It","tags":[],"description":"","content":"To help Alex live in a beehive, he needs to learn how to create a honeycomb! We will use Python\u0026rsquo;s turtle library to draw a honeycomb for Alex.\nUsing Repl.it Today you will be using Repl.it to learn how to code in Python. Here is an example interactive window that you will use today:\n Before we start, let\u0026rsquo;s first understand how the window works. The main.py file contains code, or instructions for the computer to run. By pressing the run button, you tell the computer to perform the instructions in the code. Any results from running the code will be displayed on the bottom white screen, under the result tab. Today, our results will be an animation of a drawing being created.\nNext, let\u0026rsquo;s explain further some of the code that has been provided to you in the main.py file.\nLibraries and import statements Look at the top of the code. You will see the following line:\nimport turtle This statement allows us to import all of the drawing functionality provided by the turtle library. A library is a place where related functionality are grouped together for use in the Python language. For example, the turtle library introduces a helpful artistic turtle in the result window, which we can control using our code to draw images.\nComments The gray line that starts with # is called a comment. These are notes in the code that helps to explain what is happening in plain English. As they are ignored by the computer, they are often used so that when other developers work on the same code, they will have an easier time reading and understanding what is going on.\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/conditional-statements-loops/conditional-statements/","title":"Conditional statements","tags":[],"description":"","content":"Now that we know the basics of print statements, variables, and reading in input from the user ‚Äì we can combine all these awesome skills with conditional statements. Conditional statements allow the computer to make decisions based off the value of an expression. In the real world, we use conditional statements all the time to make decisions! For example, if it is raining outside, then I use an umbrella. In this example, the I evaluated the weather outside and because it was raining, I made the sequential decision to use an umbrella.\nWhat conditional statements can you think of that you use in everyday life?\nIf statements We‚Äôll start off with an if statement in its simplest form!\nShown above we have three different parts:\n If ‚Äì this tells the computer that we are going to deciding based off the expression inside the parenthesis Expr ‚Äì this represents the expression that we are evaluating. If the expression is \u0026ldquo;truthful\u0026rdquo; then the computer will enter the if statement and execute the statement. Statement ‚Äì what the computer will complete if the expression is \u0026ldquo;truthful\u0026rdquo;  Let‚Äôs break down the example above and decide why some statements are \u0026ldquo;truthful\u0026rdquo; or \u0026ldquo;falsy\u0026rdquo;.\nWe are given to variables x and y are they are assigned two values. In the first if statement we are testing if the value of x is less than the value of y. Since 0 is less than 5, this is true! So, the first if- statement will print yes.\nHowever, we can see that y is not less than x, so it evaluates to false. The inside of the if statement will not be executed then. The same applies for the if statement evaluating if x is equal to 10. We see that x is equal to 0, so this expression is false, and the inside of the if statement won‚Äôt be executed.\nElse statements Now that we know how to use if statements to conditionally execute a single statement or multiple statements, let‚Äôs see what else we can do!\nSometimes, you need to evaluate a condition in order to act accordingly if it is true, but if it false we act differently. Here is the simplest form of the else statement.\nThis is really like the if statement! However here, if the if statement is false (not truthful), the program will automatically execute the statement2 in the else statement.\nA real-life example is if I‚Äôm hungry, I‚Äôll eat. Else (in other words, I‚Äôm not hungry), I won‚Äôt eat. Let‚Äôs take a look in python code!\nChallenge Let‚Äôs put it all together! Let‚Äôs see if we can create a program that takes prompts the user for their name. The user can write their name into the console. Then the computer can decide if their name is equal to your name, print out a response. Else, print out a different response!\n Hint: Try talking out the different paths to a computer can take! Make sure to identify what the if and else conditions are.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/conditional-statements-loops/","title":"Conditional statements and loops","tags":[],"description":"","content":"Topics  Conditional statements \n   Loops \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/meet-dj-nuevo/","title":"Meet DJ Nuevo","tags":[],"description":"Set up headphones, check audio","content":" Nuevo has new headphones! Can you find yours? You got contacted to make Nuvi\u0026rsquo;s next hit mixtape, but when you get to the studio, Nuvi says their next project is going to be produced all in code. This is something that hasn\u0026rsquo;t been done before, are you up to the challenge? Look around yourself to find your headphones and get ready to join him!\nBefore we start, make sure that your headphones are working. Try playing the following audio. What do you hear?!\n Test audio to see if your browser supports the audio element. If you cannot play the audio, it likely means your browser does not support this. audio element.   "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/starting-up/","title":"Starting Up","tags":[],"description":"","content":"Starting Up The goal of today\u0026rsquo;s activity is to learn C# skills and incorporate your new-found knowledge to create a Guess The Word game! Let\u0026rsquo;s get the game set up.\nOpen your favorite internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer), and go to https://aka.ms/nuevoguesstheword. Your screen should look like this:\nWe will ignore some of the details on this screen, but we will go over some of the basics that show up. The main.cs file contains code, or instructions for the computer to run. By pressing the run button, you tell the computer to perform the instructions in the code. Any results from running the code will be displayed on the right side, called the console.\nIf you press run now, you will see that nothing happens! Your job is to help Nuvi complete the code for this game!\nClick the fork button to create a copy of the code for yourself to work on. Any activities under the Activity sections will be done in this browser tab. You will do these activities on your own, but help is available when you are stuck.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/repl-it/","title":"Starting up with Repl.it","tags":[],"description":"","content":"Open your favorite internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer) and go to https://repl.it. Scroll to the bottom of the page, look for languages, search for Python and click it.\nYou should see something like the following screen:\nWe will ignore some of the details on this screen, but we will go over some of the basics that show up. The main.py file contains code, or instructions for the computer to run. Anything that results from running the code will be displayed on the right side. This window is called the console.\nHit run and watch your console run your code on the screen to the right! In the example below, print tells the computer to print the sentence within the parentheses () into the console, or the screen on the right. Learn more about print in the next lessons. Note: The RUN button looks like this: "},{"uri":"https://nuevofoundation.github.io/workshops/adventure/time-to-create/","title":"Time to Create","tags":[],"description":"","content":"It‚Äôs time to start creating our own stories with all the skills we‚Äôve learned today! The question that we are tackling today is how to get the audience involved with the story line, and the answer to this is CODE!\n"},{"uri":"https://nuevofoundation.github.io/workshops/arduino/appendix/","title":"Appendix","tags":[],"description":"","content":"Appendix The components, in detail Imagine our circuit is a play. Before the final performance in front of an audience, we need a place to practice. This is where the breadboard comes in.\n Breadboards are simple platforms that we can use to build temporary circuits for testing and debugging before finalizing our design and permanently soldering (welding) it together. Breadboards allow us to easily add, remove, or reposition components. Below on the left is an image of a breadboard. The image to the right shows how the pins are connected to each other. Each one of the numbered rows on the breadboard, shown in yellow, contains 5 pins holes. Every pin hole on a row (yellow line) is connected to the other pin holes on that line. The red line on the right shows a common connection between those pin holes, while the blue line on the right side show a common connection between those pin holes. The same is true on the red and blue lines on the left. However, the red and blue lines on the right and left are not connected to each other. Components that are plugged into the same common connection are connected in the circuit  The Light Emitting Diode (or LED for short) is a small light that turns on when electricity flows through it.\n The LED has 2 leads: the Anode and the Cathode. The Anode is longer than the Cathode and is always attached to the higher voltage.   The resistor is a small piece of ceramic material that slows down the flow of electricity.\n A resistor has 2 leads, but it is omnidirectional. In other words, it doesn‚Äôt matter which lead you attach to the higher voltage. Most electronics can only handle a certain amount of electricity before they break, so resistors protect the other components in our game by keeping the electricity low.   "},{"uri":"https://nuevofoundation.github.io/workshops/python-guess-number/generate-random-number/","title":"Generate a random number","tags":[],"description":"","content":"Python includes a library called random that helps you generate random numbers. You can use this in your program by writing import random at the top of your program and using the randint function to generate a number between a range.\nThis would generate a random number between 1 and 10\nrandom.randint(1,10) Try running the below code a few times to see what you get!\n "},{"uri":"https://nuevofoundation.github.io/workshops/arduino/building-with-arduino/","title":"Introduction - Building with Arduino","tags":[],"description":"","content":"Introduction - Building with Arduino This tutorial is designed for beginners. You will learn all the basic information about how to use the Arduino controller board, sensors, and components.\nElectronics like microcontrollers, sensors, and all types of circuitry are all around us. Some are very basic and provide telemetry information for traffic systems. Others run the traffic lights programmed with built-in timing.\nToday we will work on a few activities to show you some of the capabilities of this platform. We will start small and simple and build to bigger and more complex. After you do the activity feel free to change some things to see what is different and gain a deeper understanding.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-structures/lists/","title":"Lists","tags":[],"description":"","content":"Lists are the ordered collection of items and can be written as comma separated values inside square bracket []. You can access the element of a list by using indexes inside square bracket. The index starts from 0 and goes up to the (number of elements in the list - 1) and the first element is at index 0. So, a list having 6 elements will have indices from 0 to 5.\n#Creating a list of 5 fruits fruits = [\u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;] #Print element at index 2 print(fruits[2]) ##it prints banana Lists can have duplicate elements.\n #lists can also have different datatypes my_list = [\u0026#39;candy\u0026#39;, 10, 2.5] Length of the list You can get the length of the list by using len(list) function and the list name is passed as the parameter.\nlength = len(fruits) ##Now length = 5 Append an element in the list Appending an element can be done by the list.append(x) function where x is the element that you want to append. It adds the element at the end of the list.\n#Before the list is [\u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;] fruits.append(\u0026#39;lemon\u0026#39;) #Now the list is [\u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] Insert an element at a specific index You can insert an element at specific index by of a list by list.insert(i, x) function. Here i is the index where you want to insert and x is the element that you want insert.\nfruits.insert(1, \u0026#39;guava\u0026#39;) #Now the list is [\u0026#39;orange\u0026#39;, \u0026#39;guava\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] Remove an element from the list list.remove(x) function searches for the first instance of the given element x and removes it from the list.\nfruits.remove(\u0026#39;apple\u0026#39;) #Now the list is [\u0026#39;orange\u0026#39;, \u0026#39;guava\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] list.remove(x) throws a value error if the element x is not present in the list.\n Remove an element at specific position list.pop(i) function removes the element at the index i.\nfruits.pop(0) #Now the list is [\u0026#39;guava\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;lemon\u0026#39;] If you don\u0026rsquo;t specify the index,list.pop() then it removes the last element from the list.\n Reverse the elements of the list list.reverse() function reverse the elements of the list.\nfruits.reverse() #Now the list is [\u0026#39;lemon\u0026#39;, \u0026#39;mango\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;, \u0026#39;guava\u0026#39;] Get the minimum and maximum element of the list min(list) function returns the minimum element of the list and the maximum element can be found by using the max(list) function.\nmy_list = [4, 1, 2, 5, 3] ## Defining a new list of Integers print(min(my_list)) ## prints 1, the minimum element of my_list print(max(my_list)) ## prints 5, the maximum element of my_list Try it yourself  "},{"uri":"https://nuevofoundation.github.io/workshops/security/meeting-alice-bob-eve/","title":"Meeting Alice, Bob and Eve","tags":[],"description":"","content":"Meet our friend Bob. Bob has a secret that he doesn‚Äôt want to share, he would like to keep it secured. He has the secret locked somewhere safe. Only Bob has the key to the lock to make sure that no one can get to his secret but him.\nMeet our not so good friend Eve. Eve wants access to Bob‚Äôs secret.\nEve realizes that to get to Bob\u0026lsquo;s secret, they need to first get past Bob\u0026lsquo;s lock. Eve can\u0026rsquo;t break the lock, but maybe she can figure out the key. After spying on Bob for a while, Eve realizes that he really loves his pet dog, Max. This gives Eve an idea.\nEve thinks that, since Bob loves his pet so much, he might have decided to make that the key to his lock. They decide to give it a try, and viol√†, Eve was able to open Bob\u0026lsquo;s lock and see his secret.\nThis is not good for Bob! He wants to know what he could have done differently so that Eve couldn\u0026rsquo;t break his lock so easily, but he doesn\u0026rsquo;t know where to start.\nLuckily for Bob, his good friend Secret Agent Alice arrives to help him out with his situation. Let\u0026rsquo;s see what Alice has to say\u0026hellip;\n"},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/the-components/","title":"The Components","tags":[],"description":"","content":"The components we will use for the project are listed below. Make sure you have all of these before starting:\n One Adafruit USB-C to USB cord 2 alligator clip wires, any colors Two oranges  "},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/arrays/","title":"Arrays","tags":[],"description":"","content":"What is an Array? An array is simply a collection of values. It\u0026rsquo;s a special variable, which can hold more than one value at a time.\nFor example, consider an array called fruits, which would contain values like apple, orange, mango etc\u0026hellip; all together in a single variable.\nHow to create one The following statements show how to create arrays in two different ways but the end result is the same.\nSyntax:\nvar arrayName = new Array(element0, element1, ..., elementN); var arrayName = Array(element0, element1, ..., elementN); var arrayName = [element0, element1, ..., elementN]; Example: "},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/puzzle1/","title":"Puzzle 1","tags":[],"description":"","content":"Run the Game Press the play button button (‚ñ∫) at the top of Android Studio and you‚Äôll see that the title at the top of the app says Toe-Tac-Tic (that doesn\u0026rsquo;t seem right!), let\u0026rsquo;s change it to Tic-Tac-Toe.\nSolve the Puzzle Double-click the strings.xml file under res \u0026ndash;\u0026gt; values: How can you modify this file to say Tic-Tac-Toe? "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/functions/built-in/","title":"Built in Functions","tags":[],"description":"","content":"There are many built-in functions in python that can be used to increase the ease of writing code. Let\u0026rsquo;s discuss a few of them here.\nsort() This function is used to sort the values in data structures such as arrays and lists.\narr = [8,5,1,4,6] arr.sort() print(\u0026#39;The sorted arr is :\u0026#39;,arr) #prints The sorted arr is [1,4,5,6,8] find() Returns the first occurence of the input(pattern) to the find() provided in the given string.\nstr1 = \u0026#34;Hello World\u0026#34; index = str1.find(\u0026#34;World)\u0026#34; print(index) #prints 6 len() len() helps in finding out the size of the given data structure.\narr = [10,5,4,2,3] print(len(arr)) #prints 5 isdigit() This function returns true if the string passed as an argument consists of only digits; otherwise it returns false\ns = \u0026#34;123\u0026#34;; print str.isdigit() #prints true s = \u0026#34;Hello World\u0026#34;; print str.isdigit() #prints false s = \u0026#34;123Hello\u0026#34; print str.isdigit() #prints false as it has letters along with digits reverse() This function is used to reverse the contents of an array or a list.\narr = [5, 6, 7, 8, 9]; arr.reverse(); print(arr) #prints [9,8,7,6,5] replace() This function replaces the first argument passed to the function with the second argument in a given string.\ninitial_str = \u0026#34;My name is Harry. Harry is a good boy.\u0026#34; final_str = initial_str.replace(\u0026#34;Harry\u0026#34;, \u0026#34;Potter\u0026#34;) print(final_str) #prints My name is Potter. Potter is a good boy. append() This function is used to add a number, character or element of any data type to the end of a list or an array.\narr = [1,2,3,4,5]; arr.append(6); print(arr) #prints [1,2,3,4,5,6] arr = [\u0026#39;Harry\u0026#39;,\u0026#39;Ram\u0026#39;,1,2] arr.append(\u0026#34;Jenifer\u0026#34;) print(arr) #prints [Harry,Ram,1,2,Jenifer] remove() Removes the first occurence if argument passed for the given object. If you try to remove an element not in list, it would give an exception stating element not in the list.\narr = [1,1,2,3,3] arr.remove(1) print(arr) #prints 1,2,3,3 arr.remove(4) #gives an exception stating element not in the list Challenge 1 Create an array namearr\n  Initialize it to [1,2,3,4,5]\n  Append the number 6 to it and print.\n  Reverse arr and print it.\n  Sort arr and print it.\n  Print length of arr\n  Remove the element 6 from arr and print it.\n  Print the length of arr,\n  Expected output [1,2,3,4,5,6] [6,5,4,3,2,1] [1,2,3,4,5,6] 6 [1,2,3,4,5] 5  Challenge 2 -Initialise a string s to \u0026ldquo;Hello all.Hello people\u0026rdquo;.\n-Find the occurence of the word Hello in the string s and print.\n-Replace the word Hello to Hi in s.\n-Find if the string s contains only digits and print the verdict.\nExpected Output 0 Hi all.Hi people. False   "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-types/numbers/","title":"Numbers","tags":[],"description":"","content":"The computer can also do your regular math that you do in school. Use print to print out the result from the math expressions. No quotation marks are needed for numbers! Unlike strings, you can do math on numbers.\nThe computer does division differently from your regular calculator. Computer division will exclude remainders or decimals.\nFor example,\n15/4 makes 3 and not 3.75\n You can also try using the math symbols to make your own expressions!\n   Symbol Use Symbol Use     + Add * Multiply   - Subtract / Divide    Challenge 1 Let\u0026rsquo;s try to figure out the answers to the following using Python. Try printing out the result of the below (make sure you don\u0026rsquo;t miss any parentheses):\n 2 - 19 (3 + 5) * 6 (13 + 5 * 8) / (6 - (3 + 7))  Challenge 2 Can you print out this statement? \u0026quot;527 time 199 is: __\u0026quot;\nYou will fill in the blank with the answer of what (527 * 199) is. If you want to print a string and a number together, you first have to convert the number into a string.\nHere\u0026rsquo;s an example: print(\u0026quot;Hello, World!\u0026quot; + str(5))\nUsing str(5) turns the number into the string \u0026quot;5\u0026quot;. Converting one type of thing to another is called \u0026ldquo;casting\u0026rdquo;.\n Fun Fact: Random Numbers Here is how to print a random number between 1 (inclusive) and 10 (inclusive):\nfrom random import randint\nprint(randint(1,10))\nWant to know more? Ask for help or poke around on the internet! Every coder\u0026rsquo;s best friend is a search engine!\nIn particular, try understanding what the from and the import words mean. We will come back to these words later during the project.\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/writing-to-console/","title":"Writing to Console (Print statement)","tags":[],"description":"","content":" Make your program talk to you! Print statements are used to print something on the console. Use print(\u0026quot;Hello World\u0026quot;) to print Hello World in the output screen. We will later learn that print is a function and we use it to perform a print job. Whatever you pass to the print function is printed on the screen. Let\u0026rsquo;s start by doing a print statement. A print statement allows you to take control of the computer and make it print something out!\nWe will use printing a lot in the later lessons, so make sure you understand this before moving on to the next concept!\nChallenge 1 To start, write the following text into your Repl.it main.py and click Run.\nprint(\u0026#34;Hello, World!\u0026#34;) Watch your console say \u0026ldquo;Hello, World!\u0026rdquo; on the screen to the right! print tells the computer to print the sentence within the parentheses () into the console window, or the screen on the right.\n Challenge 2  Without removing the quotation marks, try changing \u0026quot;Hello, World\u0026quot; to another sentence. (For example ‚Äì \u0026quot;My name is Nuvi!\u0026quot;) Press run to see if anything changes. Add another print below the current line to print a second sentence below the first sentence. Press run to see if two sentences are printed out.   We will use printing a lot in the later lessons, so make sure you understand this before continuing!\nHELP! I got a lot of red text! If you see any red text, you have encountered some errors! Please ask for help. In particular, beware of the following when coding in Python:\n Make sure the sentence you wish to print is surrounded in quotation marks and that the sentence is inside the parentheses.  Spacing in Python is very important. Make sure you don‚Äôt have any unnecessary spaces or tabs at the beginning or at the end of each line, as Python won‚Äôt be able to read the code otherwise. For example, don‚Äôt put any spaces before print, or any spaces after the last parenthesis in print(\u0026quot;Hello, World!).   "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/basics/","title":"Basics","tags":[],"description":"","content":"What is a website? A website is just a page that can be found on the Internet. It is displayed through a browser when you type the address (aka unique name) in the address bar.\nParts of a website Common website elements include navigation bars, footers, search bars, and contact forms.\nWebsite design The first step in making a website is to decide which elements we want, and how they will look. This process is called layout design and it‚Äôs just a rough sketch of how the different pieces are going to come together. There are many tools to help you do this, but the oldest and one of the most popular is good ol‚Äô pen and paper. Here‚Äôs how I sketched mine:\nThis sketch is just a guideline. It‚Äôs okay to change things around as we start putting it together. A good rule of thumb is to start as simple as possible.\n\r"},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/the-basics/","title":"The Basics - Class and Object","tags":[],"description":"","content":"Classes and objects Before you start building a game, you should know how to draw different objects and modify them as per the way they need to look and move on computer screen.\nIn order to build objects you first decide how they should look, what role they would perform in your game and how player can control their movement on screen. You do this by creating a class for each object you want on screen. Before objects are created in a program you must define their class. A class is what tells how an individual object would look and behave. It contains the attributes and methods that its object can use during the lifetime of a program (in this case it is Pong game). You need to define class once and you can create as many objects you wish from that class.\nYou cannot use class directly in a program, a class must have an object as its manifestation that is used in program. All aspects related to visuals and movement we can call them as attribute of the object that you see on computer screen. All aspects related to control of object we can call as them functions of the object.\nFirst, define the class for paddle used in game. To do this, let\u0026rsquo;s type in: class Paddle(pygame.Rect): def __init__(self, velocity, up_key, down_key, *args, **kwargs): self.velocity = velocity self.up_key = up_key self.down_key = down_key super().__init__(*args, **kwargs) def move_paddle(self, board_height): keys_pressed = pygame.key.get_pressed() if keys_pressed[self.up_key]: if self.y - self.velocity \u0026gt; 0: self.y -= self.velocity if keys_pressed[self.down_key]: if self.y + self.velocity \u0026lt; board_height - self.height: self.y += self.velocity Let\u0026rsquo;s try to understand the code in more detail.\nName the class class Paddle(pygame.Rect)\nThis is how you name the class \u0026quot;Paddle\u0026quot;. Now, notice the pygame.Rect inside (). You might have already imagined that in order to draw the paddle on a computer screen you need to draw it like a rectangle, then define its dimensions and position on screen to make it look like a paddle. The (pygame.Rect) statement would allow us to tell Python compiler to have this object draw like a rectangle and provide all rectangle\u0026rsquo;s attributes to it like WIDTH and HEIGHT. This helps us utilising all attributes available to Rectangle class in Pygame library.\nAdd attributes def __init__(self, velocity, up_key, down_key, *args, **kwargs):\nDont worry about args and kwargs for now and focus on core attributes of Paddle class.\n__init__ function allow you to setup the class with attributes you need to see in objects. You can define additional attributes here on top of what you already get from Rectangle class. Lets add attributes like velocity , up_key, down_key to represent the speed at which paddle can move, keys needed for upward and downward movement of paddle.\nclass Paddle(pygame.Rect): def __init__(self, velocity, up_key, down_key, *args, **kwargs): self.velocity = velocity self.up_key = up_key self.down_key = down_key super().__init__(*args, **kwargs) Add methods move_paddle() is a method. We use this method to get paddle to perform move actions. In this case, move_paddle() is helping move paddle upward or downward depending on the key we press for respective direction at a certain speed.\ndef move_paddle(self, board_height): keys_pressed = pygame.key.get_pressed() if keys_pressed[self.up_key]: if self.y - self.velocity \u0026gt; 0: self.y -= self.velocity if keys_pressed[self.down_key]: if self.y + self.velocity \u0026lt; board_height - self.height: self.y += self.velocity \n Now that you have defined how a paddle should look like and how it should move, feel free to take a look at classes for Ball and Pong. In next Activities you will modify certain aspects of these classes to make the Pong game work for you.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/the-basics/","title":"The Basics - Drawing a colored line","tags":[],"description":"","content":"Before Alex can learn how to create a beehive, he must first learn how to draw a colored line. We will add code to the below repl.it window, and we will do this in two parts.\n First, we need tell the turtle what color we want the line to be. To do this, let\u0026rsquo;s type in:\nturtle.color(\u0026quot;orange\u0026quot;) Let\u0026rsquo;s try to understand this line of code in more detail.\nStrings Anything you see in quotation marks is called a string. A string is just a sequence of characters (whether they are letters, numbers, or symbols).\nIn the code above, \u0026quot;orange\u0026quot; is a string. Other examples of strings include \u0026quot;123\u0026quot;, \u0026quot;abc!\u0026quot; and \u0026quot;green\u0026quot;. Be careful, 123, abc! and green are not strings because there are missing quotation marks!\nMethods turtle.color() is a method. We use methods to get the turtle to perform certain actions. In this case, turtle.color() is changing the color of the lines it draws to what color we tell it to. We told it to change the color to orange by sending it the string \u0026quot;orange\u0026quot; as an argument.\nArguments Arguments are inputs that you pass in to methods to use. In our example, turtle.color() needs a string argument representing the name of the color to set the turtle, so we passed in \u0026quot;orange\u0026quot; as an argument to the method. We could also have told it to change the color to something else, but it has to have been a color that turtle.color() understands. The colors that it recognizes are: \u0026quot;red\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;purple\u0026quot;, \u0026quot;black\u0026quot;, \u0026quot;pink\u0026quot;, and \u0026quot;gray\u0026quot;. If we send in anything else besides one of these color strings, we get the default color, which is black.\n Now that we have picked the color that we want, we can now draw a line! To draw a line there are two methods that we can use:\nturtle.forward(50) turtle.backward(50) turtle.forward(50) will make the turtle go forward 50 pixels and draw a line in the direction it\u0026rsquo;s facing, while turtle.backward(50) will do the same, but in the opposite direction.\nPixels An image is composed of thousands, if not, millions of pixels. A pixel is a unit of measurement for digital images, similar to how we measure weight in pounds, or long distances in miles.\nIntegers An integer is just any whole number, whether positive or negative. In this example, both turtle.forward() and turtle.backward() expect an integer as an argument instead of a string. This is because the argument represents the number of pixels you want the turtle to move when drawing. A string would clearly not work for these methods!\n Let\u0026rsquo;s make the turtle go forward, so type in turtle.forward(50). Now your code should look something like this:\nimport turtle turtle.color(\u0026quot;orange\u0026quot;) turtle.forward(50) Now that we have completed our code, press run. You should see the following in the result screen:\nIf so, great! If not, please ask for help.\nAs an exercise, try understanding what the following line of code does, and try adding this to your code. What does it do?\nturtle.shape(\u0026quot;turtle\u0026quot;) HELP! Nothing shows up on the screen! If, after pressing run, you don\u0026rsquo;t see anything on the screen, check to see if there is a red x beside the console tab (the console tab is right beside the result tab in the middle of the screen). If you do, you have encountered some errors! Please click the console tab and ask for help. Beware of the following when coding in python:\n Do not use any capital letters. Make sure that that none of the lines you have written so far start with any spaces. Ensure that the name of the color that you have chosen is surrounded in quotation marks, and that the color is between the parentheses in turtle.color(). \n "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/music-basics/","title":"Music Basics","tags":[],"description":"basics of music","content":" Basics first. A few things about music. What is Music? Music is the chronological organisation of sounds; that is, making certain sounds at certain times, which make melodic, rhythmic and harmonic sense. The first, most basic concept, is keeping the sounds \u0026ldquo;in time\u0026rdquo;. This leads us to some of the first few musical concepts: beat, rhythm, duration \u0026amp; tempo.\n Beat is the regular pulse which provides a timeline for the rhythm to anchor itself to. Rhythm is essentially repeated patterns of long or short, stressed or unstressed sounds or silences which fit into the main beat. Duration is the length of notes or sounds or silences which facilitate the rhythm. Tempo is the speed at which a piece of music is played.  "},{"uri":"https://nuevofoundation.github.io/workshops/adventure/story-boarding/","title":"Section 1: Story Boarding","tags":[],"description":"","content":"To get started, pull out a piece a paper and start \u0026ldquo;story boarding\u0026rdquo;. What does that mean? In order to develop a great story that allows the reader to choose between options, one can outline the flow of their story. This is a great planning step, that will you help you tremendously once you start coding! I would start with the 3 or 4 main choices your protagonist is going to make in the story. From there draw arrows for how the different choices your protagonist makes effects the story.\nNuevo‚Äôs Example Here an example of how to story board! The 4 main choices the protagonist will make is:\n Will she walk home from Robotics practice? Will she ride a bicycle home from Robotics practice? Will she play soccer with her friends at home? Will she go swimming with her friends at home?  Here is the resulting story board:\nNow, it‚Äôs great to mark up the different section of story board to match with different coding concepts that we‚Äôve learned. If our story needs to make decision, our code we use if-else statements. If we are asking the audience to give us input to make decisions in our story, we will use user input. The actual story that the audience will be reading is string variables!\nLet‚Äôs mark it up on the story board! Here is what it looks like:\nIt‚Äôs really helpful to annotate your story board so you know what code related topics we can use! We see that the story line will be comprised off text or string variables. The user-input can be the reader typing whether they want to \u0026ldquo;walk\u0026rdquo; or \u0026ldquo;bike\u0026rdquo; or choose \u0026ldquo;soccer\u0026rdquo; or \u0026ldquo;swim\u0026rdquo;. The user can choose their story based off the input they give to the computer! The different paths that Nuevo can take are a series of decisions. Luckily, we learned how to use if‚Äìelse statements, so the Nuevo can easily choose different paths the story can take!\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/writing-to-console/","title":"Writing to Console","tags":[],"description":"","content":"Writing to Console Console.WriteLine means to tell the computer to print the sentence enclosed within the parentheses () out onto the console.\nWorking Together  In the repl.it window below, press run. You see that Hello World is printed out to the screen on the right. Without removing the quotation marks, try changing \u0026quot;Hello World\u0026quot; to another sentence. Press run to see if anything changes. Add another Console.WriteLine below the current line to print a second sentence below the first sentence. Press run to see if two sentences are printed out. If you see any red text, please ask for help.  \n We will use printing heavily in the later lessons, so make sure you understand this before continuing!\nHELP! I got a lot of red text! If you see any red text, you have encountered some errors! Please ask for help or check the debugging page at the end of this tutorial. Beware of the following when coding in C#:\n The c in Console, and the w and l in WriteLine are capitalized. There is a semicolon ; at the end of the line. Make sure the sentence you wish to print is surrounded in quotation marks, and that the sentence is between the parentheses. Do not delete any curly braces { or }. \n "},{"uri":"https://nuevofoundation.github.io/workshops/python-guess-number/user-input/","title":"Accept user input","tags":[],"description":"","content":"Create the game This game will use some of the concepts you learned in the Python Basics section. You will need to know how to use the following concepts. If you are not familiar with any of these, please go back to review them.\n While loops Writing to console Reading from the console Conditional statements Random numbers  You will need to code this game so that it randomly generates a number. Then the program will repeatedly ask the user for input from the console, and you will need to compare this input to the number that was randomly generated.\nWhat\u0026rsquo;s the best way to do repeated tasks? You guessed it, loops! You can use a while loop to achieve this task.\nWithin the while loop, you can use conditionals to check if the player has guessed correctly. If not, you can give them helpful hints whether they should try guessing lower or higher.\nTry creating your own game!\n "},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/building-the-dj-station/","title":"Building the DJ station","tags":[],"description":"","content":"Hooking up the oranges Grab an orange and one of your wires. Open up one of the alligator clips and insert the bottom half into the orange, leaving the top part of the clip on the outside. This is easiest to do if you insert it in the middle of the bottom of the orange. The same spot where you‚Äôd start peeling if you were going to eat the orange.\nRepeat this for the second orange using your other wire. Connect one orange to A1 and the other one to A2 All together your orange assembly looks like this! Using your USB cable, connect the small side to the chip. It‚Äôll go into the silver port. Now let‚Äôs create the program before we plug in our chip to the computer! Please make sure your computer is MUTED before you start.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/conditional-statements-loops/loops/","title":"Loops","tags":[],"description":"","content":"Loops in Python If you want to repeat a task multiple times, Python has a way to do that easily using loops. There are two types of basic loops in python: for loops and while loops.\nFor loops For loops iterate over a sequence. Let\u0026rsquo;s say you wanted to repeat a simple task 5 times. Here is how you would do it.\nThe following for loop iterates through each of the numbers in the list [1,2,3,4,5], and assigns the value x to it. Then, it executes the code within the for loop.\n What if you wanted to repeat a task 10 times instead? 100 times? 1000 times??\nIt would be difficult to write a list with 1000 numbers [1,2,3,4,5,6,\u0026hellip;\u0026hellip;\u0026hellip;.,998,999,1000]. There is a function that can create this list for you.\nHere\u0026rsquo;s an example of how to create the list using the range function:\nThe below code creates a list starting at 1 and ending at 10. Try replacing the list [1,2,3,4,5] in the above example with this range function!\nrange(1,11) The list in the for loop doesn\u0026rsquo;t just have to be numbers, it can be anything! Here is another example of what you can do with it:\n While loops While loops are similar to for loops, but instead of iterating over a sequence, they repeat for as long as a certain condition is met. For example, let\u0026rsquo;s create a while loop that repeates 5 times.\n As you can see, all of the code below the while loop gets executed as long as the variable count is less than 5.\nBe careful! Make sure that the condition becomes False at some point, or the loop will continue infinitely.\nBreak statements You learned earlier that for loops and while loops keep iterating over a sequence until it reaches the end or until a condition is met.\nThere is another way to stop running these loops before the end of the list or before a condition is met.\nYou can do this with the break statement. This lets you break out of the loop in either a for loop or while loop.\nHere\u0026rsquo;s an example with a while loop:\n Challenges  Using a for loop or while loop, try printing the following pattern  1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 Given a large list such as the one below, write a program that can find a particular number from this list. For example, ask the user to enter a number in the console, then write to console if it was found.   How would you change this program if the list is very large? If you\u0026rsquo;ve found a number, do you need to continue searching the rest of the list?\n"},{"uri":"https://nuevofoundation.github.io/workshops/security/password-basics/","title":"Password Basics","tags":[],"description":"","content":"Our Secret Agent Alice solves the case by explaining Bob about Passwords!!!\nWhat is a Password? Passwords are the key to the lock to your virtual world. Just like your secret is kept safe in a secure room using a lock and a key similarly your personal information on the internet is secured by your login password and username. The secure room is only as secure as the key to the lock on the door. We need stronger passwords to protect our online data and identity from bad people known as Hackers.\nWhat went wrong? Passwords need to be private and should only be known to you. A strong password is one that is more secure by virtue of being difficult for a machine or a human to guess.\nExamples of weak passwords  Any common dictionary word, in any language (e.g., \u0026ldquo;airplane\u0026rdquo; or \u0026ldquo;Password\u0026rdquo;). A dictionary word where letters are replaced by numbers (e.g., \u0026ldquo;a1rplan3\u0026rdquo; or \u0026ldquo;P4ssw0rd\u0026rdquo;). A repeated set of characters (e.g., \u0026ldquo;AAAAA\u0026rdquo; or \u0026ldquo;12345\u0026rdquo;). A keyboard series of characters (e.g., \u0026ldquo;qwerty\u0026rdquo; or \u0026ldquo;poiuy\u0026rdquo;). Personal information (e.g., birthdays, names of pets or friends, Social Security number, addresses). Anything that‚Äôs written down and stored somewhere near your computer.  Bob\u0026rsquo;s key (his password) was his personal information and hence Eve could guess it.\nHow to fix it? By using stronger passwords. Let\u0026rsquo;s learn how to make a password strong as well as easy to remember. We don\u0026rsquo;t want to forget it. Do we?\n"},{"uri":"https://nuevofoundation.github.io/workshops/arduino/the-components/","title":"The Components","tags":[],"description":"","content":"The Components The components we will use for the project are shown below. Make sure you have all these components before starting:\nElegoo UNO Project Super Starter Kit with Tutorial for Arduino includes all hardware (with exception to the computer)\n  Core components needed for all activities    Arduino UNO R3 USB A to B cable Windows 10 PC Arduino IDE software (download)    Additional components needed for specific activities    (5) LEDs (any color) (5) 220ohm resistor Jumper wires Female-t0-make Dupont wire LCD panel + 5K ohm resistor 9V Battery (optional)    "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-structures/tuples/","title":"Tuples","tags":[],"description":"","content":"A Tuple is also an ordered collection of elements just like lists, but tuples are immutable. So you can not change the elements of a tuple after it is assigned (unlike lists where you are allowed to do so). This immutable nature makes tuples very useful when you don\u0026rsquo;t want your data to be mutated through out the program. Along with this, tuples are generally used to store elements of different data types. A tuple can be created by placing all the elements inside parentheses (), separated by commas.\n#creating a tuple of two elements of String type  my_tuple = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;) Tuples can also be created without parentheses. However, it is a good practice to use them.\n Tuple can also have elements of different types.\n#A tuple having elements of different data types my_tuple = (\u0026#39;apple\u0026#39;, 1, 4.5) Accessing the elements of a tuple We can access the elements of a tuple by using indexes inside square bracket [] just like list. Note the index starts from 0.\n#creating a tuple of three elements of String type  my_tuple = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(my_tuple[0]) ## prints apple print(my_tuple[2]) ## prints mango Combine two tuples We can combine two tuples by using + operator.\nfruits = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) numbers = (1, 2, 3) #Combine two tuples fruits and numbers combined_tuple = fruits + numbers print(combined_tuple) ## prints (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;, 1, 2, 3) Length of a tuple len(tuple) function gives the number of elements present in the tuple.\nfruits = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(len(fruits)) ## prints 3 Reassign a tuple Since tuples are immutable, we can not change an element of the tuple. So fruits[0] = 'lemon' will give an error as here we are trying to change the element at index 0 of \u0026lsquo;fruits\u0026rsquo;. But we can reassign a tuple.\nmy_tuple = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(my_tuple) ## prints (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) # ressigning my_tuple my_tuple = (1, 2, 3) print(my_tuple) ## prints (1, 2, 3) Deleting a tuple We can delete a tuple entirely using the keyword del.\nfruits = (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) print(fruits) ## prints (\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;mango\u0026#39;) # Deleting fruits del fruits print(fruits) ## Gives ERROR as tuple fruits is no longer present  Try it yourself "},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/app-structure/","title":"Game Application Structure","tags":[],"description":"","content":"Back to Foundations Now that the game has the right title, let\u0026rsquo;s dive deeper into all these files in the game folder. What do they all mean? How does it contribute to the game? AndroidManifest.xml Every project in Android includes a manifest file. For your game, this is the AndroidManifest.xml file. The manifest file defines the metadata for your game, for instance, it can define the icon and the overall theme for your game application.\nactivity_main.xml This file is located under the \u0026ldquo;layout\u0026rdquo; folder. As the folder name states, files in this folder define how your application looks. If you look at the code for activity_main.xml, you will see keywords such as TableLayout or TableRow. The combination of keywords in the activity_main.xml file create the layout for the game chooser buttons (Player vs Player or Player vs Computer), the tic-tac-toe board, and the reset button. The TableLayout keyword says the layout will be aligned to a table style, which includes columns and rows. TableRow keyword creates a new row in the layout, with each additional element corresponding to a spot in that row: MainActivity.kt This file is located under the \u0026ldquo;java\u0026rdquo; folder. The file contains the code and logic for your application.\ncolors.xml, strings.xml, styles.xml These files are located under the \u0026ldquo;values\u0026rdquo; folder. The files contain values that can be referenced by other XML files and application code.\nPutting it Together All these files work together to create your game. The activity_main.xml file decides what is shown to you. When you click on the buttons, events are sent from the activity_main.xml to the MainActivity.kt to determine what happens on that button click. For repeatable values, activity_main.xml and MainActivity.kt can reach out to colors.xml, strings.xml, or styles.xml to use those values from one convenient location.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-types/booleans/","title":"Booleans","tags":[],"description":"","content":"Booleans are True or False statements. Unlike strings or numbers, booleans store statements of truth: is what I\u0026rsquo;m saying true or false?\nFor example, if I say, \u0026ldquo;You are a robot\u0026rdquo;, a boolean can store whether this statement is true. In this case, since you are not a robot (hopefully!), False would be stored.\nWhat are the boolean answers to these questions about you?\n I am a human. _______ I have 25 fingers. _______ I like cookies. _______ My favorite color is blue. ______     Operator Description Operator Description     \u0026lt; Less than \u0026gt; Greater than   \u0026lt;= Less than or equal to \u0026gt;= Greater than or equal to   == Equal to != Not equal to    Challenge 1 As usual, use print to print out your results to the following:\nprint(5 + 8 \u0026lt; 10) print((3 + 5) * 6) == (65 - 17) The first statement should return False. And the second should return True.\nChallenge 2 Try printing out the answers to the following expressions using print. If the results for any of these statements don\u0026rsquo;t make sense, please ask for help!\n 54 \u0026lt; (10 + 32) (37 / 5) != 7 \u0026ldquo;Hello\u0026rdquo; + \u0026ldquo;World\u0026rdquo; == \u0026ldquo;Hello World\u0026rdquo; False == False  Challenge 3 Try making your own expressions!\nFun Fact: Connecting Booleans with AND and OR operators You can also connect boolean expressions together using the AND and the OR operator. Here\u0026rsquo;s a chart that describes what happens when we connect booleans together:\n   Expression Result     True and True True   True and False False   False and True False   False and False False   True or True True   True or False True   False or True True   False and False False    To summarize, AND requires both boolean expressions to be true, while OR only requires one of the two Boolean expressions to be true. Here are some more examples:\n (5 \u0026lt; 8) and (9 != 10) produces True since both 5 is less than 8 and 9 is not equal to 10. (8 \u0026lt;= 2) or (\u0026ldquo;h\u0026rdquo; + \u0026ldquo;e\u0026rdquo; == \u0026ldquo;he\u0026rdquo;) produces True since \u0026ldquo;h\u0026rdquo; + \u0026ldquo;e\u0026rdquo; results in \u0026ldquo;he\u0026rdquo;, even though 8 is not less than or equal to 2. (6 != 2 * 3) or (8 \u0026lt; 2 * 4) produces False since both 6 not equal to 2 * 3, and 8 being less than 2 * 4, produce False.  What do you think the following expressions produce?  (11-2 \u0026lt; 10) and (7+3 \u0026gt; 10) (True or 3 \u0026lt; 1) and (False or 3\u0026gt;1)  "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/functions/","title":"Functions","tags":[],"description":"","content":" Functions are a way to organize pieces of similar or repeating code. Rather than having to constantly type out the same code, we can put the desired code in a function and call it whenever we want to use it.\nNote: The purpose of a function is to help reduce redundant code throughout the program.\n Creating a function Define your function - name \u0026amp; parameters To make a function in python, we must use the def keyword. This keyword tells the code editor where the function is defined. def is followed by the name of the function. In order to generalize the function (so that we can use it at multiple places), we might need to send some information to it. This is achieved using parameters. They are placed in between parentheses () and follows right after the name of the function. If no parameters are needed, they can be ignored. The function declaration ends with a colon. Here\u0026rsquo;s what a function looks like:\nMake sure that the first line of your function always ends with a colon :\n Write the function body In Python, indentation defines which code is controlled by the function. For example, look at the following image: The code that is indented underneath the sectionA function is the code that is executed each time function sectionA is called.\nWarning: Since identation is very important in Python, make sure that the body of the function always starts with 2 spaces.\n Using the function - Function call To call a function, input the name of the function and its parameters wherever you want to execute the function. For example, in order to call function sectionA, we would do something like this: Be careful: When making a function in Python, you must define the function and its contents before it is called. In other words, in the code, you need to put the function declaration above the function call. Otherwise, you will receive a NameError like below. See the following figure for an example:  Challenge 1 - Create your own function! Challenge: Create a function called addNumbers that takes 2 parameters called number1 \u0026amp; number2 and prints the sum on console. Call the function addNumbers with parameters 3 \u0026amp; 5. What is printed on the console?\n Challenge 2 Let‚Äôs try to create some simple math functions. Create a function called add that takes in two parameters, number1 and number2, and return the sum of the two numbers.\nFirst copy the structure of the triple function. Change the triple function name, and replace the parameter number with number1 and number2, separated with a comma. Both number1 and number2 should be int, and don‚Äôt forget to add number1 and number2 together!\n To check that your function is working correctly, add the following code after your function definition, which calls the function add() and save its value in a variable. For example:\n value2 = add(2, 3) print(\"This should print 5: \" + str(value2))  Challenge 3 Can you create functions for subtraction, multiplication, and division?\nTest the functions out by calling each function, saving its return value, then printing it out to the console.\n"},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/steps-to-start/","title":"Starting up","tags":[],"description":"","content":"Open the Activity-1 Scaffold URL to do the activity. https://repl.it/@nuevofoundation/JSappyBird-Activity-1-Scaffold\nWhen you make changes to the scaffold you will be created as anonymous users.\nYou should see something like the following screen:\n"},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/putting-together/","title":"Putting it together","tags":[],"description":"","content":"Putting it together For your browser to understand what each element of your site is, we need to label them with HTML tags. HTML stands for Hypertext Markup Language. Tags are words surrounded by the symbols \u0026lt;and\u0026gt;. For example, the \u0026lt;img\u0026gt; tag tells your browser ‚Äúthis is an image.‚Äù The \u0026lt;button\u0026gt; tag tells it ‚Äúthis is a button.‚Äù\nTags can also be used to organize your webpage! The image below outlines the structure of a basic webpage. The head usually contains the additional libraries used and the page title, while the body contains most of the displayed content.\nMost tags need an opening tag and a closing tag. For example, you will see all pages have an \u0026lt;html\u0026gt; opening tag at the top, and a closing \u0026lt;/html\u0026gt; tag at the end. This tells the browser where the HTML elements start and where they end. Think of tags like quotation marks; for example, the computer will understand that everything in between the tags \u0026lt;html\u0026gt; and \u0026lt;/html\u0026gt; is part of an HTML website.\nThere are also a few tags, like the image tag \u0026lt;img\u0026gt;, that are self-closing, meaning that they only need an opening tag, and do not need a closing tag.\nHere is an example:\nSee the Pen HTML Basics by Deliana Escobari (@Sunny-Dee)\ron CodePen.\r\r"},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-1/","title":"Activity 1 - Define the width of the Pong screen","tags":[],"description":"","content":"Activity 1 You can adjust the boundary of pong game by adjusting the height and width of rectangle that represent the boundary.\nGo to the code containing the Pong game. Press run. Notice that the game\u0026rsquo;s boundary don\u0026rsquo;t look right - see the below image. Let\u0026rsquo;s fix this in this activity so that game boundary looks good.\nFind // TODO (ACTIVITY 1) in the code. Modify the WIDTH attribute of Pong class. If you did this correctly, boundary problem will be fixed. Confirm the result after pressing run.\nFeel free to use any other values on height and width attributes besides mentioned in Activity to see the effects of different values on game's boundary.\n Takeaway You have just modified one of the attributes in Pong class to influence how the game will look on screen.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/functions/built-in-math/","title":"Built-in Math Functions","tags":[],"description":"","content":"Python provides a number of important built-in functions that we can use without needing to provide the function definition. In this section, we will learn about some of the built-in math functions using that you can perform mathematical tasks on numbers.\nThe max() and min() functions give us the largest and smallest values in a list, respectively:\nx = min(20, 10, 50, 25)\t#x = 10 print(x) y = max(20, 10, 50, 25)\t#y = 50 print(y) The abs() function give us the absolute(positive) value of number:\nx = abs(-34)\t#x = 34 print(x) y = abs(90)\t#y = 90 print(y) The pow(a, b) function give us the value of a raised to the power of b (ab):\nx = pow(3,4)\t#x = 81 print(x) Challenge Let‚Äôs put it all together! Let‚Äôs see if we can create a program that takes 5 numbers from the user and prints the value of minimum of those numbers raised to the power of maximum. For example, given the number 2,7,4,11,9, return 211.\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-1/","title":"Activity 1 - Drawing a square","tags":[],"description":"","content":"Kudos! You helped Alex draw a line! Now let‚Äôs step it up and help Alex draw a square. To draw a square, we need to follow these steps:\n Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps Turn left by 90 degrees Go forward for 50 steps  Remember to use turtle.forward() to draw lines. To turn 90 degrees left, you need to pass 90 as the argument to the turtle.left() method:\nturtle.left(90)  "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/comments/","title":"Comments","tags":[],"description":"","content":"Comments Developers often need to collaborate with other developers. Comments are an easy way for developers to write notes in the code and communicate with others. Comments are ignored by the computer; thus, they are also an easy way to tell the computer to not run certain lines of code. There are two ways to create comments:\n To comment out one line, place // in front of a line of code. For example:  // This is a single-line comment. To comment out multiple lines at once, indicate the start of the comment with /* and the end of the comment with */. For example:  /* This is a multi-line comment. This line is also part of the comment. */ To remove a comment (or uncomment a line), simply delete the // for a single-line comment, or the /* and the */ characters for the multi-line comment.\nWorking Together  Place // in front of Console.WriteLine(\u0026quot;Hello World\u0026quot;);. After pressing run, check to make sure that Hello World is not printed to the console. Delete the // and instead, surround Console.WriteLine(\u0026quot;Hello World\u0026quot;); with /* and */. Check that Hello World is still not printed to the console after pressing run. Delete both /* and */, and press run. Hello World should now be printed to the console.   Throughout today\u0026rsquo;s activity you will see various multi-line comments and // TODO comments. These comments will guide us towards completing the Guess the Word game, so be sure you understand how to comment and uncomment code.\n "},{"uri":"https://nuevofoundation.github.io/workshops/adventure/story-board-code/","title":"Section 2: Transferring the Story Board to Code!","tags":[],"description":"","content":"It‚Äôs time to open repl.it. Now it is time to create, let‚Äôs get creative!\nYou can continue working off Nuevo‚Äôs story line:\n You can work on a template for a Choose Your Own Adventure game:\n Or you can start from scratch and make it your own! Just go to repl.it and start story telling!\n"},{"uri":"https://nuevofoundation.github.io/workshops/security/activity/","title":"Activity","tags":[],"description":"","content":"Let\u0026rsquo;s play a game!\nWrite your favorite sentence in the text box below. Make sure it has at least five words. (E.g. I like playing volleyball at the beach.)  Now take the first letter of each word from the above sentence and write inside the text box. (E.g. ilpvatb)  Add some numbers to the text. Remember the position of the numbers. (E.g. 1ilpvatb6)  Finally, let's add some special characters to the text. (E.g. 1ilpv$atb6)   Voil√† that\u0026rsquo;s your new password! Doesn\u0026rsquo;t it look hard to crack? Success!  "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/comments/","title":"Comments","tags":[],"description":"","content":" Make notes while you are coding Comments are the parts of the code that do not get evaluated. In Python, they are preceded by the # symbol. Anything after the # symbol is part of the comment and is ignored by your code. Comments are put in the code to tell the readers what the code is doing. They can make maintenance of code easy and can also help in finding bugs.\nWhile writing code, If at any time you wish to write notes to help you understand the code, use the # symbol to create a comment.\n# This is my first line of code print(\u0026#34;Hello, World!) Be careful, if you remove the # symbol, your code will not work!\nChallenge Try adding a comment above your first line of code and press run. You will see that the computer will ignore your comment.\n"},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/creating-the-program/","title":"Creating the Program","tags":[],"description":"","content":"Open your favorite internet browser (such as Edge, Firefox, Google Chrome, Internet Explorer), and go to https://aka.ms/oranges. Your screen should look like this:\nDefining the Variables Today we are going to be using oranges to tell our Adafruit when to make noise. The first thing we need to do is give the computer a name for each orange and where to look for what they are saying. We do the first part by defining a variable. Click on the section that says VARIABLES, it is salmon colored and 7th from the top. Then define a variable by clicking on Make a Variable and giving it a name. Do this twice, here we define ours as analog1 and analog2 but you can call them whatever you want.\nInterpreting out Inputs Now that we have a name that our computer knows for our oranges, we must let our Adafruit know how to understand them. There are two kinds of inputs, digital and analog. Light switches and power buttons are examples of digital inputs. They are either on or off, 1‚Äôs or 0‚Äôs. Analog inputs are like a light dimmer or a volume button. They have more options for values. Our oranges are going to be analog inputs and how much we are touching or squeezing them will change the value they report to the Adafruit.\nClick again on the Variables section. This time you should see a few more options now that we‚Äôve defined our two variables. Drag one of the ‚Äúset ___ to __‚Äù blocks into the green ‚Äúforever‚Äù block in our workspace. Using the white down arrow, change the first blank to ‚Äúanalog1‚Äù.\nNext, click on the down arrow by ADVANCED then click on PINS. Look for the ‚Äúanalog read pin __‚Äù block, it will be third from the top, and insert it where the 0 is on our ‚Äúset analog1 to 0‚Äù block is. To insert it into that slot, drag it so that it‚Äôs hovering over the zero, check that the 0 is highlighted in yellow, then let go of the mouse (or touchpad). You should see the block extend to accommodate the block. If you don‚Äôt see this, try again.\nOnce you‚Äôve done that, your workspace should look like the above picture. Repeat this process again but this time use the white down arrows to select analog2 and A2. See below to verify you‚Äôve done this correctly. Creating our Loops Now that our computer knows what to call our oranges, and how to understand what they are saying, let‚Äôs create a loop that will check for when we are holding our orange. Click on the LOGIC section and drag the ‚ÄúIf ____ then‚Äù block out to put it under your variable blocks.\nLet‚Äôs go back to the volume knob example to understand the comparison we are going to be making in our loop. Every person has a sweet spot for how loud they like to listen to their music to be able to enjoy it the most. This sweet spot is also true for our oranges. They‚Äôll tell the computer a number when they‚Äôre just sitting there and a lower number when we touch them. The trick is to find the spot in between so that we only make noise when we want to.\nTo set this up, go to the LOGIC section again and grab the hexagonal ‚Äú __ \u0026lt; __ ‚Äú block that‚Äôs second under the Comparison subsection. Place that on top of the ‚Äútrue‚Äù in the ‚Äúif __ then‚Äù block. Make sure you see the yellow highlight before dropping it there. Check the picture below to verify your workspace.\nNow let‚Äôs put in what we are comparing. Go back to the VARIABLES section, pull out analog1, and put it in the first slot. Then click on the second slot and type 40. This 40 should be a good sweet spot for most people. If at the end, your orange is making noise without you touching it, you can come back to this step and make the number bigger. If your orange isn‚Äôt making noise when you touch it, you can come back and make the number bigger. For now, let‚Äôs just leave it at 40.\nNow we can pick out our music! Click on the MUSIC section and drag the second block ‚Äùplay _____ until done‚Äù into our If-Then block. Feel free to click on that down arrow and select your own sounds.\nNow we want to repeat these last few steps for analog2. Once you do this, your workspace will look like the picture below (but with your music options).\nAdded Fun With Lights (Time Permitting) The Adafruit chip has a lot of lights on it! They‚Äôre super fun to play with so let‚Äôs add a bit of color to our sounds so we can both see and hear the difference when we touch our oranges. Click on the LIGHT section and drag the ‚ÄúSet all Pixels to ___‚Äù block into our two If-Then chunks. You‚Äôll want to drop them in right before we play a sound. You can click on the color portion to change which color you want to display.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/python-basics/","title":"Python Basics","tags":[],"description":"basics of python","content":"Python basics To code music, we need to learn a little Python. Don\u0026rsquo;t worry, it won\u0026rsquo;t bite you. Python is one of the languages that we humans use to tell computers what to do. These languages are known as \u0026ldquo;programming languages\u0026rdquo;. We will learn Python concepts throughout the class, but let\u0026rsquo;s start with a simple print statement.\nIf you want to jump to a specific Python section, click on the topic below:\n Python Console Comments Functions  "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-structures/sets/","title":"Sets","tags":[],"description":"","content":"Just like a list, a set is a collection of items. The difference between a set and a list is that a set cannot contain duplicates. So, if you have 5 chocolates and you put them in a set, you\u0026rsquo;ll only be left with 1 chocolate as duplicates will be removed. üò¢\n In the image above, the left side represents Indoor Games (Chess \u0026amp; Table Tennis) while the right side represents the Outdoor Games (Cricket \u0026amp; Football). The middle represents the common part of both these sets. These are the games that can be played Indoors as well as Outdoors (Basketball \u0026amp; Badminton). The middle part is also known as the intersection between two sets.\nA set is created by using the set() function or placing all the elements within a pair of curly braces.\n indoorGames = set([\u0026#34;Chess\u0026#34;, \u0026#34;Table Tennis\u0026#34;, \u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;]) outdoorGames = {\u0026#34;Cricket\u0026#34;, \u0026#34;Football\u0026#34;, \u0026#34;Basketball\u0026#34;, \u0026#34;Badminton\u0026#34;} print(\u0026#39;** Indoor Games **\u0026#39;) print(indoorGames) print(\u0026#39;** Outdoor Games **\u0026#39;) print(outdoorGames) Output\n** Indoor Games ** set([\u0026quot;Chess\u0026quot;, \u0026quot;Table Tennis\u0026quot;, \u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;]) ** Outdoor Games ** set([\u0026quot;Cricket\u0026quot;, \u0026quot;Football\u0026quot;, \u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;]) Union of Sets If we have 2 sets as above, the union of these two sets contains the games from both the sets. The output will be a new set. The duplicates will be removed.\nThe symbol used for Union is |.\nallGames = indoorGames | outdoorGames print(\u0026#39;** All Games **\u0026#39;) print(allGames) Output\n** All Games ** set([\u0026quot;Chess\u0026quot;, \u0026quot;Table Tennis\u0026quot;, \u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;, \u0026quot;Cricket\u0026quot;, \u0026quot;Football\u0026quot;]) Intersection of Sets The intersection of 2 sets will be the set containing both indoor and outdoor games.\nThe symbol used for Intersection is \u0026amp;.\ncommonGames = indoorGames \u0026amp; outdoorGames print(\u0026#39;** Common Games **\u0026#39;) print(commonGames) Output\n** Common Games ** set([\u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;]) Difference of Sets The difference of 2 sets will be the set that contains games from one set that are not present in the other set.\nThe symbol used for Difference is -.\nindoorOnlyGames = indoorGames - outdoorGames print(\u0026#39;** Indoor Only Games **\u0026#39;) print(indoorOnlyGames) Output\n** Indoor Only Games ** set([\u0026quot;Chess\u0026quot;, \u0026quot;Table Tennis\u0026quot;]) Print the items of a set You cannot print the items of a set using the item number like a list. The elements of a set are not in a fixed sequence.\nTherefore, you cannot do something like indoorGames[0], or indoorGames[1] like you can do in a list. However, you can go through the elements of a set using a for loop.\nfor g in indoorGames: print(g) Output\nChess Table Tennis Basketball Badminton Adding items to a set We can use the .add function to add a new game to a set.\nindoorGames.add(\u0026#34;Carrom\u0026#34;) print(\u0026#39;** Indoor Games **\u0026#39;) print(indoorGames) Output\n** Indoor Games ** set([\u0026quot;Chess\u0026quot;, \u0026quot;Table Tennis\u0026quot;, \u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;, \u0026quot;Carrom\u0026quot;]) Removing items to a set We can use the .discard function to remove an item from the set.\nindoorGames.discard(\u0026#34;Chess\u0026#34;) print(\u0026#39;** Indoor Games **\u0026#39;) print(indoorGames) Output\n** Indoor Games ** set([\u0026quot;Table Tennis\u0026quot;, \u0026quot;Basketball\u0026quot;, \u0026quot;Badminton\u0026quot;, \u0026quot;Carrom\u0026quot;]) If you remove an item that is not present in the set, you won\u0026rsquo;t get any error. On the other hand, if you try to remove an item that is not present in a list, you would get a ValueError !\n Try it Yourself "},{"uri":"https://nuevofoundation.github.io/workshops/arduino/setting-up-the-pc/","title":"Setting up the PC","tags":[],"description":"","content":"Setting up the PC Download and install the Arduino IDE from:\n the Microsoft Store (quicker install) - https://www.microsoft.com/store/productId/9NBLGGH4RSD8 or from the Arduino website https://www.arduino.cc/en/Main/Software (current version is 1.8.9)  Once the software has been installed on your computer, go ahead and open it up. This is the Arduino IDE and is the place where all the programming will happen. Take some time to look around and get comfortable with it.\nhttps://www.makerspaces.com/simple-arduino-projects-beginners/\n Menu Bar: Gives you access to the tools needed for creating and saving Arduino sketches. Verify Button: Compiles your code and checks for errors in spelling or syntax. Upload Button: Sends the code to the board that‚Äôs connected such as Arduino Uno in this case. Lights on the board will blink rapidly when uploading. New Sketch: Opens a new window containing a blank sketch. Sketch Name: When the sketch is saved, the name of the sketch is displayed here. Open Existing Sketch: Allows you to open a saved sketch or one from the stored examples. Save Sketch: This saves the sketch you currently have open. Serial Monitor: When the board is connected, this will display the serial information of your Arduino Code Area: This area is where you compose the code of the sketch that tells the board what to do. Message Area: This area tells you the status on saving, code compiling, errors and more. Text Console: Shows the details of an error messages, size of the program that was compiled and additional info. Board and Serial Port: Tells you what board is being used and what serial port it‚Äôs connected to.  Connect your Arduino Uno At this point you are ready to connect your Arduino to your computer. Plug one end of the USB cable to the Arduino Uno and then the other end of the USB to your computer‚Äôs USB port.\nOnce the board is connected, you will need to go to Tools then Board then finally select Arduino Uno.\nNext, you must tell the Arduino which port you are using on your computer.\nTo select the port, go to Tools then Port then select the port that says Arduino.\n"},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/arrays/properties/","title":"Properties","tags":[],"description":"","content":"Array properties or characteristics are a way to describe the attributes of the array. Examples include: the total number of elements, the value at a particular index, etc\u0026hellip;\nHere is a list of the properties of the Array object along with their description.\nConstructor() Returns a reference to the array function that created the object.\nSyntax:\narrayName.constructor; Example: Index() The property represents the zero-based index of the match in the string. Index provides a way to access or modify elements based on their position in the array.\nAccess an array element by index: Syntax:\nvar value = arrayName[index]; Example: Modify an array element by index: Syntax:\narrayName[index] = newValue; Example: Length() Reflects the number of elements in an array.\nSyntax:\nvar length = arrayName.length; Example: "},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/printconsole/","title":"Printing to Console","tags":[],"description":"","content":"Printing to Console Sometimes the game or application might not work the way you expect it to or you want to write something to console for logging purposes. Outside of debugging the application, you can use System.out.println() to write your message. Lookout for your messages in the \u0026ldquo;logcat\u0026rdquo; window at the bottom of Android Studio: Working Together  Without removing the quotation marks, try changing \u0026quot;Restarting the Tac-Tic-Toe Game!\u0026quot; to \u0026quot;Restarting the Tic-Tac-Toe Game!\u0026quot; or any other sentence you like. Press run to see if anything changes. Add another System.out.println below the current line to print a second sentence below the first sentence. Press run to see if two sentences are printed out. If you see any red text, please ask for help. \n HELP! I got a lot of red text! If you see any red text, you have encountered some errors! Please ask for help or check the debugging page at the end of this tutorial. Beware of the following when coding in C#:\n out and println start with a lowercase letter System starts with an uppercase letter Make sure the sentence you wish to print is surrounded in quotation marks, and that the sentence is between the parentheses Do not delete any curly braces { or } \n System.out.println is helpful when you want to fix bugs in code, but your user (the person using the app) can‚Äôt see text printed with this function. But we can do this with toasts! A toast is a quick, small text that we make visible to the user. Here‚Äôs how to make a toast: "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/load-the-bird/","title":"Load the bird image","tags":[],"description":"","content":"First of all let\u0026rsquo;s load Flappy and put it on the screen.\nAdd below command in the file [File: load-sprites.js] game.load.image(\u0026lsquo;bird\u0026rsquo;,\u0026lsquo;assets/bird.png\u0026rsquo;);\nWorking Together In the repl.it window below, we started the code with the line game.load.image('bird', 'assets/bird.png');.\nIn your console you should see a Jsappy bird after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/variables/","title":"Variables","tags":[],"description":"","content":"Variables are simply names that we can give to values such as strings, numbers, and booleans. Here‚Äôs how to make a variable named s. We say s is a string that has the value \u0026quot;Hello, World!\u0026quot;. Can you describe the following variables?\ns = \u0026#34;Hello, World!\u0026#34; x = 88 happy = True Press run.\nNote that variables are not printed out to the console. Instead, the variable simply saves the string, number, or boolean into the computer‚Äôs memory. We can use these variables in other statements. For example, the following code would print \u0026quot;Hello Nuevo Foundation\u0026quot; to the console:\nstr1 = \u0026#34;Hello\u0026#34; str2 = \u0026#34;Nuevo Foundation\u0026#34; print(str1 + \u0026#34;\u0026#34; + str2) You can also do the following to print strings together while adding spaces in between the words.\nstr1 = \u0026#34;Hello\u0026#34; str2 = \u0026#34;Nuevo Foundation\u0026#34; print(str1, str2) Challenge  Create two new variables: A variable named comp that stores the string \u0026quot;Computer\u0026quot;. A variable named five that stores the number 5.  Next, use the variables and what you learned in the previous activities to print out the following to the console. You must use the variables!\nComputer 5 ComputerComputer 10 ComputerComputerComputer 15  Hint: If you\u0026rsquo;re stuck, consider using the + operator. Remember that you can use the variables comp and five multiple times in the same line!\n  "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/activity-1/","title":"Activity 1","tags":[],"description":"","content":" Open the web editor (click the \u0026ldquo;Try it yourself!\u0026rdquo; button below) Use the header tags to add a title, and the paragraph tags to write a paragraph about Benji If you have time: write a list of Benji\u0026rsquo;s favorite treats: turkey, peanut butter, and string cheese  Try it yourself!\nUse this reference chart to try some html tags on your own.\n   Tag Description Example     \u0026lt;html\u0026gt;\u0026lt;/html\u0026gt; Describes an HTML Document. Any website must start with the  opening tag and end with the  closing tag. See the Code Pen example above.   \u0026lt;!-- --\u0026gt; Describes a comment. Comments are meant for other coders to see but they are not displayed on the website. \u0026lt;!-- This line will not show in the browser --\u0026gt;   \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; Contains all the HTML elements that give information to the browser to display the website correctly. The HTML elements between  and  tag are not displayed. See the Code Pen example above   \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; Contains the title of the website to be used for naming the browser tab. \u0026lt;head\u0026gt;\n\u0026lt;title\u0026gt; My Website \u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;   \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; Contains all the HTML elements that are displayed in the page like text and pictures. See the Code Pen example above.   \u0026lt;h1\u0026gt;\u0026lt;/h1\u0026gt;\n\u0026hellip; \u0026lt;h6\u0026gt;\u0026lt;/h6\u0026gt; Defines a heading/title. \u0026lt;h1\u0026gt; defines the most important (largest) heading/title, while \u0026lt;h6\u0026gt; defines the least important (smallest) heading. \u0026lt;h1\u0026gt;This will be a big title\u0026lt;/h1\u0026gt;\n\u0026lt;h4\u0026gt;This will be a smaller title\u0026lt;/h4\u0026gt;   \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; Describes a paragraph. \u0026lt;p\u0026gt;Dogs evolved to love humans. In conclusion, dogs are a human‚Äôs best friend.\u0026lt;/p\u0026gt;   \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; Defines a division or section on the site. \u0026lt;div\u0026gt;\n\u0026lt;h1\u0026gt;All about me\u0026lt;/h1\u0026gt;\n\u0026lt;/div\u0026gt;   \u0026lt;img\u0026gt; An image. It‚Äôs a self-closing tag but you must specify the source of the image for the browser to know where to get the image from. \u0026lt;img src=\u0026quot;aka.ms/Benji-the-dog\u0026rdquo;\u0026gt;   \u0026lt;hr\u0026gt; Draws a horizontal line. Another self-closing tag that‚Äôs useful if you want to break up the page‚Äôs content. \u0026hellip; \u0026lt;hr\u0026gt; \u0026hellip;   \u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt; A list. To start the list, use a \u0026lt;ul\u0026gt; tag. For each item to be added to the list, surround the item with the \u0026lt;li\u0026gt; and \u0026lt;/li\u0026gt;tags. Finish the list with the \u0026lt;/ul\u0026gt; tag. \u0026lt;ul\u0026gt;\n\u0026lt;li\u0026gt;This is a list item.\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;    "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-2/","title":"Activity 2 - Change the color of objects in game.","tags":[],"description":"","content":"Activity 2 Great! You just fixed the game\u0026rsquo;s boundary. Now, notice that how everything inside game looks black and white. Let\u0026rsquo;s give it some colors.\nTo do this, we need to modify the RGB values in COLOR attribute. RGB stands for RED, GREEN, BLUE. In computer screen you can modify the color of each pixel by modifying its RGB value. Every color can be represented by combination of different RGB values in it. The values are specified in same order as RGB is written.\nFind // TODO (ACTIVITY 2) in the code. Modify the COLOR attribute of Pong class. If you did this correctly, the objects will acquire the desired color. Confirm the result after pressing run.\nFeel free to use different RGB values to see the effect of color changes in game's objects.\n Takeaway You have just modified COLOR attribute in Pong class to influence how the objects will look on screen and how to modify the RGB values to get desired color.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-2/","title":"Activity 2 - Simplifying code with loops","tags":[],"description":"","content":"Great! You drew a square. But notice that we are writing the same lines over and over again! We had to repeat the instructions to draw a line and turn left 4 times. Wouldn‚Äôt it be great if we can give instructions once and tell the program to repeat it 4 times? Fear not, we can!\nTo do this, we need to use loops. Loops run a set of instructions multiple times. To see this in action, here is some example code that draws a triangle:\nfor i in range(3): turtle.forward(50) turtle.left(120) Let‚Äôs understand what this code does. for i in range(3): This statement tells the program to run the instructions in a loop. range(3) sets a limit to how many times the loop runs (in this case, 3 times). The letter i is called a variable. It is used to keep track of how many times we have run the contents of the loop.\nTricky Python syntax - Part 1 Syntax is how we write languages so that it is understandable. In English we have spelling and grammar rules to help understand each other. Similarly, the Python language has syntax rules so that the computer can understand our code.\nFirst, notice that at the end of the line with for, we added a colon (:); this signifies that the next line will be part of the for loop. The computer will complain if you miss the :!\nAs well, we added a tab in front of some lines of code in the example above. The tab tells the computer these statements are considered a part of the for loop.\nTo see how big of a difference this makes, take a look at the below code. Because we removed the tab in front of turtle.left(120), the code will no longer work as expected. Now, we only repeat turtle.forward(50) three times, and we get a straight line instead!\nfor i in range(3): turtle.forward(50) turtle.left(120) \n Now, take the example code that we have provided, and modify it slightly so that, instead of drawing a triangle, it draws a square. You can look back at what you did in Activity 1 as a hint.\n "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-1/","title":"Activity 1","tags":[],"description":"","content":"Activity 1 Go to the code containing the GuessTheWord game. Press run. Notice that Press 'run' on the top of the screen to play again. is the only thing that is printed to the console. Let\u0026rsquo;s add a welcome message so that the player knows they playing the Guess the Word game.\nFind // TODO (ACTIVITY 1) in the code. Add a line of code to print Welcome to C# GuessTheWord to the console. If you did this correctly, Welcome to C# GuessTheWord will be printed to the console after pressing run.\n"},{"uri":"https://nuevofoundation.github.io/workshops/arduino/activity-1/","title":"Arduino - Activity 1","tags":[],"description":"","content":"Activity 1 - Blinking LED For your introduction to this system we can get the basics of circuitry and how our program can run and manipulate components (in this case turn an LED on and off).\n Attach the long lead (anode) of your LED to pin 44J and the short lead (cathode) into pin 43Z (anywhere in the blue [-] line). Attach a 220 resistor with one leg in 44H and the other in 45Y (anywhere in the red [+] line). Attach one end of a jumper wire to 30Y on the Breadboard and the other to 5V on the Elegoo. (we are using red for positive charge and black for negative charge but the color doesn‚Äôt matter) Attach one end of a jumper wire to 31Z on the Breadboard and the other to GND (ground) on the Elegoo. Plug in the Arduino board via USB to your PC and open the Arduino IDE application Click on File -\u0026gt; Examples -\u0026gt; 01.Basics -\u0026gt; Blink  Now click the upload button to deploy the program to the Arduino.  EXTRA: Notice the timing of the LED turning on and off. What do you think you could change in the program to modify that timing? If you said the number 1000 in delay (1000); you are RIGHT! Change that number (don‚Äôt forget to hit the upload button again). Notice a difference? Why do you think 1000 is 1 second? How long would 10 minutes be? Why?\n"},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/downloading-your-program/","title":"Downloading your program","tags":[],"description":"","content":"At the bottom of your workspace you should see this bright pink download button next to the name of your program. You can name your program anything, here it‚Äôs called adafruit_musicalfruit. Click on the download button.\nYou should see a window popping up, asking where to save your file. It should default to the Downloads folder, if not, navigate to your downloads folder and save the file there.\nNow you can plug your USB cable into the computer. You should see some rainbow lights! This means your chip is on and running the default program. We are going to replace that with our program. Click the small reset button in the center of the chip. The lights should turn red then green. If your lights didn‚Äôt go green, quickly double click the reset button and wait a few seconds.\nOnce your lights are green, open up a Windows Explorer window if one doesn‚Äôt pop up. You should now see a CPLAYBOOT drive. Here it is shown as the D: drive but it could be E:, F:, etc.\nOnce you‚Äôve verified that you can see this CPLAYBOOT, go to the Downloads folder and find the file that you saved there. You need to click and drag that file until you are hovering over CPLAYBOOT. You should see some text pop up saying ‚Äú\u0026ndash;\u0026gt; Move to CPLAYBOOT‚Äù. Drop the file there to copy it to CPLAYBOOT\nAfter you‚Äôve dropped the file in the right place, the green lights will go away to indicate that you‚Äôve successfully programmed your Adafruit!\nCONGRATS! You‚Äôve done it. Feel free to go back and tweak the sounds or your magic number in the comparisons. "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/getting-started-earsketch/","title":"Getting started with Earsketch","tags":[],"description":"intro on how to use Earsketch","content":" EarSketch is a free educational programming environment developed at Georgia Institute of Technology. We will be composing music using EarSketch today.\n  To make music, click on EarSketch to open it in a new tab.\n  Now, let\u0026rsquo;s get started. Click on Scripts icon on the left menu bar and select Create a new script. When prompted to enter the script name, enter myjam and click on Create button.   Do not delete any of the pre-existing code! We will insert our code in between them.\n  Recommended for Teachers - Overview of EarSketch Please take a look at overview of EarSketch before you start with the class. It is important to know how to navigate back and forth in the UI.\nThe navigation bar on the left side of the screen is your homebase for navigating through all that EarSketch has to offer.\n  The first item of the navigation bar is the Sounds collection. It is the central location for all the pre-loaded sounds that earsketch has to offer. In the sound browser, you can filter which sounds appear based on the artists, the genre, or instruments.   The next icon on the navigation bar is the Scripts pane. This is where we will write our code.   The next (third from top) icon is the Share section. You can use this to save your code, download or share it with your friends. We will skip this section for this exercise.\n  The last two icons on the navigation bar are the API Browser and the Curriculum guides.   We will use API browser to make music. An Application Programming Interface or API is a set of code that is ready for you to use right away! You may notice two icons to the right of each API. The first icon provides a description of the API and an example on how to use the API. The second icon copies and pastes the API into the code editor, so you do not even need to type it! We will use a couple of these in the coming sections.\nThe last icon in the above picture shows the Curriculum guide. If you want to know more about EarSketch, you can explore the section that appears on the right side of the window when you click on it. We will skip this section for this exercise.\n"},{"uri":"https://nuevofoundation.github.io/workshops/security/spy-game/","title":"Spy Game","tags":[],"description":"","content":"From our last activity we learnt that a strong password is a combination of random characters (possibly having uppercase and lowercase letters), numbers and some special characters. Now it\u0026rsquo;s time to play Hacked or Safe!\nFrom a list of passwords used by our Nuvi select the strongest password which cannot be hacked by Eve.\nIlovemypet  Can this password be Hacked? Yes No  45tKcmi\u0026amp;  Can this password be Hacked? Yes No  12345678  Can this password be Hacked? Yes No  PYTHdf56$  Can this password be Hacked? Yes No  var button1 = document.getElementById(\"notify-on1\"); var button2 = document.getElementById(\"notify-off1\"); if (button1.checked){ alert(\"radio1 selected\"); }else if (button2.checked) { alert(\"radio2 selected\"); }  -- CONGRATS! You did it. See the answers by clicking the button below. Done  "},{"uri":"https://nuevofoundation.github.io/workshops/security/summary/","title":"Summary","tags":[],"description":"","content":"Remember the characteristics of a strong password are:  At least 8 characters - the more characters, the better A mixture of letters and numbers Inclusion of at least one special character, e.g., ! @ # ? ] Note: do not use \u0026lt; or \u0026gt; in your password, as both can cause problems in Web browsers  A strong password is hard to guess, but it should be easy for you to remember - a password that has to be written down is not strong, no matter how many of the above characteristics are employed.\nSolution In the Spy Game the passwords \u0026ldquo;Ilovemypet\u0026rdquo; and \u0026ldquo;12345678\u0026rdquo; are weak and can be easily hacked by a malicious person.\n"},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/change-screen-text/","title":"Change the screen text","tags":[],"description":"","content":"Let\u0026rsquo;s change the start screen text:\nAdd below command in the file [File: start-screen.js] var text = game.add.text(0, 0, \u0026ldquo;Press Space to Start\u0026rdquo;, textOptions);\nWorking Together In the repl.it window below, we started the code with the line var text = game.add.text(0, 0, \u0026quot;Press Space to Start\u0026quot;, textOptions);.\nIn your console you should see Press Space to Start after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/puzzle2/","title":"Puzzle 2","tags":[],"description":"","content":"Puzzle 2 Let\u0026rsquo;s add a welcome message that the user can see when they start your app!\nGo to MainActivity.java and find // PUZZLE 2 in the code and write a toast that welcomes the user to your game with \u0026ldquo;Welcome to Tic-Tac-Toe!‚Äù. Now press the play button (‚ñ∫) at the top of Android Studio and your app should look like this:\nHELP! I got a lot of red text! If you see any red text, you have encountered some errors! Please ask for help. Beware of the following when coding in Java:\n The t in Toast is capitalized. Make sure the sentence you wish to show is surrounded in quotation marks, and that the parantheses are in the right place. Do not delete any curly braces { or }. \n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-types/","title":"Data Types","tags":[],"description":"","content":"Topics  Strings \n   Numbers \n   Booleans \n    "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/html-attributes/","title":"HTML Attributes","tags":[],"description":"","content":"HTML Attributes Each tag can also have additional information like style attributes that can change the properties of an element. There are attributes that we can use to change the visual appearance of an element, such as the size, the color, and the text font.\nAll attributes are formatted as: attribute-name=\u0026quot;value in quotes\u0026quot;. For example, we can change the color of a paragraph to red with this code: \u0026lt;p style=\u0026quot;color:red\u0026quot;\u0026gt;This text is red\u0026lt;/p\u0026gt;.\nThe image tags need a source, so we need an attribute within the tag to tell the browser where to go get the image from.\nHere is an example: And here is the result: "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-3/","title":"Activity 3 - Change the key assignment to move left paddle","tags":[],"description":"","content":"Activity 3 Kudos! You not only fixed the game boundary, you are able to give color to objects too. Now let\u0026rsquo;s see if you can change the keys for paddle movement.\nTo do this, we need to modify one of the parameters we pass to create the left paddle object. Remember, from basics section how you defined the Paddle class with UP and DOWN key assignments as its attributes.\nFind // TODO (ACTIVITY 3) in the code. Modify the appropriate attribute value for the left paddle so that pressing the \u0026lsquo;s\u0026rsquo; key moves the left paddle down. Notice that currently the downward movement of the left paddle is controlled by the \u0026lsquo;t\u0026rsquo; key.\nFeel free to experiment with the UP key to accept a different key. Confirm the result after pressing run.\n Takeaway You have just modified down_key attribute in Paddle class to influence how the left paddle object should move in screen.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-3/","title":"Activity 3 - Drawing a hexagon","tags":[],"description":"","content":"Great job! You just drew your first shape in Python with Turtle! Now let‚Äôs slightly change the code we already wrote to draw a square to instead draw a hexagon. Alex is a bee, after all, and he needs to draw hexagons to build his first honeycomb.\nTo help you draw a hexagon, think of how many sides a hexagon has. How many degrees are in each angle of a hexagon?\nAs a helpful reminder, this is the code that was used to create a triangle:\nfor i in range(3): turtle.forward(50) turtle.left(120)  "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/strings/","title":"Strings","tags":[],"description":"","content":"Strings Anything that is surrounded in quotation marks is called a string. This is how a computer represents words or sentences. For example, \u0026quot;a\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;banana!\u0026quot;, and \u0026quot;Hello World\u0026quot; are strings, but Hello World and 2 are not strings, because the quotation marks are missing.\nYou can combine many strings together using the + operator. For example:\n \u0026quot;Apple\u0026quot; + \u0026quot;Pineapple\u0026quot; produces the string \u0026quot;ApplePineapple\u0026quot;. \u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot; produces the string \u0026quot;Nuevo Foundation\u0026quot;.  Console.WriteLine(\u0026#34;Apple\u0026#34; + \u0026#34;Pineapple\u0026#34;); Console.WriteLine(\u0026#34;Nuevo\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;Foundation\u0026#34;); Working Together In the repl.it window below, we started the code with the line Console.WriteLine(\u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot;);.\nNote that there are many ways to combine strings together. For example, another way to print Nuevo Foundation would be to write Console.WriteLine(\u0026quot;Nue\u0026quot; + \u0026quot;vo Fou\u0026quot; + \u0026quot;ndation\u0026quot;);.\nWe will brainstorm at least one more way to print the string \u0026quot;Nuevo Foundation\u0026quot; using two + symbols in each Console.WriteLine statement. Verify that Nuevo Foundation is printed out 3 times. In other words, your console should look like this after you press run:\nNuevo Foundation Nuevo Foundation Nuevo Foundation   "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/activity-1-set-tempo-add-sounds/","title":"Activity 1 - Set tempo &amp; add sounds","tags":[],"description":"Setting up headphones","content":" Let\u0026rsquo;s take a closer look at the pre-existing code and understand what it means. We will be placing our new code between the setTempo() and finish() functions. The setTempo() function allows you to set the overall project tempo.\nQuick Fact: Tempo is the speed at which a piece of music is played. Changing a project\u0026rsquo;s tempo allows for different styles of music to be created. Try changing the tempo of your setTempo function and see what happens! Please make sure it is a number between 45-220.    Now that our tempo is set, it is time to add sounds. To do so, we must utilize the fitMedia() function.\n  Make sure the cursor in your program is between setTempo() and finish() functions.   Navigate to the Api Browser icon on the left side menu. Scroll through the list to the fitMedia() function.\n  Click on Paste icon on the right corner of fitMedia() to insert the function between the setTemp and finish functions.\n  You may notice that when you paste the function, Earsketch produces some placeholder texts that we will need to replace later. These placeholder texts are also known as parameters.\nYou can specify your own values for the following:\n fileName - Navigate to the 'Sounds' pane and find a sound you like. trackNumber - Select any positive integer as the track number. startLocation/endLocation - These parameters are quantified in measures. A measure is a segment of time which correlates to a specific number of beats.  If you are not sure what values to choose, try this: fitMedia(YG_TRAP_ELECTRIC_PIANO_FILTERED_1, 3, 1, 17) Your code should now look something like this:\nfrom earsketch import * init() setTempo(120)\nfitMedia(YG_TRAP_ELECTRIC_PIANO_FILTERED_1, 3, 1, 17)\nfinish() \n   Make sure the capitalization of the method call is correct. Most programming languages, Python included, are case sensitive. This means that adding capital letters can call a different function than expected. For example: fitMedia() is not the same as FitMedia().\n  Once you have input your own parameters, press run, then click on play to listen to your audio clip!\nIf you see any red text, you have encountered some errors! Please ask for help. The fitMedia() function is the backbone to making music in Earsketch. We will be using this function a lot, so if you have any questions regarding its usage, please ask!\n  Digital Audio Workstation (DAW) is the area which the sounds appear in. It is at the center top of your EarSketch window. The following is an example of how different sections of a song may look in the DAW.  "},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/answer-key/","title":"Answer Key - Adafruit","tags":[],"description":"Easy reference answer key for the adafruit curriculum","content":"Setup In summary:\n The two alligator clips should be clipped into the surface of the oranges. The other side of the clips should be on the A1 and A2 inputs on the adafruit. The USB should be plugged in to the adafruit, but not into the computer.  After setup, the oranges and adafruit should look like this:\nSolution Solution - advanced (with lights) How it Works "},{"uri":"https://nuevofoundation.github.io/workshops/security/answer-key/","title":"Answer Key - Security","tags":[],"description":"Easy reference answer key for the security curriculum","content":"Solution In our Spy Game the passwords \u0026ldquo;Ilovemypet\u0026rdquo; and \u0026ldquo;12345678\u0026rdquo; are weak and can be easily hacked/guessed by a malicious person.\n"},{"uri":"https://nuevofoundation.github.io/workshops/arduino/activity-2/","title":"Arduino - Activity 2","tags":[],"description":"","content":"Activity 2 - Joystick with serial output Now that you understand how we can get the system to provide signals from the program (outputs) and use those to control LEDs, let‚Äôs look at how we can get dynamic inputs into the system. For this activity we will use a joystick input, similar to those used in video game consoles.\n Attach one end of a jumper wire to GND on the joystick and the other to GND on the Elegoo. Attach one end of a jumper wire to +5V on the joystick and the other to 5V on the Elegoo. Attach one end of a jumper wire to VRx on the joystick and the other to A0 on the Elegoo. Attach one end of a jumper wire to VRy on the joystick and the other to GND on the Elegoo. Attach one end of a jumper wire to SW on the joystick and the other to 2 on the Elegoo. Plug in the Arduino board via USB to your PC and open the Arduino IDE application.  CODE:\n//www.elegoo.com\r//2016.12.09\r// Arduino pin numbers\rconst int SW_pin = 2; // digital pin connected to switch output\rconst int X_pin = A0; // analog pin connected to X output\rconst int Y_pin = A1; // analog pin connected to Y output\rvoid setup() {\rpinMode(SW_pin, INPUT);\rdigitalWrite(SW_pin, HIGH);\rSerial.begin(9600);\r}\rvoid loop() {\rSerial.print(\u0026quot;Switch: \u0026quot;);\rSerial.print(digitalRead(SW_pin));\rSerial.print(\u0026quot;\\n\u0026quot;);\rSerial.print(\u0026quot;X-axis: \u0026quot;);\rSerial.print(analogRead(X_pin));\rSerial.print(\u0026quot;\\n\u0026quot;);\rSerial.print(\u0026quot;Y-axis: \u0026quot;);\rSerial.println(analogRead(Y_pin));\rSerial.print(\u0026quot;\\n\\n\u0026quot;);\rdelay(500); }\rNow click the upload button to deploy the program to the Arduino. Click on the ‚ÄúSerial Monitor‚Äù button on the top right of the screen to display the console.  Notice how the X and Y values change when you move the joystick around.  "},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/arrays/iteration/","title":"Iterating over Arrays","tags":[],"description":"","content":"One of the common array operations is to iterate over the values and process each one of them in some way. Let\u0026rsquo;s go over and discuss some of the simplest ways to achieve this:\nArray.forEach() The forEach() method calls a function (a callback function. In this case, function named printBr) once for each array element.\nThe function passed to forEach is executed once for every item in the array, with the array item passed as the argument to the function. Unassigned values are not iterated in a forEach loop.\nSyntax:\narrayName.forEach(functionName); Example: "},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/comments/","title":"Comments","tags":[],"description":"","content":"Comments Developers often need to collaborate with other developers. Comments are an easy way for developers to write notes in the code and communicate with others. Comments are ignored by the computer; thus, they are also an easy way to tell the computer to not run certain lines of code. There are two ways to create comments:\n To comment out one line, place // in front of a line of code. For example:  // This is a single-line comment. To comment out multiple lines at once, indicate the start of the comment with /* and the end of the comment with */. For example:  /* This is a multi-line comment. This line is also part of the comment. */ To remove a comment (or uncomment a line), simply delete the // for a single-line comment, or the /* and the */ characters for the multi-line comment.\nWorking Together  Type // in front of Toast.makeText(this, \u0026quot;Welcome to Tic-Tac-Toe‚Äù, Toast.LENGTH_LONG).show(). After pressing the play button (‚ñ∫), check to make sure that Welcome to Tic-Tac-Toe does not show up on the screen. Delete the // and instead, surround Toast.makeText(this, \u0026quot;Welcome to Tic-Tac-Toe‚Äù, Toast.LENGTH_LONG).show() with /* and */. Check that Welcome to Tic-Tac-Toe is still not printed to the console after pressing the play button (‚ñ∫). Delete both /* and */, and press the play button (‚ñ∫). Welcome to Tic-Tac-Toe should now be printed to the console. Throughout today\u0026rsquo;s puzzles, you will see various multi-line comments and // PUZZLE comments (like the one for Puzzle 2). These comments will guide us towards completing the Tic-Tac-Toe game, so be sure you understand how to comment and uncomment code. \n"},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/jump/","title":"Make the bird jump","tags":[],"description":"","content":"What should we do with the bird?\nLet\u0026rsquo;s make him jump:\nAdd below command in the file [File: create-game.js] spaceKey.onDown.add(jump, this);\nWorking Together In the repl.it window below, we started the code with the line spaceKey.onDown.add(jump, this);.\nIn your console you should see a Jsappy bird jumping after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/basics/reading-from-console/","title":"Reading from the Console","tags":[],"description":"","content":"Now that we know the basics about variables, we can ask for input from the user. Use the following line to tell our program to wait until the user types something into the console. Then, the computer takes whatever is typed into the console, and stores it into the variable called value.\nvalue = input Here\u0026rsquo;s and examples of how to use input() to accept user input:\nprint(\u0026#34;What\u0026#39;s your name?\u0026#34;) value = input() print(\u0026#34;Hello \u0026#34; + value + \u0026#34;!\u0026#34;) Give this a try! When you hit run, you\u0026rsquo;ll notice that the below image doesn\u0026rsquo;t appear on the console yet.\nThis is because the program is waiting for you to type something! Enter your name or \u0026lsquo;Nuvi\u0026rsquo; into the console on the right, press Enter, and check that it prints out correctly.\nEven if we type in a number, such as 8, the variable value will contain the string \u0026quot;8\u0026quot;. Be careful when attempting to do math on input variables!\n Challenge Let‚Äôs see if we can write a program that first prints the following two lines to console:\nWelcome! How can I help you today?  Afterwards, the console waits for user input. After the user types something in the console and presses Enter, the computer prints out:\nYou asked: [input]? I don‚Äôt know the answer to [input]. Goodbye!  [input] should be replaced with whatever the user had typed into the console. For example, if you wanted to ask \u0026ldquo;How old am I?\u0026quot;, the computer will print out that it doesn‚Äôt know the answer to that.\nThis is very similar to the example that we went through together above. Try making some small changes from what we have already given you.\n  "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/css/","title":"CSS","tags":[],"description":"","content":"Style it with CSS Tags tell the browser what website elements to use. But we also need to tell it how to display the elements, and where to place them. We may want the title on the center or on the right side. We may want a picture on the right and a paragraph on the left. There are two ways we can do this: through HTML attributes or Cascading Style Sheets.\nCascading Style Sheets (CSS) HTML attributes are straight-forward but they can become messy quickly. If we wish to do a lot of styling, each HTML element can become long and hard to read. Furthermore, what if we want to style many elements the same way? We would have to copy all the attributes for each element, which is not efficient and prone to mistakes. For most styling, it‚Äôs better to use CSS.\nCSS files work closely with HTML tags. Each HTML tag can have a class attribute and/or an id attribute that helps to identify each element. Many elements can have the same class, and an element can have multiple classes. However, an element can only have one single id, and the id cannot be shared among elements. The CSS file uses these attributes to display styling specific to each class or id.\nSee this example below:\nSee the Pen Styling it up by Deliana Escobari (@Sunny-Dee) on CodePen.\n\rClick the \"HTML\" tab on the top left corner to see the HTML code, and the \"CSS\" tab to see the CSS code.\rLet\u0026rsquo;s take a look at the HTML code. Try to find a \u0026lt;div\u0026gt; tag with the attribute \u0026quot;info\u0026quot;. It looks like \u0026lt;div id=\u0026quot;info\u0026rdquo;\u0026gt;. By giving this div an id, we can then use CSS to specify styling for this specific element.\nSwitch over to the CSS file. We can also give styling to all elements of a specific type - for example, we could use CSS give all \u0026lt;p\u0026gt; elements the same style. In the header block, we tell the browser to color all the headers #0097A7 (which is the teal color).\nLet\u0026rsquo;s talk about the syntax (or the way of writing) for CSS. First, you start with what element you want to style. If you want to style all elements with the same tag (such as \u0026lt;header\u0026gt;), simply write the name. If you want to style an element with a class or id, put a . or a # in front of the class or id name respectively. Then, for each property you wish to change, use the format attribute-name: value;. Don\u0026rsquo;t forget to end each line with a ;. All these styles should be surrounded by the curly braces { and }.\nThere are way too many style elements to cover them all in this tutorial. If, in the sketch you made earlier, you aren\u0026rsquo;t sure how to use CSS to accomplish the desired styling, try searching online.\nWhile CSS understands 140 color names such as \"green\", \"red\", and \"blue\", this can still be limiting. What about if we want a dark green, or a slightly lighter green? To achieve this, we can also refer to colors in hexadecimal or RGB form. Check this link to see the colors and their corresponding hexadecimal form.\n\rAdding a new font  Let\u0026rsquo;s import the Heebo font from the internet. First we import the font at the top of the CSS file with this statement: @import url('https://fonts.googleapis.com/css?family=Heebo|Open+Sans'); Then we assigned it to the body tag. Since this tag will contain all the other HTML elements, our choice of font will be used for all elements.    Notice that the format inside the curly braces is: name: value;\n @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Roboto+Mono'); \nfont-family: 'Roboto Mono', monospace; @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Indie+Flower');\nfont-family: 'Indie Flower', cursive; @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Pacifico'); \nfont-family: 'Pacifico', cursive; @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Permanent+Marker');\nfont-family: 'Permanent Marker', cursive;    "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-4/","title":"Activity 4 - Change the key assignment to move right paddle.","tags":[],"description":"","content":"Activity 4 So you know how to change key assignment for paddle\u0026rsquo;s movement. Great work!\nCan you apply the knowledge about Paddle object and its attributes that influence its movement on screen to change the key assignment for right paddle?\nFind // TODO (ACTIVITY 4) in the code. Modify the appropriate attribute value for right paddle so that it accepts \u0026lsquo;UP\u0026rsquo; key for upward movement of right paddle.\nConfirm the result after pressing run.\n Takeaway You have just modified up_key attribute in Paddle class to influence how the right paddle object should move in screen.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-4/","title":"Activity 4 - Simplifying code with functions","tags":[],"description":"","content":"We drew one hexagon. But this is just one of many hexagons Alex needs to build his honeycomb. Once again, it seems that we would have to repeat the code many times to draw multiple hexagons. Fortunately, we don\u0026rsquo;t have to! Functions to the rescue!\nFunctions A function is a way to group together lines of code to do something. For instance, turtle.forward(50) moves the turtle forward 50 steps, and turtle.left(120) turns the turtle left 120 degrees. What if we want to always do these two actions together? We can put them in a function called draw_line(), so that whenever this function is called, both of these actions take place simultaneously. Think of this like a recipe: we compile all the instructions together, and the recipe\u0026rsquo;s name is the food we are making.\n Here is an example of a function definition, and how we would use it:\ndef draw_line(): turtle.forward(50) turtle.left(120) The first line is called the function definition header. The def keyword tells the computer that we are defining a new function. Next, we give the function a name, in this case draw_line. Finally, don\u0026rsquo;t forget the (): at the end of the line, which tells the computer that we are starting the function body.\nExtra material - parameters Inside the parentheses () we would normally define parameters for the function. Parameters are inputs that we can give into the function, which the function can use to produce its output. For example, we must have two numbers to add them together and produce a result - the two numbers we used can be considered parameters. Today, we will not use parameters, and leave it as ().\n Similar to a for-loop, anything that we wish to define within the function needs to be preceded by 1 tab.\nIf you press run with just this code, you will notice that you won\u0026rsquo;t see any output! We\u0026rsquo;ve only created the functions, but we need to use them. To use the function we created, type in draw_line() again, but without the def.\ndef draw_line(): # Function definition turtle.forward(50) turtle.left(120) draw_line() # Function call This is called a function call for the draw_line() function. A function call runs the code that‚Äôs defined in the function with the same name. With the recipe analogy, think of it as actually performing the recipe.\nTips  Always make sure the names of your functions are descriptive enough to explain what the code in the function does. Your function call must be below the function definition. \n Tricky Python syntax - Part 2 Notice that functions use similar syntax rules with for-loops - you must have a : at the end of the function declaration, and anything in the function body needs to start with a tab.\nWhat happens when you need a for-loop inside of a function? Then, you need to combine the rules together! Here is an example on how to properly put a for-loop inside of a function.\ndef draw_line(): for i in range(3): turtle.forward(50) Notice that turtle.forward(50) has 2 tabs in front of it, because it is both inside of a function definition, and inside of a for-loop!\n So, let‚Äôs try that out by making our own draw_hexagon() function! Remember to include the function definition header, the number of sides a hexagon has, and the angle associated with a hexagon: 60 degrees.\n "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-2/","title":"Activity 2","tags":[],"description":"","content":"Activity 2 Find // TODO (ACTIVITY 2) in the GuessTheWord code. For the Guess the Word game, we will give the computer a word bank, and the computer will choose one of the words randomly to use for the game. So far, we have added the words \u0026quot;Hello\u0026quot; and \u0026quot;World\u0026quot; to the word bank. However, a Guess the Word game with only two possible words to guess is not fun at all! Add at least 3 more strings to the word bank.\nNote: The console output will not change from the previous activity. We do not want to tell the player the words inside the word bank when they play the game! For this activity, just make sure that you do not get any error messages in the console after pressing run.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/activity-2-make-a-song/","title":"Activity 2 - Make a song!","tags":[],"description":"Setting up headphones","content":" Now that you have learned how to add sounds to Earsketch, let\u0026rsquo;s try and make a song! You should already have one audio clip in Earsketch, but songs are made up of various instruments, so we need to add more audio clips.\n Add another fitMedia() call. Find an audio clip you would like to add to your current song and input it under the fileName parameter. The trackNumber parameter should be a unique number. This will allow us to place our sounds on different tracks. Having different sounds on different tracks allows us to maintain organization of our sounds and play different sounds at the same time. Example: If the first fitMedia() call is on track 1, the second fitMedia() call should be on track 2. Complete the rest of the parameters. Repeat these steps until you have four different audio sounds in your song.  Your code should now look something like this: from earsketch import *\ninit() setTempo(120)\nfitMedia(RD_TRAP_BELLLEAD_1, 1, 5, 9) fitMedia(YG_TRAP_STRINGS_2, 2, 1, 17) fitMedia(YG_TRAP_ELECTRIC_PIANO_FILTERED_1, 3, 1, 17) fitMedia(YG_TRAP_BASS_9, 4, 1, 9)\nfinish() \n"},{"uri":"https://nuevofoundation.github.io/workshops/arduino/activity-3/","title":"Arduino - Activity 3","tags":[],"description":"","content":"Activity 3 - Joystick + LEDs Let‚Äôs combine activity 1 and activity 2. Let‚Äôs control LEDs based on the input from the joystick.\n Attach one end of a jumper wire to GND on the joystick and the other to 7X on the Breadboard. Attach one end of a jumper wire to +5V on the joystick and the other to 5W on the Breadboard. Attach one end of a jumper wire to VRx on the joystick and the other to A0 on the Elegoo. Attach one end of a jumper wire to VRy on the joystick and the other to GND on the Elegoo. Attach one end of a jumper wire to SW on the joystick and the other to 2 on the Elegoo. Attach the long lead (anode) of your blue LED to pin 8F and the short lead (cathode) into pin 9F. Attach a 220 resistor with one leg in 8G and the other in 4G. Attach one end of a jumper wire to 4H on the Breadboard and the other to 11 on the Elegoo. Attach one end of a jumper wire to 9G and the other to 12Z (anywhere in the blue [-] line) on the Breadboard. Attach the long lead (anode) of your yellow LED to pin 14J and the short lead (cathode) into pin 15J. Attach a 220 resistor with one leg in 14I and the other in 10I. Attach one end of a jumper wire to 10J on the Breadboard and the other to 10 on the Elegoo. Attach one end of a jumper wire to 15I and the other to 18Z (anywhere in the blue [-] line) on the Breadboard. Attach the long lead (anode) of your red LED to pin 21F and the short lead (cathode) into pin 22F. Attach a 220 resistor with one leg in 17G and the other in 21G. Attach one end of a jumper wire to 17H on the Breadboard and the other to 9 on the Elegoo. Attach one end of a jumper wire to 22G and the other to 25Z (anywhere in the blue [-] line) on the Breadboard. Attach the long lead (anode) of your green LED to pin 14A and the short lead (cathode) into pin 15A. Attach a 220 resistor with one leg in 10B and the other in 14B. Attach one end of a jumper wire to 10C on the Breadboard and the other to 8 on the Elegoo. Attach one end of a jumper wire to 15B and the other to 17X (anywhere in the blue [-] line) on the Breadboard.  CODE:\nint button=2;\rint buttonState=0;\rint buttonState1=0;\rvoid setup() {\rpinMode(7,OUTPUT);\rpinMode(button,INPUT);\rdigitalWrite(button,HIGH);\rSerial.begin(9600);\rpinMode(8,OUTPUT);\rpinMode(9,OUTPUT);\rpinMode(10,OUTPUT);\rpinMode(11,OUTPUT);\r}\rvoid loop() {\rint xValue = analogRead(joyX);\rint yValue = analogRead(joyY);\rSerial.print(xValue);\rSerial.print(\u0026quot;\\t\u0026quot;);\rSerial.println(yValue);\rbuttonState = digitalRead(button);\rSerial.println(buttonState);\rif (xValue\u0026gt;=0 \u0026amp;\u0026amp; yValue\u0026lt;=20)\r{\rdigitalWrite(10,HIGH);\r}\relse{digitalWrite(10,LOW);}\rif (xValue\u0026lt;=20 \u0026amp;\u0026amp; yValue\u0026gt;=490)\r{\rdigitalWrite(11,HIGH);\r}\relse{digitalWrite(11,LOW);}\rif (xValue\u0026gt;=1010 \u0026amp;\u0026amp; yValue\u0026gt;=490)\r{\rdigitalWrite(9,HIGH);\r}\relse{digitalWrite(9,LOW);}\rif (xValue\u0026gt;=490 \u0026amp;\u0026amp; yValue\u0026gt;=1010)\r{\rdigitalWrite(8,HIGH);\r}\relse{digitalWrite(8,LOW);}\rif (xValue\u0026gt;=1010 \u0026amp;\u0026amp; yValue\u0026gt;=1010)\r{\rdigitalWrite(9,LOW);\rdigitalWrite(8,LOW);\r}\rif (buttonState==LOW)\r{\rSerial.println(\u0026quot;Switch = High\u0026quot;);\rdigitalWrite(7,HIGH);\r}\relse{digitalWrite(7,LOW);}\rbuttonState1=digitalRead(7);\rSerial.println(buttonState1);\rdelay(100);\r}\r"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/strings/","title":"Strings","tags":[],"description":"","content":"Strings Anything that is surrounded in quotation marks is called a string. This is how a computer represents words or sentences. For example, \u0026quot;a\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;banana!\u0026quot;, and \u0026quot;Hello World\u0026quot; are strings, but Hello World and 2 are not strings, because the quotation marks are missing. You can combine many strings together using the + operator. For example:\n \u0026quot;Apple\u0026quot; + \u0026quot;Pineapple\u0026quot; produces the string \u0026quot;ApplePineapple\u0026quot;. \u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot; produces the string \u0026quot;Nuevo Foundation\u0026quot;.  Working Together Delete all your System.out.println text in your code. Start your code with the line System.out.println(\u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot;);. Note that there are many ways to combine strings together. For example, another way to print Nuevo Foundation would be to write System.out.println(\u0026quot;Nue\u0026quot; + \u0026quot;vo Fou\u0026quot; + \u0026quot;ndation\u0026quot;);. We will brainstorm at least one more way to print the string \u0026quot;Nuevo Foundation\u0026quot; using two + symbols in each System.out.println statement. Verify that Nuevo Foundation is printed out 3 times. In other words, your console should look like this after you press run:\n Nuevo Foundation Nuevo Foundation Nuevo Foundation  "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/gravity/","title":"Add gravity","tags":[],"description":"","content":"Let\u0026rsquo;s add gravity to the bird:\nAdd below command in the file [File: create-game.js] bird.body.gravity.y = 900;\nWorking Together In the repl.it window below, we started the code with the line bird.body.gravity.y = 900;.\nIn your console you should see a JSappy bird jumping with gravity after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/activity-2/","title":"Activity 2","tags":[],"description":"","content":"  Open the web editor (click the \u0026ldquo;Try it yourself!\u0026rdquo; button below)\n  Add an id attribute to one of the header tag. For example, \u0026lt;header id=\u0026quot;page-title\u0026quot;\u0026gt;\n  Toggle to the CSS tab #page-title\r{\rstyling here...\r} \n  Change the title color by adding color: yellow; inside the curly braces\n  Change the font by adding font-family: \u0026lsquo;Roboto Mono\u0026rsquo;, monospace; inside the curly braces and adding @import url(\u0026lsquo;https://fonts.googleapis.com/css?family=Roboto+Mono'); at the top of the CSS tab\n  Try it yourself!\n"},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-5/","title":"Activity 5 - Declare and use a variable for font","tags":[],"description":"","content":"Activity 5 Great progress so far! Now lets make use of a variable to control font value.\nIn this activity you need to apply the knowledge about variables you learnt in Python basics.\nFind // TODO (ACTIVITY 5) in the code. Declare a variable font_label, assign it the value 'arial'. Now take a look at statement in code font_name = pygame.font.match_font('arial'). Can you figure out the place in this statement where you should use this new variable to control the font displayed on screen ?\nYou can get different fonts supported in your system by running pygame.font.get_fonts(). Try using a different font than 'arial'. Confirm the result after pressing run.\n Takeaway You have just modified font parameter by using a variable. If you happen to use same font at multiple places in your program, then you can just modify variable at one place and it will take effect at all places where you have used that variable.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-5/","title":"Activity 5 - Drawing a honeycomb","tags":[],"description":"","content":"This is the finale! Let\u0026rsquo;s create the honeycomb that Alex will live in. Fortunately, a honeycomb is simply 6 hexagons, so let\u0026rsquo;s combine our knowledge of functions and loops to make our honeycomb!\nIn this activity, create a new function called draw_honeycomb(). Inside the function body, create a loop that repeats 6 times. Inside the loop we have to first draw a hexagon using our draw_hexagon() function we previously defined. Next, move the turtle so it can draw the next hexagon. To do so, after the turtle draws each hexagon, we need to tell our turtle to move forward 50 pixels and then turn right 60 degrees.\nNote that the drawing of the honeycomb may take a while. You can change how fast the turtle draws the honeycomb by setting the turtle\u0026rsquo;s speed to a number between 1 and 10, 1 being the slowest and 10 being the fastest. Place this code near where we change the color of the turtle.\nturtle.speed(8)  "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/numbers/","title":"Numbers","tags":[],"description":"","content":"Numbers The computer can also do regular math that you see in school. Use Console.WriteLine to print out the result from the math expressions. No quotation marks are needed for numbers!\nConsole.WriteLine(5 + 4); Console.WriteLine(6 * (9 - 7) / 3); Here is the full list of math symbols that you can use:\n   Operator Description Operator Description     + Add \\ | Divide |    - Subtract % Modulo (remainder)   * Multiply (,) Parenthesis    Fun Fact: Computer Division The computer does division differently from your regular calculator. Computer division will exclude remainders or decimals. For example, 15 / 4 produces 3, and not 3.75.\n Working Together Try printing out the answers to the following to the console. Ensure your brackets are matched. Use a calculator (or mental math) to verify the computer produced the correct answer.\n 2 - 19 (3 + 5) * 6 (13 + 5 * 8) / (6 - (3 + 7))  \n Fun Fact: Random Numbers Here is how to print a random number between 1 (inclusive) and 10 (exclusive):\nRandom random = new Random(); Console.WriteLine(random.Next(1, 10)); Try to find where we use Random in the GuessTheWord game! However, the details as to how this works is complicated, so we will skip this discussion.\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/activity-3-organize-songs-using-functions/","title":"Activity 3 - Organize your song using functions","tags":[],"description":"Setting up headphones","content":" In Earsketch, functions are mostly used to organize different sections of a song. The most common musical form is A-B-A where each section is four measures in length, and the A sections sound different from the B section.\nNow that we learned how to use functions, let\u0026rsquo;s try to use them to organize our songs better.\n Define your function with a startMeasure parameter and endMeasure parameter. Place the sounds you would like to have the function represent underneath your function definition. Try to make multiple sections of a song (verse, chorus, intro, etc.) and define them with your functions. If you don\u0026rsquo;t do this, and only use multiple fitMedia calls, you will notice that your program will become long and hard to understand. To help avoid having a large project file, use functions!  Your code should now look something like this:\nfrom earsketch import * init() setTempo(120) fitMedia(HOUSE_DEEP_CRYSTALCHORD_001, 3, 1, 5) fitMedia(HOUSE_DEEP_CRYSTALCHORD_002, 3, 5, 9) # Section A def sectionA(startMeasure, endMeasure): fitMedia(RD_UK_HOUSE__AIRYPAD_1, 1, startMeasure, endMeasure) fitMedia(HOUSE_MAIN_BEAT_002, 4, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) # Section B def sectionB(startMeasure, endMeasure): fitMedia(Y37_ORGAN_1, 2, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) fitMedia(RD_UK_HOUSE__ARPLEAD_1, 6, startMeasure, endMeasure) sectionA(1, 9) sectionB(9, 17) sectionA(17, 25) finish() "},{"uri":"https://nuevofoundation.github.io/workshops/arduino/activity-4/","title":"Arduino - Activity 4","tags":[],"description":"","content":"Activity 4 - LCD Display Now that you have mastered outputting signals to LEDs let‚Äôs look at displaying text with a simple display. Only 1 resistor (5K) is used to limit the brightness of the display. Try wiring this per the diagram without specific instructions.\nCODE:\n//www.elegoo.com\r//2016.12.9\r/*\rLiquidCrystal Library - Hello World\rDemonstrates the use a 16x2 LCD display. The LiquidCrystal\rlibrary works with all LCD displays that are compatible with the\rHitachi HD44780 driver. There are many of them out there, and you\rcan usually tell them by the 16-pin interface.\rThis sketch prints \u0026quot;Hello World!\u0026quot; to the LCD\rand shows the time.\rThe circuit:\r* LCD RS pin to digital pin 7\r* LCD Enable pin to digital pin 8\r* LCD D4 pin to digital pin 9\r* LCD D5 pin to digital pin 10\r* LCD D6 pin to digital pin 11\r* LCD D7 pin to digital pin 12\r* LCD R/W pin to ground\r* LCD VSS pin to ground\r* LCD VCC pin to 5V\r* 10K resistor:\r* ends to +5V and ground\r* wiper to LCD VO pin (pin 3)\rLibrary originally added 18 Apr 2008\rby David A. Mellis\rlibrary modified 5 Jul 2009\rby Limor Fried (http://www.ladyada.net)\rexample added 9 Jul 2009\rby Tom Igoe\rmodified 22 Nov 2010\rby Tom Igoe\rThis example code is in the public domain.\rhttp://www.arduino.cc/en/Tutorial/LiquidCrystal\r*/\r// include the library code:\r#include \u0026lt;LiquidCrystal.h\u0026gt;\r// initialize the library with the numbers of the interface pins\rLiquidCrystal lcd(7, 8, 9, 10, 11, 12);\rvoid setup() {\r// set up the LCD's number of columns and rows:\rlcd.begin(16, 2);\r// Print a message to the LCD.\rlcd.print(\u0026quot;Hello, World!\u0026quot;);\r}\rvoid loop() {\r// set the cursor to column 0, line 1\r// (note: line 1 is the second row, since counting begins with 0):\rlcd.setCursor(0, 1);\r// print the number of seconds since reset:\rlcd.print(millis() / 1000);\r}\r"},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/jump-force/","title":"Make the bird jump with force","tags":[],"description":"","content":"Let\u0026rsquo;s add force to the bird\nAdd the below command in the file [File: create-game.js] bird.body.velocity.y = -350;\nWorking Together In the repl.it window below, we started the code with the line bird.body.velocity.y = -350;.\nIn your console you should see a Jsappy bird jumping with force after you press run:\nBonus Activity Let\u0026rsquo;s make the bird jump up and forwards:\nAdd below command in the file [File: create-game.js] bird.body.velocity.x = 100;\n"},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/arrays/methods/","title":"Methods","tags":[],"description":"","content":"Methods represent some action we wish to perform on the array. They can be used to change the behaviour or perform some operations on itself.\nTo make things easier, arrays provide a lot of methods. Let\u0026rsquo;s go over some of the basic ones which would give you an idea of they look like.\nHow is it different compared to properties ? Properties are basically information that an array has. Methods are what an array can do.\n Concat() Joins two or more arrays and returns a new array.\nSyntax:\nvar value = arrayName1.concat(arrayName2); Example: Push() Adds one or more elements to the end of an array and returns the resulting length of the array.\nSyntax:\nvar value = arrayName.push(newElement); Example: Pop() Removes the last element from an array and returns that element.\nSyntax:\nvar value = arrayName.pop(); Example: Shift() Removes the first element from an array and returns that element.\nSyntax:\nvar value = arrayName.shift(); Example: Unshift() Adds one or more elements to the front of an array and returns the new length of the array.\nSyntax:\nvar value = arrayName.unshift(newElement); Example: Sort() Sorts the elements of an array in place, and returns a reference to the array.\nSyntax:\nvar value = arrayName.sort(); Example: Reverse() Transposes the elements of an array, in place: the first array element becomes the last and the last becomes the first. It returns a reference to the array.\nSyntax:\nvar value = arrayName.reverse(); Example: "},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/numbers/","title":"Numbers","tags":[],"description":"","content":"Numbers The computer can also do regular math that you see in school. Use System.out.println to print out the result from the math expressions.\nSystem.out.println(5 + 4); System.out.println(6 * (9 - 7) / 3); Here is the full list of math symbols that you can use:\n + Add \\ Divide   - Subtract % Modulo (remainder)   * Multiply (,) Parenthesis   Fun Fact: Computer Division\nThe computer does division differently from your regular calculator. Computer division will exclude remainders or decimals. For example, 15 / 4 produces 3, and not 3.75.\nWorking Together Try printing out the answers to the following to the console. Ensure your brackets are matched. Use a calculator (or mental math) to verify the computer produced the correct answer.\n 2 - 19 (3 + 5) * 6 (13 + 5 * 8) / (6 - (3 + 7)) 3 % 2 \n "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/media-elements/","title":"Media Elements","tags":[],"description":"","content":"Media elements Add a GIF GIF stands for Graphic Interchange Format, but all you need to know is that it\u0026rsquo;s just another type of image file. The only difference is that the file has many images. When displayed in the browser, the images are played in sequence, similar to the frames of a movie. Think of it like one of those flip books that seem like the image is animated when you flip it.\n Add a video Aside from text and images, one of the most common things we like to add to websites are videos. Video files are very large, so it‚Äôs best to use a service to upload and display the video such as YouTube. Once uploaded to YouTube, how do we get it to play on our website? We use a special tag called an iframe\nIframes display HTML from other websites inside our own. It‚Äôs like a window, where you can see what is happening outside on the internet from inside the current website. This process is called embedding.\nFor example, the video below is an iframe from Benji‚Äôs Instragram:\n   View this post on Instagram        Push yourself to try new things! üçâ I stick to the paleo diet most days (usually just the meat part) but on occasion I go for something crazy\nA post shared by Benji Escobari Marquez (@benjimite_thegudboi) on Aug 25, 2018 at 10:05pm PDT\n \rMany sites offer iframes to embed in your website. As an example, here is how you find the iframe code for a YouTube video:\nHere is a sample iframe Copy the following code: \u0026lt;iframe width=\u0026quot;560\u0026quot; height=\u0026quot;252\u0026quot; src=\u0026quot;https://www.youtube.com/embed/lQsqEBSGdyc\u0026quot; frameborder=\u0026quot;0\u0026quot; allow=\u0026quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\u0026quot; allowfullscreen\u0026gt; \u0026lt;/iframe\u0026gt;\nPaste it on your Code Pen and it will look like this:\n\r"},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-6/","title":"Activity 6 - Fix the &#39;if&#39; condition to track correct score.","tags":[],"description":"","content":"Activity 6 You have come a long way, we hope you are enjoying!\nIn this activity you need to apply the knowledge about \u0026lsquo;if\u0026rsquo; control structure you learnt in Python basics.\nFind // TODO (ACTIVITY 6) in the code. We have on purpose introduced an 'if' block that is checking for wrong condition for tracking the score when right paddle miss the ball. This not only causing the wrong score to be displayed on screen , as well as it causing the ball to move in erratic manner. Can you figure out what \u0026lsquo;condition\u0026rsquo; it should check for when right paddle miss the ball ? Feel free to ask if you need help in getting this right.\nYou may need to check the boundary value for horizontal position (represented by \u0026lsquo;X\u0026rsquo; axis) of ball when right paddle misses it. Can you guess what value it should be ? Confirm the result after pressing run.\n Takeaway You have just fixed a condition for checking boundary values when ball moves horizontally out of boundary of game.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/part-2/","title":"Part 2 - Building a Mandala Flower","tags":[],"description":"","content":"Great job! You finished building a honeycomb for Alex‚Äôs beehive, but Alex needs to also get his pollen from flowers! Wouldn‚Äôt it be nice to add a flower to the picture as well? In part 2, we will be creating a mandala flower!\n(Stay tuned - we\u0026rsquo;ll show you what a mandala flower looks like.)\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/booleans/","title":"Booleans","tags":[],"description":"","content":"Booleans Booleans are true or false statements. Unlike strings or numbers, booleans store statements of truth: is what I am saying true or false? For example, if I ask, \u0026ldquo;Are you a robot?\u0026quot;, this question produces a true or false result, which we call a Boolean. In this case, since you are not a robot (hopefully!), we would produce false.\nWe can also use math operators to create boolean expressions. Here are some examples; however, notice the unusual symbols for \u0026ldquo;equal to\u0026rdquo; and \u0026ldquo;not equal to\u0026rdquo;:\n   Operator Description Operator Description     \u0026lt; Less than \u0026gt; Greater than   \u0026lt;= Less than or equal to \u0026gt;= Greater than or equal to   == Equal to != Not equal to    As usual, use Console.WriteLine to print out your results:\nConsole.WriteLine(10 \u0026lt; 8); Console.WriteLine((3 * 6) == (32 - 14)); Working Together Try guessing the answers to the following expressions. Use Console.WriteLine to check your answers.\n 54 \u0026lt; (10 + 32) (37 / 5) == 7 \u0026quot;Hello\u0026quot; + \u0026quot;World\u0026quot; == \u0026quot;Hello World\u0026quot; false == false  \n "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/activity-4-add-effects-to-your-songs/","title":"Activity 4 - Add effects to your song","tags":[],"description":"Setting up headphones","content":" Effects in EarSketch Effects allows the producer to alter the sound of the audio clip into its own unique sound. Similar to how we used fitMedia() to add new audio clips, we must use the setEffect() function to define specific effects for each audio clip. It is important to note that multiple effects can be placed on the same track. This allows for the producer to combine multiple effects together. Earsketch has many effects built-in. To reference all the effects, visit this link and make sure Curriculum pane is selected in the navigation bar.\nBefore we start adding effects to our song, let\u0026rsquo;s breakdown the pieces of the two setEffect functions:  track: The track number to which the effect is applied to. Note: To apply an effect to the Master track, use 0 as the value for track. The master track is where all the audio is collectively played together. This is an easy way to apply an effect to all the sounds being processed. effectType: The specific effect being used effectParameter: The setting for the effect being used effectValue: The value applied to the effectParameter  Add setEffect function to your song Since we are more familiar with using effects, let\u0026rsquo;s add an effect to our song.\n On the API browser on the left, scroll to setEffect API. Insert a setEffect function call into your code, using the paste icon. We need to replace the parameters with our own values. Put an integer value for trackNumber. Let\u0026rsquo;s put 2. For the rest of the effect parameters, click on the eye icon on the setEffect API and you will see a link to \u0026ldquo;Every Effect Explained in Detail\u0026rdquo;. Click on it to open this section on the right side of your window. You may notice that Earsketch has many different variations of effects. By default, you should see section 30.4 BANDPASS on the right. For now, we will use the DELAY from section 30.4 as effectType in our setEffect function call. Now that we have chosen our effectType, we need an effectParameter. Navigate to section 30.4 on the right to check out different parameters supported for DELAY. Here is a picture of that section. We recommend using the DELAY_FEEDBACK.  For the final parameter, input a valid value. Since we have chosen DELAY_FEEDBACK, we must specify a number between -120.0 and -1.0 (as shown in the picture above). Example: Use -6.0 as your effect value for DELAY_FEEDBACK.  Your code should now look something like this:\nfrom earsketch import * init() setTempo(120) fitMedia(HOUSE_DEEP_CRYSTALCHORD_001, 3, 1, 5) fitMedia(HOUSE_DEEP_CRYSTALCHORD_002, 3, 5, 9) # Section A def sectionA(startMeasure, endMeasure): fitMedia(RD_UK_HOUSE__AIRYPAD_1, 1, startMeasure, endMeasure) fitMedia(HOUSE_MAIN_BEAT_002, 4, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) # Section B def sectionB(startMeasure, endMeasure): fitMedia(Y37_ORGAN_1, 2, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) fitMedia(RD_UK_HOUSE__ARPLEAD_1, 6, startMeasure, endMeasure) sectionA(1, 9) sectionB(9, 17) sectionA(17, 25) setEffect(2, DELAY, DELAY_FEEDBACK, -6.0) setEffect(2, DELAY, DELAY_TIME, 1200.0) finish()  "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/add-rotation/","title":"Bird falling with rotation","tags":[],"description":"","content":"Let\u0026rsquo;s add rotation to the bird:\nAdd below command in the file [File: update-game.js] if (bird.angle \u0026lt; 50) { bird.angle += 1; }\nComments: If is a conditional block where we are checking the angle of the bird and if it\u0026rsquo;s less than 50 we are executing the condition. -bird.angle+=1;\nWorking Together In the repl.it window below, we started the code with the line bird.angle +=1;.\nIn your console you should see a Jsappy bird rotating with an angle after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/booleans/","title":"Booleans","tags":[],"description":"","content":"Booleans Booleans are true or false statements. Unlike strings or numbers, booleans store statements of truth: is what I am saying true or false? For example, if I ask, \u0026ldquo;Are you a robot?\u0026quot;, this question produces a true or false result, which we call a Boolean. In this case, since you are not a robot (hopefully!), we would produce false. We can also use math operators to create boolean expressions. Here are some examples; however, notice the unusual symbols for \u0026ldquo;equal to\u0026rdquo; and \u0026ldquo;not equal to\u0026rdquo;:\n   Operator Description Operator Description     \u0026lt; Less than \u0026gt; Greater than   \u0026lt;= Less than or equal to \u0026gt;= Greater than or equal to   == Equal to != Not equal to    As usual, use System.out.println to print out your results:\nSystem.out.println(10 \u0026lt; 8); System.out.println((3 * 6) == (32 - 14)); Working Together Delete all your System.out.println text in your code. Try guessing the answers to the following expressions. Use System.out.println to check your answers.\n 54 \u0026lt; (10 + 32) (37 / 5) == 7 \u0026ldquo;Hello\u0026rdquo; + \u0026ldquo;World\u0026rdquo; == \u0026ldquo;Hello World\u0026rdquo; false == false \n Booleans Operators You can also connect boolean expressions together using the \u0026amp;\u0026amp; (AND) and the || (OR) operator. For example, suppose I ask: \u0026ldquo;Are you a human, and is Nuvi a robot?\u0026rdquo; The word \u0026ldquo;and\u0026rdquo; connects the two true-false questions together. In this case, since it is true that you are a human, and it is also true that Nuvi is a robot, then the overall result is true. Here\u0026rsquo;s a chart that describes what happens when we connect booleans together:\n   Expression Result Expression Result     true \u0026amp;\u0026amp; true true true || true true   true \u0026amp;\u0026amp; false false true || false true   false \u0026amp;\u0026amp; true false false || true true   false \u0026amp;\u0026amp; false false false || false false    To summarize, \u0026amp;\u0026amp; requires both Boolean expressions to be true, while || only requires one of the two Boolean expressions to be true. Here are some more examples:\n (5 \u0026lt; 8) \u0026amp;\u0026amp; (9 != 10) produces true since both 5 is less than 8 and 9 is not equal to 10. (6 != 2 * 3) || (8 \u0026lt; 2 * 4) produces false since both 6 not equal to 2 * 3, and 8 not being less than 2 * 4 produce false.  "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/activity-3/","title":"Activity 3 - Adding a GIF of Nuvi","tags":[],"description":"","content":" Follow this link to see the available GIFs Click on the one you like and select \u0026ldquo;Embed\u0026rdquo;  Copy the code from the white box below \u0026ldquo;GIF Embed Code\u0026quot;\n Paste the code anywhere in your page as long as it\u0026rsquo;s inside the \u0026lt;body\u0026gt; tags.\nTry it yourself!  "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/activity-7/","title":"Activity 7 - Define the key combination to exit the game","tags":[],"description":"","content":"Activity 7 Time for final activity in this Tutorial; yay! You have done an awesome job to get here.\nIn this activity you need to change the way game exits anytime by pressing a given key combination.\nFind // TODO (ACTIVITY 7) in the code. Pygame library gives you a handy way by using event to detect what keystrokes are being pressed anytime during the life of program. Currently the game exits by pressing the 'BACKSPACE' key. You should change it to exit by pressing 'ESC' key on the keyboard.\nIf the value of 'BACKSPACE\u0026rsquo; key in Pygame library is K_BACKSPACE then can you guess the value of 'ESC key? Give it few tries before you ask for help. Confirm the result after pressing run.\n Takeaway You have just changed the way game should exit at any time while running.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-6/","title":"Activity 6 - Moving the turtle","tags":[],"description":"","content":"Our first step is to move the turtle to a new location to draw the flower (we don‚Äôt want to draw the flower on top of the beehive!). To do this, we first need to use the following methods:\nturtle.penup() turtle.goto(x,y) turtle.pendown() turtle.penup() tells the turtle to pick up its pen so it doesn‚Äôt draw while it is moving. Then, with turtle.goto(x,y), we are telling the turtle the position where the turtle moves to. After that we tell the turtle to put its pen back down using turtle.pendown() so it can start drawing again.\nTip The x and y in the turtle.goto() method are the x and y coordinates of the turtle. We want to change the x and y coordinates of the turtle from (0, 0) which is center of the image, to somewhere a little further away so that the mandala flower doesn‚Äôt cover up part of the honeycomb.\n To complete this activity, move the turtle to position (300, 300) on the canvas. This will move it to the top-right corner.\n "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/boolean-operators/","title":"Boolean Operators","tags":[],"description":"","content":"Booleans Operators You can also connect boolean expressions together using the \u0026amp;\u0026amp; (AND) and the || (OR) operator. For example, suppose I ask: \u0026ldquo;Are you a human, and is Nuvi a robot?\u0026rdquo; The word \u0026ldquo;and\u0026rdquo; connects the two true-false questions together. In this case, since it is true that you are a human, and it is also true that Nuvi is a robot, then the overall result is true.\nHere\u0026rsquo;s a chart that describes what happens when we connect booleans together:\n   Expression Result Expression Result     true \u0026amp;\u0026amp; true true true || true true   true \u0026amp;\u0026amp; false false true || false true   false \u0026amp;\u0026amp; true false false || true true   false \u0026amp;\u0026amp; false false false || false false    To summarize, \u0026amp;\u0026amp; requires both Boolean expressions to be true, while || only requires one of the two Boolean expressions to be true. Here are some more examples:\n (5 \u0026lt; 8) \u0026amp;\u0026amp; (9 != 10) produces true since both 5 is less than 8 and 9 is not equal to 10. (8 \u0026lt;= 2) || (\u0026quot;h\u0026quot; + \u0026quot;e\u0026quot; == \u0026quot;he\u0026quot;) produces true since \u0026quot;h\u0026quot; + \u0026quot;e\u0026quot; results in \u0026quot;he\u0026quot;, even though 8 is not less than or equal to 2. (6 != 2 * 3) || (8 \u0026lt; 2 * 4) produces false since both 6 not equal to 2 * 3, and 8 not being less than 2 * 4, produce false.  Working Together Try guessing the answers to the following expressions. Use Console.WriteLine to print out the answers.\n (9 \u0026lt; 10) \u0026amp;\u0026amp; (12 =\u0026gt; 11) (15 - 2 == 11) || (4 % 3 != 2)  \n "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/activity-5-use-effects-to-fade-in/","title":"Activity 5 - Use effects to fade in","tags":[],"description":"Setting up headphones","content":" Now that you have one effect in your song, let\u0026rsquo;s try to fade in the introduction of our song.\nIn activity 4, we used setEffect function to apply an effect to a specific track for the entire duration of the song, but what if you only want a specific section of your song to have an effect? Use the setEffect function with more parameters!  effectStartValue: The starting value applied to the parameter effectStartLocation: The measure at which the starting value is set effectEndValue: The ending value of the parameter effectEndLocation: The measure at which the ending value is set  This version of the setEffect allows for us to perform automation on a specific piece of our song. Automation is a way to change the value of an effect over time. One use of automation is to make a song fade in or fade out. To do so, we must adjust the GAIN effectParameter's volume in the VOLUME effectType over time. For example, if we define our effectStartValue at -60 db and our effectEndValue at 0 db, it will sound like our song is fading in over time. To adjust the starting point and length of the effect, specify the effectStartLocation and effectEndLocation.\nAdd another setEffect function to your song   Add another setEffect function call into your code, but ensure all 7 parameters are present in the call.\n  Set the effectType to VOLUME.\n  Use the \u0026ldquo;Every Effect Explained in Detail\u0026rdquo; reference guide to see which parameters VOLUME has. To adjust the loudness of an audio clip, use the GAIN effectParameter.\n  If we want to make something sound like it is fading in, we must have the sound\u0026rsquo;s volume start at nothing and increase it until around 0 decibels. To do so, set effectStartValue at a very low value, and effectEndValue to be a higher value.\nHint: Volume is measured in decibels. In decibels, the more positive a number is, the louder it gets. Also, try not to exceed 0 decibels.\n  Set values for effectStartLocation and effectEndLocation to specify when to start and stop the fade in effect.\n  Your code should now look something like this:\nfrom earsketch import * init() setTempo(120) fitMedia(HOUSE_DEEP_CRYSTALCHORD_001, 3, 1, 5) fitMedia(HOUSE_DEEP_CRYSTALCHORD_002, 3, 5, 9) # Section A def sectionA(startMeasure, endMeasure): fitMedia(RD_UK_HOUSE__AIRYPAD_1, 1, startMeasure, endMeasure) fitMedia(HOUSE_MAIN_BEAT_002, 4, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) # Section B def sectionB(startMeasure, endMeasure): fitMedia(Y37_ORGAN_1, 2, startMeasure, endMeasure) fitMedia(HOUSE_ROADS_BASS_001, 5, startMeasure, endMeasure) fitMedia(RD_UK_HOUSE__ARPLEAD_1, 6, startMeasure, endMeasure) sectionA(1, 9) sectionB(9, 17) sectionA(17, 25) setEffect(2, DELAY, DELAY_FEEDBACK, -6.0) setEffect(2, DELAY, DELAY_TIME, 1200.0) setEffect(0, VOLUME, GAIN, -60, 1, 0, 3) finish()  "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/add-jump-sound/","title":"Add sound while the bird is jumping","tags":[],"description":"","content":"Let\u0026rsquo;s add sounds to the bird while it is jumping\nAdd the below command in the file [File: create-game.js] jumpSound.play();\nWorking Together In the repl.it window below, we started the code with the line jumpSound.play();.\nIn your console you should see a Jsappy bird jumping with sound after you press run:\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/conditionals/","title":"Conditionals","tags":[],"description":"","content":"Conditionals We can use if statements to run a code statement only if certain conditions are met.\nFor example:\nif (isRainingOutside == true) { takeUmbrella = true; } else { takeUmbrella = false; } For our game, we should use if statements to determine if a player has 3 vertical, horizontal, or diagonal matches.\nInside the () beside if, you should specify a Boolean expression. Booleans are true or false statements. We can utilize this in our if statement. If the expression is true, the code inside { } is executed.\nYou can also connect Boolean expressions together using the \u0026amp;\u0026amp; (AND) and the || (OR) operator.\nTake a look at the CheckWinner() function in MainActivity.kt and think about what all the connected \u0026amp;\u0026amp; statements are doing.\n"},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/variables/","title":"Variables","tags":[],"description":"","content":"Variables Variables are simply names that we can give to values such as strings, numbers, and booleans. We use variables to store information so the computer can keep track of it. Variables are created by using the type of the variable and the name of the variable. Then you can assign that variable to the information that you want to store by using = and the content.\nLook at the variables at the top of of MainActivity.kt.\nvar Player1 = ArrayList\u0026lt;Int\u0026gt;() var Player2 = ArrayList\u0026lt;Int\u0026gt;() var ActivePlayer = 1 var setPlayer = 1 var colorBlue = Color.rgb(0, 161, 241) // PUZZLE 3  var colorGreen = Color.BLACK  Player1 holds the values of Player 1\u0026rsquo;s moves in the game Player2 holds the values of Player 2\u0026rsquo;s moves in the game ActivePlayer keeps track of whose turn it is setPlayer holds the value for whether the game is Player vs Player or Player vs Computer colorBlue and colorGreen hold the values for the player colors  "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/adding-contact-form/","title":"Adding a Contact Form","tags":[],"description":"","content":"Finally, we will add a contact form to let people reach us if they are interested in Benji.\nMost browsers do not support sending emails directly from the contact form because it\u0026rsquo;s an easy way for trouble makers to send spam to users. Spam is an irrelevant or inappropriate message sent over the internet. Therefore, to send a form, we will use a free service called FormSpree. If we want the messages in the contact form to go to our email, we will first need to confirm it with FormSpree. This confirmation method keeps bad actors from just putting down anyone‚Äôs email in a contact form and spamming the victim.\nSee the Pen Contact Form by Deliana Escobari (@Sunny-Dee)\ron CodePen.\n"},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/wrapup/","title":"Wrap up","tags":[],"description":"","content":"Congratulations! You made it! We are excited to see you making it here, hope you had fun while working on game and learnt concepts that help you making games\nNow, it\u0026rsquo;s your turn! We recommend to utilise the knowledge gained from this tutorial to make various interesting changes into game.\n Add sets to the game, where each set is a first to 21 points. The player who wins the best of 3 sets will be declared as the winner. Try adding difficulty level for player to choose. At each difficulty level the default speed of ball is increased. Can you guess which attribute of the Ball object you should change? Can you assign player names to each side and let the user enter their preferred name before starting the game?  "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-7/","title":"Activity 7 - Drawing a figure 8","tags":[],"description":"","content":"Great! Now let‚Äôs make a figure 8 as the first step to making a mandala flower! A figure 8 is just two circles that are opposite to each other. To do this we can make use of the turtle.circle(x) method, which takes an integer x as the radius of the circle. (You may recall that 2 * radius is how wide the circle is.) Having the radius as an argument means we can decide how big or small the circle should be.\n import turtle turtle.circle(50) In the above example, the circle is 100 pixels wide and the circle is drawn in a counterclockwise direction. If the argument to turtle.circle() is negative, then the circle is drawn in a clockwise direction and it is opposite to the original version.\nUsing this information, create a new function called figure_8() which draws a figure 8.\n "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/variables/","title":"Variables","tags":[],"description":"","content":"Variables Variables are simply names that we can give to values such as strings, numbers and booleans. We use variables to store information that the computer can keep track of.\nHere\u0026rsquo;s how to declare a variable named str. We say str has the value \u0026quot;Hello World\u0026quot;. Can you describe what the other variables below mean?\nvar str = \u0026#34;Hello World\u0026#34;; var x = 88; var happy = true; Press run. Note that variables are not printed out to the console. Instead, the variable simply stores the string or number or boolean into the computer\u0026rsquo;s memory.\nWe can use these variables in other statements. For example, the following code would print Hello Nuevo Foundation to the console:\nvar str1 = \u0026#34;Hello\u0026#34;; var str2 = \u0026#34;Nuevo Foundation\u0026#34;; Console.WriteLine(str1 + \u0026#34; \u0026#34; + str2); You can change the value of a variable at any time by using the = operator again. If you\u0026rsquo;re changing a value of a variable, you don\u0026rsquo;t need to use var again. In the following example, Hola will be printed instead of Hello.\nvar str = \u0026#34;Hello\u0026#34;; str = \u0026#34;Hola\u0026#34;; Console.WriteLine(str); Here\u0026rsquo;s another example: 10 will be printed instead of 9.\nvar num = 9; num = num + 1; Console.WriteLine(num); Note that you CANNOT replace a string variable with a number or a boolean, and similarly for other combinations. The following example code will NOT work:\nvar happy = \u0026#34;Hello\u0026#34;; happy = 9; Another way to declare variables is to replace var with the type (string, int, bool) of variable you are creating. By declaring the type explicitly, you avoid the problem that we see above. For example:\nstring str = \u0026#34;Hello World\u0026#34;; int x = 88; bool happy = true; Note that var, string, int, or bool are special keywords in C#, so you cannot create variables with those names.\nWorking Together Let\u0026rsquo;s create two new variables:\n A variable named comp that stores the string \u0026quot;Computer\u0026quot;. A variable named five that stores the number 5.  Next, let\u0026rsquo;s use the variables to print out (Console.WriteLine) the following to the console. Let\u0026rsquo;s try to do this while using the variables!\nHint: we will use the + operator to combine strings together, and to also add numbers together.\nComputer 5 ComputerComputer 10 ComputerComputerComputer 15   "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/bonus-activites/","title":"Bonus activities","tags":[],"description":"","content":" What happens if we make gravity stronger? What happens if we make gravity have a negative value? What other wacky ways can the bird jump? How can we make him rotate quicker? What happens if we remove the 'if' around the rotation? \n "},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/puzzle3/","title":"Puzzle 3","tags":[],"description":"","content":"Puzzle 3a This puzzle will test your knowledge about variables. There is something strange with one of the player\u0026rsquo;s color on the board.\nFind // PUZZLE 3a in the MainActivity.kt file and update the colorGreen variable to show green colored pieces on the board.\nPuzzle 3b Why does Player 2 always win on the first move?! This doesn\u0026rsquo;t make any sense, solve puzzle 3b to fix the game.\nFind // PUZZLE 3b in the MainActivity.kt file and update the winner variable to ensure a player truly wins.\n"},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/activity-4/","title":"Activity 4","tags":[],"description":"","content":" Click on the try it yourself! button to open the editor Change the part that says \u0026lt;YOUR EMAIL HERE!\u0026gt; to your personal email if you have one. If you don\u0026rsquo;t, use email@nuevofoundation.org If you do, try to send a test message and see if it works Add any styling to the form. For example, try changing font or color of the form  Try it yourself!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-8/","title":"Activity 8 - Creating a mandala flower","tags":[],"description":"","content":"We‚Äôre done creating our first figure 8! We can now use the figure_8() function to create a mandala flower! A mandala flower is many figure 8s placed on top of each other at different angles. So, to do this we need to use a\u0026hellip; you guessed it, a loop!\nCreate a new function called mandala_flower(). In the loop we will call the figure_8() function we wrote earlier to create a figure 8. Then, rotate the turtle either left or right a certain number of degrees (for example, 10 degrees). Repeat these steps many times to make a mandala flower; it‚Äôs a good idea to create a loop that repeats at least 35 times.\n "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-3/","title":"Activity 3","tags":[],"description":"","content":"Activity 3 This activity is split into 2 parts and will test your knowledge about variables. Before starting, look out for HINT (ACTIVITY 3) in the code, where we declare a variable called lives which stores the number of lives the player has, and use the variable to print out how many lives the player has at the start of the game. This should give you an idea for how to complete the following two parts.\nActivity 3.1 At the start of the game, we should tell the player how many letters the word to guess has. For example, if the word to guess is \u0026quot;Hello\u0026quot;, we should tell the player: The word has 5 letters. If the word to guess is \u0026quot;Foundation\u0026quot;, we should tell the player: The word has 10 letters. We have already stored the number of letters in the numberOfLetters variable, so use it to complete this activity.\nTo check if you have completed this activity correctly, press run, and make sure you see The word has 5 letters (or some number other than 5) in the console.\nActivity 3.2 There are two more pieces of information that we need the computer to store:\n The number of letters that the player has guess correctly so far. Whether or not the player won the game.  We will declare two variables to represent these pieces of information. Press run to make sure no errors appear in the console. Remember that variables do not produce console output, so for this part, we are only checking for the absence of errors.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/data-structures/","title":"Data Structures","tags":[],"description":"","content":"Topics  Lists \n   Tuples \n   Sets \n    "},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/finalpuzzle/","title":"Final Puzzle","tags":[],"description":"","content":"Final Puzzle Now that Player 2 is no longer automatically winning the game and all the game pieces look good, there is still one last thing that is weird. Tic-Tac-Toe rules state that a player can win when the player has 3 pieces connected horizontally, vertically, or diagonally. The game works well for detection the horizontal and vertical wins, but something is wrong with the diagonal check.\nLook for // FINAL PUZZLE in the MainActivity.kt file. Solve this puzzle to complete the game!\n"},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/activity-5/","title":"Activity 5","tags":[],"description":"","content":"Using what you\u0026rsquo;ve learned, let\u0026rsquo;s try to create a site that describes you! Try and use some or all of the following:\n A heading \u0026amp; paragraph tag Different fonts Different colors Add an image to your site A list Embed a gif or video  Show your style!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-9/","title":"Activity 9 - Coloring your mandala flower","tags":[],"description":"","content":"Now that we have the shape of a mandala flower, it‚Äôs time to color it! We‚Äôre still going to use the turtle.color() method; however this time we‚Äôre going to use an RGB value instead of a string color value, so that we can produce a larger variety of colors.\nRGB (Red-Green-Blue) colors In primary school, you might recall that by mixing colors together, you can produce new colors. For example, combining red and blue together make purple. We can also change the amount of red and blue mixed together to create different shades of purple. The computer does something similar to produce colors. By combining various intensities of red, green, and blue, we can create different colors, such as powder blue, golden yellow, and salmon pink. Click here to see the colors and their corresponding hexadecimal form.\nIn the turtle.color() method, we can specify three integer arguments corresponding to the amount of red, green, and blue to mix. Each integer must be between 0 and 255 inclusive. One example can be turtle.color(30, 100, 238), which produces a dark shade of blue.\n Update your mandala flower to use a color of your liking. Feel free to experiment with different colors!\n "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/help/","title":"Help, I am stuck!","tags":[],"description":"Setting up headphones","content":"No worries! See if any of the following helps you, if not, feel free to reach out to one of us, and we will help you.  Indentation is very important when you are working in Python. Be careful of spaces \u0026amp; tabs in your code, because indentation errors can sometimes be pretty difficult to spot. However on the positive side, strict formatting makes Python code very clean and organized. Are all your variables, functions indented properly as instructed? SyntaxError: invalid syntax IndentationError: unexpected indent NameError: global name '---' is not defined Cannot recognize error: spelling mistake? TypeError: Can\u0026rsquo;t convert \u0026lsquo;int\u0026rsquo; object to str implicitly  "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/reading-from-console/","title":"Reading from Console","tags":[],"description":"","content":"Reading from Console Now that we know the basics about variables, we can now accept input from the user. Use the following line to tell the console to wait until the user types something into the console. Then, the computer takes whatever is typed into the console, and stores it into the variable called input.\nvar input = Console.ReadLine(); Here\u0026rsquo;s an example of how to use Console.ReadLine to accept user input:\nConsole.WriteLine(\u0026#34;Type in something:\u0026#34;); var input = Console.ReadLine(); Console.WriteLine(\u0026#34;You typed in: \u0026#34; + input); When the user presses run, the user is greeted with the following program:\nIn this case, after the user types in Hello World! into the console, the program finishes outputting to the console:\nWorking Together Write a program that first prints the following two lines to console:\nWelcome! How can I help you today? Afterwards, the console waits for user input. After the user types in something and presses Enter, the computer prints out:\nYou asked: [input]? I don't know the answer to that! Goodbye! [input] should be replaced with whatever the user had typed into the console.\n  "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/hosting/","title":"Hosting your website","tags":[],"description":"","content":"Host your site on the internet! Now that you\u0026rsquo;ve created your own personal website, let\u0026rsquo;s host it on the internet so everyone can access it! You will need a GitHub account to do so. If you don\u0026rsquo;t have one, create one here.\nOnce you have created your account and verified your email address, you will land on this page.\nNow, you will need to create a new repository to store the contents of your site! Think of a repository as a giant folder that can store lots of other files and folders for a given project. You can create one by selecting \u0026lsquo;Start a Project\u0026rsquo; or \u0026lsquo;Create a new repository\u0026rsquo;. Two very important things to keep in mind:\n Name your repo without any spaces. But you can use dashes or capitalization to replicate spaces! Check the box \u0026lsquo;Initialize this repository with a README'  Congratulations! You have created your first repo! Upload all your files and folders that belong to your site here. Now, when you go to your profile page, your new Repository will now show up under Repositories.\nAfter you\u0026rsquo;ve uploaded everything you created for your site, navigate back to the repo and select Settings.\nScroll all the way down to the GitHub Pages section.\nChange the Source from \u0026lsquo;None\u0026rsquo; to \u0026lsquo;master branch\u0026rsquo;. Save these changes and click the link at the top of the GitHub Pages section (in the example below, it would be https://exampleaccount1234.github.io/myFirstSite/). Now anyone can access your site with this link!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-10/","title":"Activity 10 - Randomizing the color of your mandala flower petals","tags":[],"description":"","content":"We‚Äôve successfully set the color of the mandala flower to an RGB value. Now, let\u0026rsquo;s explore changing the color of the individual mandala flower petals?\nWe will make use of python‚Äôs random library. The random.randint() method allows us to choose a random value for each of the red, green, or blue value. To choose a value that is between 0 inclusive and 256 exclusive (in other words, between 0 and 255 inclusive), we need to use random.randint(0, 256).\nUse random.randint(0, 256) three times to produce three random values, and plug them into the turtle.color() method. You should now be able to see a multi-colored mandala flower! This is definitely a flower from which Alex would be interested in collecting nectar!\n Congratulations! You helped Alex make a honeycomb and a flower! He can now happily live in his beehive, and make lots of honey! Your final image should look something like this:\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-4/","title":"Activity 4","tags":[],"description":"","content":"Activity 4 This activity has four parts. This is a great time to use your knowledge of comments, numbers, variables, and reading from console to complete the 4 activities. Some background information for each activity is provided below, and hints are provided in the code. After each part, press run and make sure there are no errors present in the console.\nActivity 4.1 First, let\u0026rsquo;s introduce some more code into our game. Find the two lines of code which start with TODO (ACTIVITY 4.1) (one is at approximately line 60, and the other at approximately line 130). Delete both lines of code entirely. This unlocks the main behavior of the game, such as checking if the letter guessed by the player is found in the word to guess.\nUnfortunately, after pressing run, it seems like the game does not wait for user input, and continuously guesses 'C' instead! This is no good, so let\u0026rsquo;s fix this in the next part.\nActivity 4.2 When the player makes a guess, we need to take the guessed letter and store it in a variable. The variable will be used to check if the letter appears in the word to guess. Use Console.ReadLine to wait for user input and store the user input in the input variable. Note: we have already declared the variable input already, so you do not need to use the var keyword.\nTo check if you have done this correctly, press run, and you should now be able to type in a letter into the console.\nActivity 4.3 Every time a letter is guessed correctly, we need to increment (add one to) the number of correctly guessed letters. Use the lettersRevealed variable to change the number of correctly guessed letters. Press run to make sure no errors occur. We have also provided some code to print out the value of the lettersRevealed variable for testing purposes. Make sure to delete this when you are done testing, since this is something we do not want to reveal to the player!\nActivity 4.4 Every time a letter is guessed incorrectly, the player loses a life. Decrement (subtract one from) the number of lives, using the lives variable. We will also tell the player how many lives they have remaining, when they make an incorrect guess, by printing the number of lives to the console. Check if you have done this correctly by pressing run, guessing an incorrect letter, and seeing if the correct number of lives are displayed on the console.\nFun Fact - Bugs Recall in Activity 4.1 that after uncommenting some code, we experienced some unexpected behavior. Any problems or unexpected behaviors in the program are called \u0026ldquo;bugs\u0026rdquo;. We fixed the bug introduced in Activity 4.1 by introducing user input in Activity 4.2.\nEven if you implemented everything correctly in the previous parts, if you keep playing for a while, another issue still occurs. What is it? We will fix this bug in Activity 6.\n "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/conclusion/","title":"In case you were wondering","tags":[],"description":"","content":"You might be concerned about Benji, but we are happy to tell you that he found his home through a website just like the one you are building. Benji is now a full time good boy working hard on his tricks to earn treats.\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/activity-11/","title":"Activity 11 - Now, it&#39;s your turn!","tags":[],"description":"","content":"If there is any time left, try drawing your own shapes and designs! Make your picture interesting using various shapes and colors.\nClick here to open a new blank repl.it window to start on your creation.\nHelp, I am stuck! Stuck? Check the Answer key for the activity that you are stuck on!\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/if-else-statements/","title":"If-else statements","tags":[],"description":"","content":"If-else statements You can use if statements to run code statement only if certain conditions are met. Here is an example:\nvar myNum = (93 + 41) / 12; if (myNum == 11) { Console.WriteLine(\u0026#34;They are equal!\u0026#34;); } Inside the () beside if, you should specify a boolean expression. If the expression is true, the code inside { } is executed. In this case, since myNum is equal to 11, They are equal! is printed.\nIf the condition is false, nothing happens! For example, since 10 is not greater than 11, Print me! will not show up to the console.\nvar happy = 10; if (happy \u0026gt; 11) { Console.WriteLine(\u0026#34;Print me!\u0026#34;); } Use else to tell the computer what to do if the condition is false. In this example, now I got printed instead! will be printed to the console.\nvar happy = 10; if (happy \u0026gt; 11) { Console.WriteLine(\u0026#34;Print me!\u0026#34;); } else { Console.WriteLine(\u0026#34;I got printed instead!\u0026#34;); } You can chain many cases together using else if. Note that when using else if, only the first case will be evaluated. For example, in the following code snippet, Statement 1 will be printed. We will skip the check that sad == 4 and Statement 2 will not be printed, even though sad == 4 is true.\nvar sad = 4; if (sad \u0026lt; 9) { Console.WriteLine(\u0026#34;Statement 1\u0026#34;); } else if (sad == 4) { Console.WriteLine(\u0026#34;Statement 2\u0026#34;); } else { Console.WriteLine(\u0026#34;Statement 3\u0026#34;); } You can also place if statements inside other if statements for some interesting behavior:\nvar num1 = 10; var num2 = 20; if (num1 \u0026lt; num2) { if (num2 \u0026lt; 30) { Console.WriteLine(\u0026#34;Hello!\u0026#34;); } else { Console.WriteLine(\u0026#34;Hola!\u0026#34;); } } Working Together Let\u0026rsquo;s write a program that first prints the following line to console:\nIs coding fun? Afterwards, the console waits for user input.\n If the user enters yes, the computer prints out Yes, I'm glad you're enjoying it!. If the user enters no, the computer prints out Oh no, that's too bad!. Otherwise, the computer prints out: I don't understand you! Goodbye!.    Fun Fact: Switch statements Using multiple if, else statements could get very long and confusing. You can use switch statements instead if you want to compare a single variable against multiple values. For example, the Working Together activity can be completed using the following piece of code:\nvar input = Console.ReadLine(); switch (input) { case \u0026#34;yes\u0026#34;: Console.WriteLine(\u0026#34;Yes, I\u0026#39;m glad you\u0026#39;re enjoying it!\u0026#34;); break; case \u0026#34;no\u0026#34;: Console.WriteLine(\u0026#34;Oh no, that\u0026#39;s too bad!\u0026#34;); break; default: Console.WriteLine(\u0026#34;I don\u0026#39;t understand you! Goodbye!\u0026#34;); break; } Each case represents a possible value that the variable input might take. Make sure you use the break statement to tell the computer that you have completed all the actions associated with this case.\n "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/answer-key/","title":"Pygame Pong game - Answer Key","tags":[],"description":"","content":"Activity 1 HEIGHT = 600 WIDTH = 800 Activity 2 COLOR = (70, 130, 180) Activity 3 self.paddles.append(Paddle( # The left paddle self.BALL_VELOCITY, pygame.K_w, pygame.K_s, 0, self.HEIGHT / 2 - self.PADDLE_HEIGHT / 2, self.PADDLE_WIDTH, self.PADDLE_HEIGHT )) Activity 4 self.paddles.append(Paddle( # The right paddle self.BALL_VELOCITY, pygame.K_UP, pygame.K_DOWN, self.WIDTH - self.PADDLE_WIDTH, self.HEIGHT / 2 - self.PADDLE_HEIGHT / 2, self.PADDLE_WIDTH, self.PADDLE_HEIGHT )) Activity 5 font_label = \u0026#39;arial\u0026#39; font_name = pygame.font.match_font(font_label) Activity 6 if ball.x \u0026lt; 0 self.RIGHTSCORE = self.RIGHTSCORE + 1 ball.x = self.BALLXSTARTPOSITION ball.y = self.BALLYSTARTPOSITION ball.velocity = self.BALL_VELOCITY ball.angle = self.BALL_ANGLE Activity 7 if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE: "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/answer-key/","title":"Answer Key - Web Basics","tags":[],"description":"","content":"Special note: This curriculum allows students to be creative. The below is just an example of what they can do, please use your best judgement and ask for guidance if needed. The answer key provided here is fairly long because we are including snippets of full HTML for context.\nWhen a student clicks on the \u0026lsquo;Try it yourself!\u0026rsquo; it\u0026rsquo;ll open a new tab with some of the HTML code (and CSS code) already scaffolded.\nChallenge 1 Solution should have:\n Header tags to add a title and the paragraph tags to write a paragraph about Benji. (optional) A list of Benji‚Äôs favorite treats: turkey, peanut butter, and string cheese  \u0026lt;head\u0026gt; \u0026lt;!--Challenge 1: Add title and header tags. --\u0026gt; \u0026lt;title\u0026gt;My exciting title!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--Content goes inside the body --\u0026gt; \u0026lt;!--Challenge 1: Add a header, a paragraph. --\u0026gt; \u0026lt;h1\u0026gt;About benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Benji is a cute pup. His favorite sport is fetch. He likes long walks in the woods. Once he found a big stick.\u0026lt;/p\u0026gt; \u0026lt;!--Challenge 1 (optional) Add a list. --\u0026gt; \u0026lt;h5\u0026gt; Benji\u0026#39;s favorite snacks \u0026lt;/h5\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Turkey\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Peanut Butter\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;String Cheese\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; Challenge 2 Solution should have:\n HTML: An id attribute to one of the header tag. For example, \u0026lt;header id=\u0026quot;page-title\u0026quot;\u0026gt; CSS: A different title color by adding color: yellow; inside the curly braces CSS: A different font by adding font-family: ‚ÄòRoboto Mono‚Äô, monospace; inside the curly braces and adding @import url(‚Äòhttps://fonts.googleapis.com/css?family=Roboto+Mono\u0026rsquo;); at the top of the CSS tab  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!--Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;title\u0026gt;This will show in the browser tab!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--Challenge 2: page-title id attribute --\u0026gt; \u0026lt;header id=\u0026#34;page-title\u0026#34;\u0026gt; \u0026lt;h1 id=\u0026#34;page-title\u0026#34;\u0026gt;My name is Benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m looking for my family.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Information:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m a Lab/Great Pyreneese mix\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m 1 year old\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I eat peanut butter you don\u0026#39;t want\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I will protect you from squirrels\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;I hope we get to play soon!\u0026lt;/h3\u0026gt; \u0026lt;img id=\u0026#34;dog\u0026#34; src=\u0026#34;https://aka.ms/Benji-the-dog\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; @import url(\u0026#39;https://fonts.googleapis.com/css?family=Roboto+Mono\u0026#39;); #page-title { color: yellow; font-family: \u0026#39;Roboto Mono\u0026#39;, monospace; } Challenge 3 Nuevo Foundation GIFs: https://giphy.com/nuevofoundation\n Click on \u0026lsquo;embed\u0026rsquo; and copy the GIF embed code. Paste the GIF embed code anywhere in the \u0026lt;body\u0026gt; tag  Example iframe code:\n\u0026lt;iframe src=\u0026#34;https://giphy.com/embed/oywrR92C9YBlrSuUKP\u0026#34; width=\u0026#34;480\u0026#34; height=\u0026#34;480\u0026#34; frameBorder=\u0026#34;0\u0026#34; class=\u0026#34;giphy-embed\u0026#34; allowFullScreen\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://giphy.com/gifs/nuevofoundation-rockstar-nuvi-oywrR92C9YBlrSuUKP\u0026#34;\u0026gt;via GIPHY\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; Integrated into sample \u0026lsquo;Try it yourself code!':\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!--Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;title\u0026gt;This will show in the browser tab!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1 id=\u0026#34;page-title\u0026#34;\u0026gt;My name is Benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m looking for my family.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Information:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m a Lab/Great Pyreneese mix\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m 1 year old\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I eat peanut butter you don\u0026#39;t want\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I will protect you from squirrels\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;I hope we get to play soon!\u0026lt;/h3\u0026gt; \u0026lt;!--Challenge 3: Paste your code here! --\u0026gt; \u0026lt;iframe src=\u0026#34;https://giphy.com/embed/oywrR92C9YBlrSuUKP\u0026#34; width=\u0026#34;480\u0026#34; height=\u0026#34;480\u0026#34; frameBorder=\u0026#34;0\u0026#34; class=\u0026#34;giphy-embed\u0026#34; allowFullScreen\u0026gt;\u0026lt;/iframe\u0026gt;\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://giphy.com/gifs/nuevofoundation-rockstar-nuvi-oywrR92C9YBlrSuUKP\u0026#34;\u0026gt;via GIPHY\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Challenge 4 The contact form is already added for the students. They will simply need to modify their email in the email section and then alter any styling they want!\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;title\u0026gt;This will show in the browser tab!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1 id=\u0026#34;page-title\u0026#34;\u0026gt;My name is Benji\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;I\u0026#39;m looking for my family.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;div id=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Information:\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m a Lab/Great Pyreneese mix\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I\u0026#39;m 1 year old\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I eat peanut butter you don\u0026#39;t want\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;I will protect you from squirrels\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--Challenge 4: Contact Form --\u0026gt; \u0026lt;div class=\u0026#34;contact-section\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Contact me\u0026lt;/h3\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;!--Change the following line --\u0026gt; \u0026lt;form action=\u0026#34;https://formspree.io/email@nuevofoundation.com\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Name: \u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Tell Benji who you are\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;label for=\u0026#34;message\u0026#34;\u0026gt;Your message: \u0026lt;/label\u0026gt; \u0026lt;textarea name=\u0026#34;message\u0026#34; placeholder=\u0026#34;Tell me about you\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Hi!\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;I hope we get to play soon!\u0026lt;/h3\u0026gt; \u0026lt;img id=\u0026#34;dog\u0026#34; src=\u0026#34;https://aka.ms/Benji-the-dog\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; .contact-section { width: 250px; margin: 10px; padding: 10px; background-color: #FCFC69; /* Challenge 4: change the color here for styling */ } Challenge 5 No solution here - the students are creating their own sites based on what they learned. A few notes:\n Encourage students to use all of the different things they learned (ie. CSS, form, GIF) Encourage students to create something they would want to show other people.  Have fun!\n"},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/answer-key/","title":"Python Turtle - Answer Key","tags":[],"description":"","content":"The below 3 lines are needed for the introduction activity and all the other activities as well.\nimport turtle turtle.color(\u0026#34;orange\u0026#34;) turtle.shape(\u0026#34;turtle\u0026#34;) Introduction Activity turtle.color(\u0026#34;orange\u0026#34;) turtle.forward(50) Activity 1 turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) Activity 2 for i in range(4): turtle.forward(50) turtle.left(90) Activity 3 for i in range(6): turtle.forward(50) turtle.left(60) Activity 4 def draw_hexagon(): for i in range(6): turtle.forward(50) turtle.left(60) draw_hexagon() Activity 5 def draw_honeycomb(): for i in range(6): draw_hexagon() turtle.forward(50) turtle.right(60) draw_honeycomb() Activity 6 turtle.penup() turtle.goto(300, 300) turtle.pendown() Activity 7 def figure_8(): turtle.circle(50) turtle.circle(-50) figure_8() Activity 8 def mandala_flower(): for i in range(35): figure_8() turtle.right(10) mandala_flower() Activity 9 def mandala_flower(): turtle.color(30, 100, 160) for i in range(35): figure_8() turtle.right(10) mandala_flower() Activity 10 def mandala_flower(): for i in range(35): turtle.color(random.randint(0, 256),random.randint(0, 256), random.randint(0, 256)) figure_8() turtle.right(10) mandala_flower() "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-5/","title":"Activity 5","tags":[],"description":"","content":"Activity 5 This activity is split into two parts. Use your knowledge of if-else statements to complete the activities. As always, press run after completing each part to check for errors.\nActivity 5.1 After the player guesses a letter, and we have checked whether the letter appears in the word, we need to check if the entire word has been guessed. If the entire word has been correctly identified, we should let the computer know that the player has won the game. Use an if-statement to change the value of the won variable only if the number of letters correctly guessed equals the number of letters in the word to guess.\nActivity 5.2 At the end of the game, we should let the player know if they won or lost the game.\n If the player has won the game, print out to console You won!. Else, tell the player that they lost, and print out the correct answer. For example, if the player could not guess the correct answer \u0026quot;Hello\u0026quot;, print out You lost! The answer was 'Hello'.  To test both parts of the activity, set the word bank to only contain one two-letter word (see Activity 2 if you forget how to do this). Press run, and correctly guess the word when playing the game. Make sure You won! is printed out. Run again, and check that You lost!is printed out when you lose the game.\n"},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/while-loops/","title":"While loops","tags":[],"description":"","content":"While loops while loops are an easy way to repeat the execution of lines without having to reuse a line many times. For example, to print Hello World five times in a row, you can do:\nvar counter = 1; while (counter \u0026lt;= 5) { Console.WriteLine(\u0026#34;Hello World\u0026#34;); counter = counter + 1; } Like an if statement, inside the () beside while, you should specify a boolean expression. If the expression is true, the code inside the curly braces { } is executed. However, after everything inside the curly braces is executed, we go back to the top of the while loop and check the boolean expression again. If the boolean expression continues to be true, the loop will be repeated.\nYou can also place if statements in while loops to do some interesting behavior:\nvar counter = 1; while (counter \u0026lt;= 10) { if (counter \u0026lt; 5) { Console.WriteLine(\u0026#34;Smaller than 5!\u0026#34;); } else { Console.WriteLine(\u0026#34;Greater than or equal to 5!\u0026#34;); } counter = counter + 1; } Here is an example of an infinite loop - do you see what\u0026rsquo;s wrong? What can you do so that the following piece of code prints Spam! only 100 times?\nvar counter = 100; while (counter \u0026gt; 0) { Console.WriteLine(\u0026#34;Spam!\u0026#34;); } Working Together Take your code from the previous activity. Let\u0026rsquo;s expand the code so that instead of the program finishing after the user inputs once, allow the user to answer the question 10 times before exiting. Be careful about infinite loops!\n "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/activity-6/","title":"Activity 6","tags":[],"description":"","content":"Activity 6 - Completing the game! Now, let\u0026rsquo;s finally address the bug that was introduced in Activity 4.2. The game should continue to ask the player to guess letters if they have some lives remaining, and they have not yet won the game. Look at the for loop. As you might have noticed, even though you might have lives remaining, the game abruptly stops after only 3 guesses. We will replace this for-loop with a while-loop, with the correct looping condition. Use the given hint to complete the activity.\n"},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/answer-key/","title":"Answer Key - Python Image Manipulation","tags":[],"description":"","content":"Python Basic Answers: Activity 1: # The sentences can be anything! Encourage having fun with it. print(\u0026#34;My name is Nuvi!\u0026#34;) print(\u0026#34;I love making memes.\u0026#34;) Activity 2: # There can be a variety of answers, here are a few:  print(\u0026#34;Nuevo\u0026#34; + \u0026#34;\u0026#34; + \u0026#34;Foundation\u0026#34;) print(\u0026#34;Nu\u0026#34; + \u0026#34;evo\u0026#34; + \u0026#34;Found\u0026#34; + \u0026#34;ation\u0026#34;) print(\u0026#34;N\u0026#34; + \u0026#34;uevo F\u0026#34; + \u0026#34;oundation\u0026#34;) Activity 3: print(2-19) # -17 print((3 + 5) * 6) # 48 print((13 + 5 * 8) / (6 - (3 + 7))) # -13.25 Challenge:\nprint(\u0026#34;527 times 199 is: \u0026#34; + str(527*199)) # Answer: 104873 Activity 4 print(54 \u0026lt; (10 + 32)) # False print((37 / 5) != 7) # True print(\u0026#34;Hello\u0026#34; + \u0026#34;World\u0026#34; == \u0026#34;Hello World\u0026#34;) # False print(False == False) # True Activity 5 comp = \u0026#34;Computer\u0026#34; five = 5 print(comp) print(five) print(comp + comp) print(five + five) print(comp + comp + comp) print(five + five + five) # If advanced student, try with multiplication. Ex: print(five * 5) # 25 print(comp * 5) # ComputerComputerComputerComputerComputer Activity 6 print(\u0026#34;Welcome!\u0026#34;) print(\u0026#34;How can I help you today?\u0026#34;) value = input() # ex. \u0026#34;How old am I?\u0026#34; print(\u0026#34;You asked: \u0026#34; + value + \u0026#34;?\u0026#34;) print(\u0026#34;I don\u0026#39;t know the answer to \u0026#34; + value + \u0026#34;. Goodbye!\u0026#34;) Activity 7 def add(number1, number2): return number1 + number2 value2 = add(2, 3) print(\u0026#34;This should print 5: \u0026#34; + str(value2)) Challenge: def subtraction(number1, number2): return number1 - number2 def multiply(number1, number2): return number1 * number2 def divide(number1, number2): return number1 / number2 value3 = subtraction(8,5) print(\u0026#34;This should print 3: \u0026#34; + str(value3)) value4 = multiply(3,5) print(\u0026#34;This should print 15: \u0026#34; + str(value4)) value5 = divide(12,3) print(\u0026#34;This should print 4: \u0026#34; + str(value5)) Image Manipulation Debugging If using Python3, you may need to manually install the image package. To do this, go on the left side of repl.it, find the cube (\u0026lsquo;packages\u0026rsquo;) and search for Pillow 7.1.2 and click the + icon. This should automatically kick off installation. When done, try running the import statements below.\nThe activities below are already described in the curriculum with the example answers. Repeated here for ease of access.\nActivity 1: Open an Image The student can pick any image they want as long as it is appropriate.\n Find a picture student likes. Download it Save as JPG/PNG with easy name Upload this as another file in the repl.it window  from PIL import Image from PIL import ImageFilter image = Image.open(\u0026#34;cat.png\u0026#34;) image.save(\u0026#34;myCat.png\u0026#34;) The image.save() function allows the student to see the image that they uploaded. They will see a new file on the left pop up with the image (ie. in this example, \u0026lsquo;myCat.png\u0026rsquo;).\nActivity 2: Rotate the Image Rotate the image upside down example:\nfrom PIL import Image from PIL import ImageFilter image = Image.open(\u0026#34;cat.jpg\u0026#34;) image = image.rotate(180) image.save(\u0026#34;myCat.jpg\u0026#34;) Activity 3: Image Filters Add to existing code.\nfrom PIL import Image from PIL import ImageFilter # Activity 2 image = Image.open(\u0026#34;cat.jpg\u0026#34;) image = image.rotate(180) image.save(\u0026#34;myCat.jpg\u0026#34;) # Activity 3 blurredImage = image.filter(ImageFilter.BLUR) blurredImage.save(\u0026#34;myCatBlurred.jpg\u0026#34;) greyscaleImage = blurredImage.convert(\u0026#34;L\u0026#34;) greyscaleImage.save(\u0026#34;myCatBW.jpg\u0026#34;) Activity 4: from PIL import Image from PIL import ImageFilter from PIL import ImageDraw # add this line # Activity 2 image = Image.open(\u0026#34;cat.jpg\u0026#34;) image = image.rotate(180) image.save(\u0026#34;myCat.jpg\u0026#34;) # Activity 3 blurredImage = image.filter(ImageFilter.BLUR) blurredImage.save(\u0026#34;myCatBlurred.jpg\u0026#34;) greyscaleImage = blurredImage.convert(\u0026#34;L\u0026#34;) greyscaleImage.save(\u0026#34;myCatBW.jpg\u0026#34;) # Activity 4 drawnImage = ImageDraw.Draw(greyscaleImage) drawnImage.text((200,20), \u0026#34;When you realize you learned python in an hour.\u0026#34;) greyscaleImage.save(\u0026#34;myCatWithText.jpg\u0026#34;) "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/answer-key/","title":"Answer Key - C# Guess the Word","tags":[],"description":"","content":"Activity 1: using System; class MainClass { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello there\u0026#34;); Console.WriteLine(\u0026#34;I am awesome\u0026#34;); } } Activity 2: using System; class MainClass { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Nuevo\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;Foundation\u0026#34;); Console.WriteLine(\u0026#34;Nue\u0026#34; + \u0026#34;vo \u0026#34; + \u0026#34;Foundation\u0026#34;); Console.WriteLine(\u0026#34;Nuevo \u0026#34; + \u0026#34;Foun\u0026#34; + \u0026#34;dation\u0026#34;); } } Activity 3: class MainClass { public static void Main(string[] args) { Console.WriteLine(2-19); Console.WriteLine((3+5)*6); Console.WriteLine((13+5*8)/(6-(3+7))); } } Activity 4: class MainClass { public static void Main(string[] args) { Console.WriteLine(54 \u0026lt; (10 + 32)); Console.WriteLine((37 / 5) == 7 ); Console.WriteLine(\u0026#34;Hello\u0026#34; + \u0026#34;World\u0026#34; == \u0026#34;Hello World\u0026#34;); Console.WriteLine(false == false); Console.WriteLine((11 - 2 \u0026lt; 10) \u0026amp;\u0026amp; (7 + 3 \u0026gt; 10)); Console.WriteLine((true || 3 \u0026lt; 1) \u0026amp;\u0026amp; (false || 3 \u0026gt; 1)); } } Activity 5: using System; class MainClass { public static void Main(string[] args) { var comp = \u0026#34;Computer\u0026#34;; var five = 5;\tConsole.WriteLine(comp); Console.WriteLine(five); Console.WriteLine(comp + comp); Console.WriteLine(five + five); Console.WriteLine(comp + comp + comp); Console.WriteLine(five + five + five); } } Activity 6: using System; class MainClass { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Welcome!\u0026#34;); Console.WriteLine(\u0026#34;How can I help you today?\u0026#34;); var input = Console.ReadLine(); Console.WriteLine(\u0026#34;You asked: \u0026#34; + input); Console.WriteLine(\u0026#34;I don‚Äôt know the answer to that! Goodbye!\u0026#34;); } } "},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/project-overview/","title":"Project Overview","tags":[],"description":"","content":"Applications like Instagram and Snapchat allow its users to modify their images. For example, you can rotate your image and make it black and white. Ever wondered how these apps do it? The answer is using code!\nToday, we‚Äôre going to learn how to do some image manipulations using Python!\nSetting up the project To get started let‚Äôs start with importing a module. What does that mean? To do fun stuff with images, we need to unlock some functions to use. To get these functions we need to import a module. In this case if we import the module Pillow, we can use some functions that will help us modify images.\nFirstly, let‚Äôs delete everything in the main.py file. Then, add the following statements:\n from PIL import Image from PIL import ImageFilter  Once you hit run, you should see the module being installed in the console:\nIf you see the above, it means you have successfully imported a module! If you‚Äôre hitting issues, please ask for help before moving on.\nIf you‚Äôre curious to see what functions there are in the Pillow Image module, you find information about it here: https://pillow.readthedocs.io/en/latest/handbook/index.html\n "},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/open-image/","title":"Open an image","tags":[],"description":"","content":"To change an image, we must open an image. We can use the Pillow Image module we just imported in the setup. Let‚Äôs first find some images to open. Find an image of your choice and download it. Once you have downloaded it, navigate back to your repl.it window and upload your image by clicking on the three dots and selecting ‚Äòupload file‚Äô.\nFor example, to upload the cat.jpg file:\nYou should see the JPG file on the left side once you‚Äôve uploaded it. Note, your image may have a different extension.\nNext step is to open that image within code. There are functions within the Pillow Image module we imported that allow us to do this.\nTo open and show the image you downloaded, do the following:\n image = Image.open(\"cat.jpg\") image.save(\"myCat.jpg\")  If you are using a different image, then make sure you put the name of the file within the quotes. The code above opens the JPG image and stores that image in the variable image. To check that the image variable has the image, we can then save it as a new image. This way the image will show in the window.\nHit run and see your image appear! My image looks like this:\n"},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/rotate-image/","title":"Rotate the image","tags":[],"description":"","content":"Now that we have the image in our code, let‚Äôs turn it in different directions. To do that, let‚Äôs look at the Pillow Image function rotate().\nThe rotate image works using angles. For example, rotate(45) will tilt your picture sideways by 45 degrees. Using rotate(90) will turn your picture sideways.\nLet‚Äôs give that a try! Let‚Äôs rotate the image before we save it:\n image = Image.open(\"cat.jpg\") image.rotate(90) image.save(\"myCat.jpg\")  Hmm, the picture didn‚Äôt seem to rotate. Why? Well, the image we opened is saved in the image variable. When we rotate the picture, we don‚Äôt save the rotated picture in any variable, so our code doesn‚Äôt save the rotated image.\nLet‚Äôs do this instead:\n image = Image.open(\"cat.jpg\") image = image.rotate(90) image.save(\"myCat.jpg\")  Challenge Can you turn this image all the way around? Can you turn the image 3/4ths of the way around without using an angle \u0026gt; 180? (Hint: try using negative angle numbers!)\nRotated all the way around, my image looks like this:\n"},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/image-filters/","title":"Image Filters","tags":[],"description":"","content":"I want to turn my cat black and white! Let\u0026rsquo;s do this by using the Pillow ImageFilter function filter() \u0026amp; convert().\nTo use the filter() function, you can specify the ImageFilter type within the parentheses. For example, image.filter(ImageFilter.BLUR)  will make the image blurry. Or, if you use ImageFilter.CONTOUR instead, it will add a ‚Äòsketch‚Äô type effect to your image.\nAdd something like this below your previously added code\n blurredImage = image.filter(ImageFilter.BLUR) blurredImage.save(\"myCatBlurred.jpg\")  You should see the saved cat image is blurred. Try this with a few other image filters until you find one you like!\nMy blurred and rotated image now looks like this: Next, I want to make my image black and white. To do this, we can use the convert() function. To use this function, you can specify the mode you want to convert your image to. The most common ones are \u0026ldquo;L\u0026rdquo;, which converts an image to greyscale, and ‚ÄúRGB‚Äù which converts an image to its true color.\nLet‚Äôs try it out like this:\n greyscaleImage = image.convert(\"L\") greyscaleImage.save(\"myCatBW.jpg\")  My cat now looks something like this ‚Äì purrfect! "},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/making-meme/","title":"Making a meme!","tags":[],"description":"","content":"So now that my image looks how I want it to look, I want to add some text. We can do that by utilizing the Pillow ImageDraw module. Let‚Äôs import that at the top of our file along with our other import statements.\n from PIL import Image from PIL import ImageFilter from PIL import ImageDraw  To allow us to add text, we must redraw the same image we used earlier for image manipulation. Let‚Äôs do that using the draw() function, which takes in an image object. Once the image is drawn, we can then add text to it by using the text() method to set the text of the image. The text is drawn based on coordinates provided. The function takes in two mandatory parameters: the xy coordinates and the text needed.\nFor example:\n drawnImage = ImageDraw.Draw(greyscaleImage) drawnImage.text((200,20), \"When you realize you learned python in an hour.\") greyscaleImage.save(\"myCatWithText.jpg\")  My image now looks like this: Challenge You can see that the text in the image created above is in a small, default font. There are other parameters within the text() method you can use. Take a look at the documentation and see if you can change the font and the font size, as well as the color of the text!\nThis will require downloading a .ttf (aka a font file) from online! Ask for help if you have any questions.\n "},{"uri":"https://nuevofoundation.github.io/workshops/javascript-basics/","title":"JavaScript: Basics","tags":[],"description":"Basics of JavaScript","content":"JavaScript basics Topics  Introduction \n   Arrays \n  Properties \n Iterating over Arrays \n Methods \n   "},{"uri":"https://nuevofoundation.github.io/workshops/jsappybird/","title":"JS: JSappyBird","tags":[],"description":"Create Your Own JSappyBird Game","content":"JSappyBird  Starting up with Repl.it \n   Starting up \n   Load the bird image \n   Change the screen text \n   Make the bird jump \n   Add gravity \n   Make the bird jump with force \n   Bird falling with rotation \n   Add sound while the bird is jumping \n   Bonus activities \n   "},{"uri":"https://nuevofoundation.github.io/workshops/android-tictactoe/","title":"Android: Tic-Tac-Toe","tags":[],"description":"Learn about variables, functions, and conditionals all while building a Tic-Tac-Toe Android app.","content":"Welcome Start your Android Game Adventure Adventure Checklist  "},{"uri":"https://nuevofoundation.github.io/workshops/arduino/","title":"Arduino","tags":[],"description":"Build a Arduino microcontroller","content":"Table of Contents  Sections   "},{"uri":"https://nuevofoundation.github.io/workshops/python-guess-number/","title":"Python: Guess the Number Game","tags":[],"description":"Create a simple game that asks the user to guess a randomly generated number","content":"In this activity, you will be creating a simple game that incorporates some of the things you learned in the Python Basics section.\n  Generate a random number \n   Accept user input \n   "},{"uri":"https://nuevofoundation.github.io/workshops/image-manipulation/","title":"Python: Image Manipulation","tags":[],"description":"An introduction to manipulating images in Python","content":"Introduction This workshop will provide an introduction to manipulating images in python.\nTable of Contents  Sections  Project Overview \n   Open an image \n   Rotate the image \n   Image Filters \n   Making a meme! \n    "},{"uri":"https://nuevofoundation.github.io/workshops/web-basics/","title":"HTML &amp; CSS: Web Basics","tags":[],"description":"An introductory guide on how to make a simple website from scratch","content":"Let\u0026rsquo;s build a website! Benji was born in Houston, Texas. Soon after Benji was born, a devastating hurricane hit Houston. Hurricane Harvey displaced more than 30,000 people, including Benji‚Äôs family. Benji can‚Äôt speak human so we don‚Äôt know the details. All we know is that Benji is looking for a home and is committed to be a good boy wherever he goes. Let‚Äôs make a website so we can share his information, and find his forever home! \nTable of contents  Section  Basics \n   Putting it together \n   Activity 1 \n   HTML Attributes \n   CSS \n   Activity 2 \n   Media Elements \n   Activity 3 - Adding a GIF of Nuvi \n   Adding a Contact Form \n   Activity 4 \n   Activity 5 \n   Hosting your website \n   In case you were wondering \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-basics/","title":"Python: Basics","tags":[],"description":"Learn basic concepts of using the Python programming language","content":"Python basics Topics  Basics \n  Starting up with Repl.it \n Writing to Console (Print statement) \n Comments \n Variables \n Reading from the Console \n  Conditional statements and loops \n  Conditional statements \n Loops \n  Functions \n  More about functions \n Built in Functions \n Built-in Math Functions \n  Data Types \n  Strings \n Numbers \n Booleans \n  Data Structures \n  Lists \n Tuples \n Sets \n  Help, I am stuck! \n    "},{"uri":"https://nuevofoundation.github.io/workshops/pygame-pong/","title":"Python: Building a Pong Game","tags":[],"description":"Learning To Build a Pong Game with Pygame Library","content":"Introduction You may already know how to play Pong game in real life. How about building the game to be played on a computer? In this tutorial we will learn to use Python\u0026rsquo;s Pygame library to build the Pong game. Sounds interesting, already?\nThe goal of this activity is to use your Python knowledge to fix the code that we have provided at various places to make the game working and learn about Pygame library and its functions along the way.\nTable of Contents  Using Repl.It \n   The Basics - Class and Object \n   Activity 1 - Define the width of the Pong screen \n   Activity 2 - Change the color of objects in game. \n   Activity 3 - Change the key assignment to move left paddle \n   Activity 4 - Change the key assignment to move right paddle. \n   Activity 5 - Declare and use a variable for font \n   Activity 6 - Fix the 'if' condition to track correct score. \n   Activity 7 - Define the key combination to exit the game \n   Wrap up \n   "},{"uri":"https://nuevofoundation.github.io/workshops/python-turtle/","title":"Python: Coding with Turtle","tags":[],"description":"Learn how to draw on a canvas with Python with Turtle","content":"Introduction Welcome to the Nuevo Beehive! You are right on time to help our new baby bee Alex.\nAlex lives in a country named the Turtle Islands. Residents of the Turtle Islands speak a language called Python. We are going to use Python to teach Alex how to live in a beehive. Are you up for the challenge? In this tutorial, we will learn how to use the Python language to help Alex beecome a busy bee!\nTable of Contents  Sections  Using Repl.It \n   The Basics - Drawing a colored line \n   Activity 1 - Drawing a square \n   Activity 2 - Simplifying code with loops \n   Activity 3 - Drawing a hexagon \n   Activity 4 - Simplifying code with functions \n   Activity 5 - Drawing a honeycomb \n   Part 2 - Building a Mandala Flower \n   Activity 6 - Moving the turtle \n   Activity 7 - Drawing a figure 8 \n   Activity 8 - Creating a mandala flower \n   Activity 9 - Coloring your mandala flower \n   Activity 10 - Randomizing the color of your mandala flower petals \n   Activity 11 - Now, it's your turn! \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-interactive/","title":"Python: Interacting with the Console","tags":[],"description":"Exploring Python&#39;s capabilities with the Console","content":"Introduction To start this program, open up a new Repl.it document and create a main() function definition and function call.\n"},{"uri":"https://nuevofoundation.github.io/workshops/microbit/","title":"MicroBit: Coding with mini computers","tags":[],"description":"Using MicroBits to learn about JavaScript and hardware","content":"An introduction to JavaScript and hardware using MicroBits The Basics What is JavaScript? JavaScript is one of many programming languages and it is known as the programming language for the web. It used to control website behavior, such as button clicks, pop-up windows, data flows, and many other functions.\nVariables Variables are containers in your code that can hold a single number, word, or other information. This information can be used and changed by calling the variable later on throughout your program. This means that you are asking your program to access the information that you\u0026rsquo;ve stored.\nWith a few exceptions, variables can be named anything containing letters, digits, underscores, and dollar signs. BUT No matter what, they cannot have spaces and they should always start with a letter.\nVariables can hold different types of data, let\u0026rsquo;s go over the basic ones.\nThe Data Types Integers Integer is basically just a fancy name for any real number that is not a decimal. For example, integers are whole numbers like 3, 100, 6,000, -3, and so on!\n// this is a comment, these are used to describe what your code does // Below are different examples of variables  //Integer (non decimal number) variables examples:  var a = 5; var b = 10; var c = 15; Doubles Doubles are your other \u0026ldquo;messy\u0026rdquo; numbers, the ones with that funky decimal. Examples are numbers like 0.5, 1.5, and so on.\n//Double (decimal number) variable examples:  var x = 0.5; var y = 1.5; var z = 2.0; Strings Strings are just what programmers decided to call words. If it helps remind you that strings are words, think of them as a \u0026ldquo;string\u0026rdquo; of characters. Strings can be anything like your name or the name of favorite pet.\nStrings are surrounded by \u0026ldquo;quotation marks\u0026rdquo;\n//String (one or more words aka a \u0026#34;string\u0026#34; of characters) variable examples: //string variable values are surrounded by \u0026#34;quotation marks\u0026#34;  var company = \u0026#34;MICROSOFT\u0026#34;; var course = \u0026#34;Coding with Micro:Bits!\u0026#34;; var message = \u0026#34;Coding is so fun!\u0026#34;; Characters Characters are single letters. They are surrounded by \u0026lsquo;single quotes\u0026rsquo;\n//Character (a single letter) variable example: //character variable values are surrounded by \u0026#39;single quotes\u0026#39;  var letter = \u0026#34;A\u0026#34;; Booleans Sometimes programmers want to check if certain conditions are true or false. This information is stored in a Boolean data type.\nIf you\u0026rsquo;re curious about why these are called Booleans, a guy named George Boole is the one that created them.\n//Boolean (true or false) variable example  var canPigsFly = false; var codingIsCool = true; Math Operations Ah yes our favorite, computers are essentially calculators so it should be a given that we can do math on them. Here are examples of the math you can have in your JavaScript programs.\nAddition var a = a + b; //a = 15 var a += b; //a = 25 Subtraction var a = a - b; //a = 15 var a -= b; //a = 5 Multiplication var a = a * b; //a = 50 var a *= b; //a = 500 Division var a = a / b; //a = 50 var a /= b; //a = 5 Modulo Ah yes, the one that sounds scary but actually isn\u0026rsquo;t. Modulus operations just gives you the remainder after division. For example, 10 % 2 = 0 because when you divide 10 by 2, you have no remainder left.\nvar d = 10 % 2; //d= 0 var e = 5 % 2; //e= 1 Print Statements Sometimes you want your computer to actually display some text or the data your variables hold. To do this we use print statements.\nconsole.log(\u0026#34;This will show up in the console, but not the webpage\u0026#34;); alert(\u0026#34;This will display as a pop up window\u0026#34;); var userResponse = prompt(\u0026#34;Do you want to play a game?\u0026#34;); Conditionals and Logical Operators Conditionals, most commonly called if-statements, are used to choose what code you want to run depending on the value of your variables or other conditions.\n//conditionals if (true) { //this section of code will run } if (false) { //this section of code will not run } var age = 10; if (age \u0026lt; 18) { // if age is less than 10  print(\u0026#34;You\u0026#39;re not an adult yet! :( \u0026#34;); } Loops And last but not least, we have things called loops. These allow you to repeat parts of your code until a certain condition is met.\nThe alert() function you see in the code snippet below simply displays a pop-up displaying the parameter you pass to it, the parameter is what is inside the parantheses, in this case it is displaying the updated count value.\n//while loop - counts down from 10 var count = 10; while (count \u0026gt; 0) { alert(count); count--; } //for loop - counts down from 10 for (var i = 10; i \u0026gt; 0; i--) { alert(i); } //endless while loop while (true) { //this will happen over and over again forever since the condition will never be false. true is always true. } //break;\t//stops a loop immediately and moves to line below the loop Getting started with Micro:Bits Now that you know the basics of JavaScript, you can use your knew skills to start programming your Micro:Bits!\nWhat is a Micro:Bit? A Micro:Bit is a programmable mini computer! It can be coded from any web browser in various languages like javaScript, Python,Scratch, and Blocks. For our session today with we will be using JavaScript.\nYour Micro:Bit has the following physical features:\n 25 individually-programmable LEDs 2 programmable buttons Physical connection pins Motion sensors (accelerometer and compass) Wireless communication via bluetooth and radio USB interface  If you want to learn more about each individual component and all the features that come with your Micro:Bit, you can click here.\nGo ahead and take out the the Micro:Bit and the rest of the components from the bag. You should have one Micro:Bit, 2 batteries, a micro USB cable, and the battery holder (the black box with the red and black wires coming out of it). If you\u0026rsquo;re missing anything or need help feel free to ask one of the instructors!\nQuick Start Go ahead and plug in your Micro:Bit to your computer using the USB cable. You won\u0026rsquo;t be needed the batteries right for a while so you can go ahead and put those aside.\nOnce you plug in the Micro:Bit to your computer, it will show up on your computer as a drive called \u0026lsquo;MICROBIT\u0026rsquo;. If you open file explorer you should see something similar to the picture below.\nI\u0026rsquo;ve coded up a game to give you an example of what you can make! Go ahead and download my game by clicking the link below.\nClick to Download\nOnce it downloads you should see the HEX file inside your \u0026lsquo;Downloads\u0026rsquo; folder. (You\u0026rsquo;ll also notice I named this game \u0026lsquo;Asteroids\u0026rsquo;, if you have a better name please let me know)\nTo actually play the game, you\u0026rsquo;ll need to copy this file to your Micro:Bit. To do this you can simply copy and paste the file to the Micro:Bit directory, but I find another method much easier. Simply right click the file, click Send To then select MICROBIT\nIf you did this correctly, you will notice your Micro:Bit LEDs will pause for a bit and the yellow LED on the back will blink while the Micro:Bit downloads the code. If you don\u0026rsquo;t see this, don\u0026rsquo;t worry and ask us for help.\nCurious about what my game\u0026rsquo;s code looks like? Click here\nProtecting Your Spaceship Ready to play? These are the list of controls:\n A + B: Shoot lasers to destroy incoming asteroids Tilt: Tilt your microbit left or right to move your spaceship  Simple right? We\u0026rsquo;ll see. I\u0026rsquo;ve programmed this game to go faster the more asteroids you destroy. Think you have the high score? Show off and let us know! You can see your score by waiting for the game over screen to pass.\nTIP: If you reach the game over screen and want to start a new game, simply click the reset button behind your Micro:Bit.\nGet Coding Finally! Time for the best part! Now you can use everything you\u0026rsquo;ve learned to create your own programs and code your Micro:Bits!\nFirst, let\u0026rsquo;s display our name on the Micro:Bit. Follow along with me.\nNow let\u0026rsquo;s go through two tutorials together! Go to this link and find the \u0026ldquo;Flashing Heart\u0026rdquo; tutorial.\nWe\u0026rsquo;ll be going through this and the \u0026ldquo;Micro Chat\u0026rdquo; tutorials.\nYour Turn Go ahead and find another tutorial you\u0026rsquo;re interested in, or if you\u0026rsquo;re feeling confident, code your own program from scratch! Have fun!\nResources and Advanced Micro:Bit Cheat Sheet Variables, Printing, and Downloading   JavaScript variables are the same except the word \u0026lsquo;let\u0026rsquo; is used instead of var\nlet variable = \u0026#34;text\u0026#34;;   The command basic.showString(variable); will make the text appear in the LED of the Micro:Bit\nlet name = \u0026#34;Gonzo\u0026#34;; basic.showString(name);   Useful JavaScript Commands The commands below are in javaScript, if you prefer to use the Block code equivalent just look in the corresponding library. For example, you can find basic.forever() by clicking the Basic tab and dragging the forever function to your screen.\nbasic.forever(function() { // Code between these brackets will run forever on your Micro:Bit }); // Displays the number inside the parantheses on your Micro:Bit basic.showNumber(number); // Displays the string (word) inside the parantheses on your Micro:Bit basic.showString(string); // Generates a random number between 0 and the number inside the parantheses Math.random(number); input.onButtonPressed(Button.A, function() { // Code here runs when button you specify is pressed, in this case when Button A is pressed }); // Displays the specified character on the LED screen basic.showIcon(IconNames.Character); // Pauses your Miceo:Bit for the specified amount of microseconds basic.pause(microseconds); // "},{"uri":"https://nuevofoundation.github.io/workshops/csharp-guess-the-word/","title":"C#: Guess The Word Game","tags":[],"description":"An introductory guide on how to make a simple Guess The Word from scratch using C#","content":"Welcome The goal of today\u0026rsquo;s activity is to learn C# skills and incorporate your new-found knowledge to create a Guess The Word game!\nTable of Contents  Sections  Starting Up \n   Writing to Console \n   Comments \n   Activity 1 \n   Strings \n   Activity 2 \n   Numbers \n   Booleans \n   Boolean Operators \n   Variables \n   Activity 3 \n   Reading from Console \n   Activity 4 \n   If-else statements \n   Activity 5 \n   While loops \n   Activity 6 \n    "},{"uri":"https://nuevofoundation.github.io/workshops/adventure/","title":"Python: Choose Your Own Adventure Game","tags":[],"description":"An introductory guide on how to make a Choose Your Own Adventure Game in Python","content":"Part 1 ‚Äì Welcome! Power of Stories Hi everyone! Today we are going to be using our engineering superpowers to be the best storytellers. Stories are a great way to connect people, share traditions, and learn new things!\nTurn to your neighbor and share your favorite story! It can be a story that your family members have shared. Your favorite story line from a Marvel movie or your favorite novel.\nNow through code, we get the chance to create or re-tell amazing stories and spread our ideas further!\nChoose Your Own Adventure Games! Today you will be choosing and designing the plot of the stories that you are being told! In Choose Your Own Adventure Games you are the protagonist of the story, and you get to choose the actions that the characters are taking and the outcomes of those actions. You have control!\nDemo Let‚Äôs try it out!\n What did you all think? We‚Äôre now going to learn some cool skills that will allow us to create our own stories.\nTable of Contents  Sections  Time to Create \n   Section 1: Story Boarding \n   Section 2: Transferring the Story Board to Code! \n    "},{"uri":"https://nuevofoundation.github.io/workshops/python-earsketch/","title":"Python: Create music with EarSketch","tags":[],"description":"Create music using Python and EarSketch","content":" Let\u0026rsquo;s make some music! Welcome to this introductory guide on how to make music using EarSketch \u0026amp; Python. To jump to a particular activity, click on the section link below:\n Sections  Meet DJ Nuevo \n   Music Basics \n   Python Basics \n   Getting started with Earsketch \n   Activity 1 - Set tempo \u0026amp; add sounds \n   Activity 2 - Make a song! \n   Activity 3 - Organize your song using functions \n   Activity 4 - Add effects to your song \n   Activity 5 - Use effects to fade in \n    "},{"uri":"https://nuevofoundation.github.io/workshops/guidelines/web-developer/","title":"Web Developer Guidelines","tags":[],"description":"","content":"This document is for website developers only for changing the Nuevo Foundation workshop project templates and style.\nBefore getting started Before adding/updating the website, ensure you have sync\u0026rsquo;d with the project team and the existing work in the Project Backlog.\nSetup Follow the instructions in the Project readme.md to install Git and Hugo to test the project locally.\nWeb design styles and structure  Images: Website images should be themes/images CSS Ignore the SCSS files and just use CSS files in /themes/docdock/static/css/ Make sure to add a reference to the CSS you want to include in the head.html file at /themes/docdock/layouts/partials/flex/head.html  Dissecting a Workshop Page  Full page template: To see all of the components of a page including header, menu, body, footer, see /themes/docdock/layouts/_default/baseof.html Head: Meta, CSS, and JS files /themes/docdock/layouts/partials/flex/head.html Top / Menu Navigation: Don\u0026rsquo;t use docDock config.toml values, instead add/edit HTML in: /themes/docdock/layouts/partials/flex/body-before-content.html Left Menu: /themes/docdock/layouts/partials/flex/menu.html Footer Navigation: /themes/docdock/layouts/partials/flex/body-after-content.html Metadata Box: /themes/docdock/layouts/partials/flex/body-after-content.html  Help, the CSS is gone One challenge with Hugo is that a key parameter in the build is the baseURL variable. If the content is loading, and the CSS is not, it\u0026rsquo;s likely an issue with the baseURL setting.\nYou can change the baseURL when building content instead of changing the config.toml file. The example below will minify the CSS and JS, set the baseURL to the production .org URL and copy the results to the public directory.\nhugo --minify --baseURL \u0026quot;https://workshops.nuevofoundation.org/\u0026quot;\nTips and Tricks  Ignore Public: By default, running hugo with no parameters will build the site to the public directory. Make sure you do not add the public directory to source control (it\u0026rsquo;s in gitignore now). Left Nav: You can hide content from the left nav by settting metadata on the file hidden: true (like this page\u0026rsquo;s markdown!) Partials: For resuable components to a page, create a new partial under /themes/docdock/layouts/partials/flex/.  "},{"uri":"https://nuevofoundation.github.io/workshops/guidelines/","title":"Workshop Contributor Guidelines","tags":[],"description":"","content":"Welcome! These guidelines are for creating or editing a Nuevo Foundation Workshop.\nComing Soon Workshop guidance is a work in progress. In the meantime, visit the project readme.md for setup instructions.\nFormatting Reference  Standard Markdown cheatsheet Custom Formatting Options using shortcodes  Formatting Examples This theme includes a number of options to customize the look and feel of your site.\nAlerts Info {{% alert theme=\u0026quot;info\u0026quot; %}}**this** is an info {{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;this is an info\nSuccess {{% alert theme=\u0026quot;success\u0026quot; %}}**Yeahhh !** is a success{{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;Yeahhh ! is a success\nWarning {{% alert theme=\u0026quot;warning\u0026quot; %}}**Be carefull** is a warning{{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;Be carefull is a warning\nDanger {{% alert theme=\u0026quot;danger\u0026quot; %}}**Beware !** is a danger{{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;Beware ! is a danger\nButtons {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; \u0026gt;}} go to Nuevo Foundation {{\u0026lt; /button \u0026gt;}}  go to Nuevo Foundation  Success Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;success\u0026quot; \u0026gt;}} Success {{\u0026lt; /button \u0026gt;}}  Success  Info Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;info\u0026quot; \u0026gt;}} Info {{\u0026lt; /button \u0026gt;}}  Info  Warning Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;warning\u0026quot; \u0026gt;}} Warning {{\u0026lt; /button \u0026gt;}}  Warning  Danger Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;danger\u0026quot; \u0026gt;}} Danger ! {{\u0026lt; /button \u0026gt;}}  Danger !  Default Button {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;default\u0026quot; \u0026gt;}} Danger ! {{\u0026lt; /button \u0026gt;}}  Danger !  Expand {{%expand%}}Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.{{% /expand%}}     \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;expand-content\u0026quot; style=\u0026quot;display: none;\u0026quot;\u0026gt;  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \n Notices Note Notice {{% notice note %}} A notice disclaimer {{% /notice %}}  renders as\nA notice disclaimer\n Info Notice {{% notice info %}} An information disclaimer {{% /notice %}}  renders as\nAn information disclaimer\n Tip Notice {{% notice tip %}} A tip disclaimer {{% /notice %}}  A tip disclaimer\n Warning Notice {{% notice warning %}} An warning disclaimer {{% /notice %}}  renders as\nAn warning disclaimer\n Example icons available Full list here\n   asterisk   plus   euro   eur   minus   cloud   envelope   pencil   glass   music   search   heart   star   star-empty   user   film   th-large   th   th-list   ok   remove   zoom-in   zoom-out   off   signal   cog   trash   home   file   time   road   download-alt   download   upload   inbox   play-circle   repeat   refresh   list-alt   lock   flag   headphones   volume-off   volume-down   volume-up   qrcode   barcode   tag   tags   book   bookmark   print   camera   font   bold   italic  "},{"uri":"https://nuevofoundation.github.io/workshops/","title":"Nuevo Foundation Workshops","tags":[],"description":"","content":"Workshop Projects   Adafruit: Musical Fruit Programming An introductory guide to creating sounds using Adafruit to learn about hardware\n   C#: Guess The Word Game An introductory guide on how to make a simple Guess The Word from scratch using C#\n   HTML \u0026amp; CSS: Web Basics An introductory guide on how to make a simple website from scratch\n   MicroBit: Coding with mini computers Using MicroBits to learn about JavaScript and hardware\n   Python: Basics Learn basic concepts of using the Python programming language\n   Python: Choose Your Own Adventure Game An introductory guide on how to make a Choose Your Own Adventure Game in Python\n   Python: Coding with Turtle Learn how to draw on a canvas with Python with Turtle\n   Python: Create music with EarSketch Create music using Python and EarSketch\n   Python: Image Manipulation An introduction to manipulating images in Python\n   Spy Game An introductory guide to learn about passwords and how to create a strong one!\n  Contributor guidelines  Contributor guidelines Workshop website developer guidelines  "},{"uri":"https://nuevofoundation.github.io/workshops/adafruit/","title":"Adafruit: Musical Fruit Programming","tags":[],"description":"An introductory guide to creating sounds using Adafruit to learn about hardware","content":"Table of Contents Section  The Components \n   Building the DJ station \n   Creating the Program \n   Downloading your program \n    "},{"uri":"https://nuevofoundation.github.io/workshops/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://nuevofoundation.github.io/workshops/security/","title":"Spy Game","tags":[],"description":"An introductory guide to learn about passwords and how to create a strong one!","content":"Table of Contents  Meeting Alice, Bob and Eve \n   Password Basics \n   Activity \n   Spy Game \n   Summary \n   "},{"uri":"https://nuevofoundation.github.io/workshops/tags/","title":"Tags","tags":[],"description":"","content":""}]