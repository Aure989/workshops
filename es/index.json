[{"uri":"https://nuevofoundation.github.io/workshops/es/adafruit/1-los-componentes/","title":"Los Componentes","tags":[],"description":"","content":"Los componentes que utilizaremos para el proyecto se listan a continuación. Asegúrate de tener todo esto antes de comenzar:\n Una Adafruit Un cable USB-C a USB Dos cables de pinza cocodrilo de cualquier color Dos naranjas  "},{"uri":"https://nuevofoundation.github.io/workshops/es/adafruit/","title":"Programando Frutas Musicales con Adafruit","tags":[],"description":"Una guía introductoria para crear sonidos usando Adafruit para aprender acerca del hardware","content":" Los Componentes Contruyendo la Estación del DJ Creando el Programa Descargando el Programa  "},{"uri":"https://nuevofoundation.github.io/workshops/es/adafruit/2-construyendo-la-estacion-dj/","title":"Construyendo la estación de DJ","tags":[],"description":"","content":"Conectando las naranjas Toma una naranja y uno de tus cables. Abre una de las pinzas de cocodrilo e inserta la mitad inferior en la naranja, dejando la parte superior de la pinza en el exterior. Esto es más fácil de hacer si lo insertas a la mitad de la parte inferior de la naranja. En ll mismo lugar donde comenzarías a pelar si fueras a comer la naranja.\nRepite la operacion con la segunda naranja y tu otro cable.\nConecta una naranja a A1 y la otra a A2 Así es como tiene que verse cuando termines. Usando tu cable USB, conecta el lado pequeño al chip. Entrará en el puerto plateado.\n¡Ahora creemos el programa antes de conectar nuestro chip a la computadora! Asegúrate de que tu computadora esté silenciada antes de comenzar.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/adafruit/3-creando-el-programa/","title":"Creando el programa ","tags":[],"description":"","content":"Abre tu navegador de internet favorito (como Edge, Firefox, Google Chrome, Internet Explorer) y entra a https://aka.ms/oranges.\nTu pantalla debería verse así:\nDefiniendo las variables Hoy vamos a usar naranjas para decirle a nuestra Adafruit cuándo hacer ruido. Lo primero que debemos hacer es darle a la computadora un nombre para cada naranja y dónde buscar lo que están diciendo. Hacemos la primera parte definiendo una variable. Haz clic en la sección que dice VARIABLES, es de color salmón y es el séptimo si cuentas desde la parte superior. Luego define una variable haciendo clic en Make a variable y dale un nombre. Haz esto dos veces. En estas imágenes de ejemplo puedes ver como nosotros nombramos las nuestras como analog1 y analog2, pero puedes llamarlas como quieras.\nInterpretando las entradas Ahora que tenemos un nombre que nuestra computadora conoce para nuestras naranjas, debemos dejar que Adafruit sepa cómo entenderlas. Hay dos tipos de entradas: digitales y analógicas. Los interruptores de luz y los botones de encendido son ejemplos de entradas digitales. Están activados o desactivados, son 1 o 0. Las entradas analógicas son como un atenuador de luz o un botón de volumen. Tienen más opciones para los valores. Nuestras naranjas serán entradas analógicas y cuánto las toquemos o exprimiremos cambiará el valor que mandan al Adafruit.\nHaz clic nuevamente en la sección Variables. Esta vez deberías poder ver más opciones ya que hemos definido nuestras dos variables. Arrastra uno de los bloques \u0026ldquo;set ___ to __\u0026rdquo; hacia bloque verde \u0026ldquo;forever\u0026rdquo; en nuestro espacio de trabajo. Usando la flecha blanca hacia abajo, cambia el primer espacio en blanco a \u0026ldquo;analog1\u0026rdquo; o al nombre que hayas escogido para tu primer variable.\nAhora haz clic en la opción \u0026ldquo;ADVANCED\u0026rdquo; y luego haz clic en PINS. Busca el bloque \u0026ldquo;analog read pin __\u0026quot;, es el tercero desde la parte superior e insértalo donde está el 0 en nuestro bloque \u0026ldquo;set analog1 to 0\u0026quot;. Para insertarlo en esa ranura, arrástralo para que se mueva sobre el cero, verifica que el 0 esté resaltado en amarillo y luego suelte el mouse (o el panel táctil). Deberías ver que el bloque se extiende para acomodar el bloque. Si no ves esto, intenta nuevamente.\nUna vez que hayas hecho eso, tu espacio de trabajo debería verse como en la imagen de arriba. Repite este proceso nuevamente pero esta vez usa las flechas blancas hacia abajo para seleccionar analog2 y A2. En la siguiente imagen está como debe de quedar tu espacio de trabajo.\nCreando nuestros bucles, ciclos, iteraciones o como se traduzca \u0026ldquo;loop\u0026rdquo; en tu país Ahora que nuestra computadora sabe cómo llamar a nuestras naranjas y cómo entender lo que están diciendo, creemos un bucle que verifique cuándo estamos sosteniendo nuestra naranja. Haz clic en la sección LOGIC y arrastra el bloque \u0026ldquo;If ____ then\u0026rdquo; para colocarlo debajo de tus bloques de variables.\nVolvamos al ejemplo de la perilla de volumen para comprender la comparación que vamos a hacer en nuestro bucle. Cada persona tiene un punto en el que le gusta escuchar su música para poder disfrutarla. Este punto también es cierto para nuestras naranjas. Le dirán a la computadora un número cuando nadie las toque y un número más bajo cuando las toquemos. El truco es encontrar el punto intermedio para que solo hagamos ruido cuando queramos.\nPara configurar lo anterior, ve a la sección LOGIC nuevamente y toma el bloque hexagonal \u0026ldquo;**__ \u0026lt;__**\u0026rdquo; que es el segundo en la subsección \u0026ldquo;**Comparison**\u0026quot;. Coloca el bloque sobre el \u0026ldquo;**true**\u0026rdquo; en el bloque \u0026ldquo;**if __ then**\u0026quot;. Asegúrate de ver el resaltado amarillo antes de colocarlo allí. Revisa la imagen a continuación para verificar tu espacio de trabajo\nAhora vamos a poner lo que estamos comparando. Vuelve a la sección VARIABLES, toma la variable analog1 y colóquela en la primer espacio. Luego haz clic en el segundo espacio y escribe 40. Este 40 debería ser un buen punto adecuado para la mayoría de las personas. Si al final, la naranja hace ruido sin que la toques, puedes volver a este paso y aumentar el número. Si tu naranja no hace ruido cuando la toques, puedes regresar y aumentar el número. Por ahora, vamos a dejarlo en 40.\n¡Ahora podemos elegir nuestra música! Haz clic en la sección MUSIC y arrastra el segundo bloque \u0026ldquo;play _____ until done\u0026rdquo; en nuestro bloque If-Then. Puedes hacer click en la flecha hacia abajo para probar otros sonidos.\nAhora queremos repetir estos últimos pasos para la variable analog2. Una vez que hagas esto, tu espacio de trabajo se verá como la imagen de abajo (con tus opciones de música).\nDivitiéndonos con Luces (Time Permitting) The Adafruit chip has a lot of lights on it! They’re super fun to play with so let’s add a bit of color to our sounds so we can both see and hear the difference when we touch our oranges. Click on the LIGHT section and drag the “Set all Pixels to ___” block into our two If-Then chunks. You’ll want to drop them in right before we play a sound. You can click on the color portion to change which color you want to display.\n¡El chip Adafruit tiene muchas luces! Son súper divertidos para jugar, así que agreguemos un poco de color a nuestros sonidos para que podamos ver y escuchar la diferencia cuando tocamos nuestras naranjas. Haz clic en la sección LIGHT y arrastre el bloque \u0026ldquo;Set all Pixels to ___\u0026rdquo; en nuestros dos bloques If-Then. Deberás colocarlos justo antes de que reproduzcamos un sonido. Puedes hacer clic en la porción de color para cambiar el color que desea mostrar. "},{"uri":"https://nuevofoundation.github.io/workshops/es/adafruit/4-descargando-el-programa/","title":"Descargando el Programa","tags":[],"description":"","content":"En la parte inferior de tu espacio de trabajo, debería ver este botón rosado de descarga al lado del nombre de tu programa. Puedes asignarle un nombre a tu programa, aquí se llama adafruit_musicalfruit. Haz clic en el botón de descarga.\nDebe apareceruna ventana emergente, preguntando dónde guardar tu archivo. Lo usual es que abra apuntando a la carpeta Descargas; de lo contrario, ve a tu carpeta de descargas y guarda el archivo allí.\nAhora puedes conectar tu cable USB a la computadora. ¡Deberías poder ver algunas luces que prenden! Esto significa que tu chip está encendido y ejecuta el programa predeterminado. Vamos a reemplazar eso con nuestro programa. Haz clic en el pequeño botón de reinicio en el centro del chip. Las luces deben volverse rojas y luego verdes. Si las luces no se pusieron verdes, haz doble clic rápidamente en el botón de reinicio y espera unos segundos\nUna vez que las luces estén verdes, abre una ventana del Explorador de Windows (puedes abrir una apretando las teclas Windows + E al mismo tiempo)si no aparece ninguna. Ahora debería ver una unidad CPLAYBOOT. Aquí se muestra como la unidad D: pero podría ser E :, F :, etc.\nUna vez que hayas verificado que puedes ver este CPLAYBOOT, ve a la carpeta Descargas y busca el archivo que guardaste allí. Debes hacer clic y arrastrar ese archivo hasta que pase el mouse sobre CPLAYBOOT. Debería ver un texto emergente que dice \u0026ldquo;-\u0026gt; Mover a CPLAYBOOT\u0026rdquo;. Coloque el archivo allí para copiarlo en CPLAYBOOT\nUna vez que hayas dejado el archivo en el lugar correcto, las luces verdes se apagarán para indicar que ha programado con éxito tu Adafruit.\n¡FELICITACIONES! ¡Lo lograste!. Siéntase libre de regresar y ajustar los sonidos o su número mágico en las comparaciones "},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/","title":"Python Turtle","tags":[],"description":"Aprender Python con Turtle","content":"Python con Turtle Introducción Bienvenidos al mundo de Nueva Colmena! Llegaste justo a tiempo para ayudar a nuestra abeja bebé Alex.\nAlex vive en un país llamado Isla Tortuga. Los habitantes de Isla Tortuga hablan un lenguaje llamado Python. Vamos a usar este lenguaje para enseñar a Alex cómo vivir en una colmena. ¿Estás listo para jugar?\nPart 1 - Construyendo la colmena Para que Alex pueda vivir en una colmena, necesita aprender a construir un panal. Vamos a usar una biblioteca de Python que se llama turtle para dibujar el panal.\nUsing Repl.it Vamos a utilizar la herramienta Repl.it para jugar con nuestros códigos Python. Este es un ejemplo de una ventana interactiva como las que usaremos en todo el tutorial:\n Antes de empezar, entendamos como funciona esta ventana. El programa main.py contiene las intrucciones que la computadora va a ejecutar o \u0026ldquo;correr\u0026rdquo; (Run en inglés). Al presionar el botón Run, le estás diciendo a la computadora que ejecute las instrucciones que están en el programa. Los resultados del programa los puedes ver en la pantalla blanca que está debajo, en la pestaña result\nAhora explicaremos parte del código que tenemos en el archivo main.py\nBibliotecas (Library) e instrucciones \u0026ldquo;import\u0026rdquo; Mira el inicio del código. Ahí puedes ver la siguiente línea\nimport turtle Esta instrucción nos permite toda la funcionalidad para dibujar que proporciona la biblioteca turtle. Una biblioteca es el lugar donde se agrupan en Python las instrucciones relacionadas a un tema en particular. Hay bibliotecas para hacer documentos, otras para conectarse a internet, otras para hacer operaciones matemáticas. turtle es una biblioteca para dibujar y que podemos controlar a través de las instrucciones que le demos.\nComentarios (Comments) La línea gris que empieza con # se llama comentario. Estos son notas en el código que nos ayudan a explicar qué está pasando. Como los comentarios son ignorados por la computadora, suelen ser usados para que otros puedan entender lo que nuestro código está haciendo.\n Introducción - Dibujando una línea de color Ante de que Alex pueda aprender a crear una colmena, él debe aprender primero cómo dibujar una línea. Haremos esto en dos partes.\nPrimero, necesitamos decirle a la tortuga qué color queremos usar para dibujar la línea. Para hacerlo de color naranja (orange in inglés) esta es la instrucción:\nturtle.color(\u0026quot;orange\u0026quot;) Intentemos entender esta línea de código en más detalle.\nCadenas (Strings) Todo lo que veas entre comillas \u0026ldquo;\u0026quot; se llama cadena o string. Un string es solo una secuencia de caracteres, es decir, de números, letras o símbolos.\nEn el código que escribimos arriba \u0026quot;orange\u0026quot; es un string. Otros ejemplos de string pueden ser \u0026quot;123\u0026quot;, \u0026quot;abc!\u0026quot; o \u0026quot;green\u0026quot;. ¡Ojo!, 123, abc! and green NO son strings ¡porque no tienen comillas!arks!\nMétodos turtle.color() es un método. Usamos los métodos para hacer que la tortuga haga ciertas acciones. En este caso, turtle.color() está cambiando el color con el que va a dibujar. Nosotros le dijimos que cambiara su color original por naranja (orange) cuando mandamos el string \u0026quot;orange\u0026quot; como un argument.\nArgumentos Los argumentos son los valores que le pasamos a los métodos. En nuestro ejemplo, turtle.color() necesita un argumento que represente el nombre del color que va a usar la tortuga, así que pasamos \u0026quot;orange\u0026quot; como un argument al método. Podríamos usar otro color pero tiene que ser un color que el método entienda. Los colores que reconoce son \u0026quot;red\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;purple\u0026quot;, \u0026quot;black\u0026quot;, \u0026quot;pink\u0026quot;, y \u0026quot;gray\u0026quot;. Si mandamos algún color diferente, el método no lo reconocerá y usará el color que tenía al inicio: negro.\n Ahora que ya escogimos el color que queremos, ¡ya podemos dibujar la línea! Para dibujar la línea tenemos dos métodos que podemos usar:\nturtle.forward(50) turtle.backward(50) turtle.forward(50) hará que la tortuga se mueva hacia adelante 50 pixeles y dibujará la línea en esa dirección mientras que turtle.backward(50) hará lo mismo pero hacia atrás.\nPixeles Una imagen está compuesta por miles o millones de pixeles. Un pixel es una unidad de medida para las imagenes digitales. Imagínalo como cada uno de los pequeños puntos de los que está hecha una imagen.\nEnteros (Integers) Un integer es sólo un número, ya sea negativo o positivo. En nuestro ejemplo, tanto turtle.forward() como turtle.backward() necesitan un entero como argumento. Cuando escogimos el color necesitabamos un string pero esta vez necesitamos un entero. Esto es porque el argumento representa el número de pixeles que se moverá la tortuga en la dirección que le indicamos. No tendría sentido decirle que se mueva \u0026quot;orange\u0026quot; pixeles, ¿o sí?\nPara que la tortuga se mueva hacia adelante el código debería verse así:\nimport turtle turtle.color(\u0026quot;orange\u0026quot;) turtle.forward(50) Copia las líneas de arriba, pégalas en el archivo main.py que teníamos al inicio, y da click en Run.\n Como ejercicio, trata de entender que hace la siguiente línea de código. Después pégala al final del archivo main.py y vuélvelo a correr.\nturtle.shape(\u0026quot;turtle\u0026quot;) ¡AYUDA! No se ve nada en la pantalla Si, después de presionar el botón Run, no logras ver nada en la pestaña result, revisa si hay una x roja en la pestaña console. Si la ves, es porque tienes errores en el código. Pídele ayuda al instructor par revisar tu código.\nMientas tanto puedes revisar lo siguiente:\n No uses letras mayúsculas. Asegúrate que ninguna línea que hayas escrito tenga espacios al inicio. Revisa que el color que hayas escogido esté entre comillas y que esté entre os paréntesis del commando turtle.color().   Actividad 1 - Dibujando un cuadrado ¡Muy bien! Has ayudado a Alex a dibujar una línea. Ahora demos un paso más y dibujemos un cuadrado. Para dibujarlo, necesitamos seguir los siguientes pasos:\n Ir hacia adelante 50 pixeles. Girar a la izquierda 90 grados. Ir hacia adelante 50 pixeles. Girar a la izquierda 90 grados. Ir hacia adelante 50 pixeles. Girar a la izquierda 90 grados. Ir hacia adelante 50 pixeles.  Recuerda que debes usar turtle.forward() para dibujar líneas. Para girar 90 grados necesitas pasar 90 como argumento al método turtle.left():\nturtle.left(90)  Activity 2 - Simplificando el código con ciclos (loops) ¡Genial! Dibujaste un cuadrado. ¿Pero notas cómo estamos escribiendo las mismas líneas una y otra vez? Tuvimos que repetir las instrucciones para dibujar una línea y dar la vuelta cuatro veces. ¿No sería genial que en vez de dar todas las instrucciones le dijeramos al programa que repita cuatro veces lo qu ele dijimos? ¡Intentémoslo!\nPara hacer esto tenemos que usar CICLOS. Un ciclo ejecuta un grupo de instrucciones varias veces. Miremos este ejemplo donde se hace un triángulo:\nfor i in range(3): turtle.forward(50) turtle.left(120) Intentemos entender lo que hace este código. for i in range(3): esta sentencia le dice al programa que las intrucciones que están debajo deben correrse dentro de un ciclo. range(3) dice cuántas veces va a repetirse el código (3 veces en este caso). La letra i es una variable y la usamos para llevar la cuenta de cuántas veces hemos corrido el ciclo.\nLa sintaxis \u0026ldquo;tricky\u0026rdquo; de Python - Parte 1 La Sintaxis es la forma en que escribimos los programas para hacerlos entendibles. Cuando hablamos español tenemos reglas (ortografía, gramática, etc) para podernos entender. El lenguaje Python tiene algo parecido para que la computadora pueda entender el código que escribimos.\nPrimero, notemos que al final de la línea que empieza con for agregamos dos punts (:); esto significa que la siguiente línea será parte del ciclo for. Si no ponemos los dos puntos, la computadora no sabrá qué hacer.\nFíjate que la siguiente línea tiene unos espacios en blanco, un \u0026ldquo;tab\u0026rdquo; le llamamos. Este tab le dice a la computadora que las sentencias deben de considerarse dentro del ciclo.\nAs well, we added a tab in front of some lines of code in the example above. The tab tells the computer these statements are considered a part of the for loop.\nPara dar en ejemplo de lo improtante que es poner el tab, veamos el siguiente código. Podemos ver que le quitamos el tab a la línea turtle.left(120) así que el código no funcionará como esperamos. El código repetirá la línea turtle.forward(50) tres veces y obteneremos una larga línea recta.\nfor i in range(3): turtle.forward(50) turtle.left(120) \n Bueno, ahora tomemos el código que teníamos y modifiquemoslo un poco para dibujar un cuadrado en vez de un triángulo. Como pista, puedes volver a revisar lo que hicimos en la Avtividad 2.\n Actividad 3 - Dibujar un hexágono ¡Buen trabajo! Acabas de dibujar tu primera figura con Python y Turtle. Hagamos otros pequeños cambios al código que escribimos para hacer el cuadrado e intentemos hacer un hexágono. Alex es una abeja así que después de todo, él necesita dibujar hexágonos para crear su colmena.\nPiensa en cuántos lados tiene un hexágono. Si divides los 360° que tiene un círculo entre el número de lados del hexágono, tendrás los grados del ángulo para hacer tu nueva figura.\n Actividad 4 - Simplificando el código con funciones Ya dibujamos un hexágono. Pero es sólo uno de los muchos que necesita para construir su colmena. Una vez más parece we tendríamos que repetir el código varias veces para dibujar muchos hexágonos. Afortunadamente no tenemos qué hacerlo. ¡Las funciones vienen a nuestro rescate!\nFunciones Una función es una manera de agrupar líneas de código para hacer algo. Por ejemplo, turtle.forward(50) mueve la tortuga hacia delante 50 paso y turtle.left(120) gira la tortuga 120 grados hacia la izquierda. ¿Y qué pasaría si siempre quisieramos hacer esas dos cosas juntas? Podríamos ponerlas en una función que se llame draw_line() para que cada que mandemos llamar a esa función esas dos acciones juntas sucedan.\n Este es un ejemplo de la definición de funcion y cómo se usa\ndef draw_line(): turtle.forward(50) turtle.left(120) La primera línea se llama cabecera o header. La palabra def le dice a la computadora que estamos definiendo una función. Después le pone a la función un nombre, en este caso draw_line. Finalmente, no olvidemos esto que va al final: ():, que le dice a la computadora que estamos empezando el cuerpo de la función.\nMaterial extra : Parámetros Dentro de los paréntesis () solemos poner los parámetros de la función. Un parámetro es un dato de entrada que le damos a la función para que esta la use para generar una salida. Por ejemplo, para hacer una suma necesitamos dos dígitos. Cada uno de estos dígitos sería un parámetro. En nuestro ejemplo no vamos a usar parámetros así que vamos a dejar los paréntesis en blanco.\n Similar a un ciclo for, lo que sea que queramos que la función ejecute debe tener un tab el inicio.\nPero no basta sólo con crearla sino que hay que mandarla llamar. Esto se hace escribiendo el nombre de la función seguido de paréntesis:\ndef draw_line(): turtle.forward(50) turtle.left(120) draw_line() # Aquí llamamos a la función A esto se le llama una llamada de la función draw_line(). Una llamada corre el código que tiene dentro la función que estamos invocando.\nSi nos imaginamos la función como una recete, una llamada a una función es como hacer la receta.\nTips  Siempre asegúrate de que los nombres de tus funciones sean descriptivos. Es decir que digan qué hace la función. Las llamadas a tu función siempre deben estar escritas más abajo que la definición de tu función. \n La sintaxis \u0026ldquo;tricky\u0026rdquo; de Python - Parte 2 Notemos que las funciones usan una sintaxis similar a la que usan los ciclos for: tienes que poner el símbolo : al final de la línea donde se declara la función y todas las líneas que estén dentro de la función deben empezar con dos espacios.\n¿Pero qué pasaría si necesitaramos un ciclo for dentro de nuestra función? Entonces hay que combinar las reglas. A continuación hay un ejemplo de cómo poner un ciclo for dentro de una función:\ndef draw_line(): for i in range(3): turtle.forward(50) ¿Te fijas cómo la línea turtle.forward(50) tiene dos tabs al inicio? Esto es porque ocupa un tab por estar dentro del ciclo for y otro tab por estar dentro de la función.\n Intentemos ahora crear nuestra propia función y llamémosla draw_hexagon(). Recuerda incluir la cabecera o header dela función, el número de lados que tiene un hexágono y el ángulo que debes usar: 60 grados.\n Actividad 5 - Dibujar la colmena ¡Llegamos a la prueba final! Vamos a crear la colmena para que Alex viva en ella. Afortunadamente una colmena es cimplemente 6 hexágonos así que podemos usar lo que ya aprendimos sobre funciones y ciclos para crear la colmena.\nEn esta actividad primero crearemos una función llamada draw_honeycomb(). Dentro del cuerpo de esta función pondremos un ciclo que se repita seis veces. Dentro del ciclo dibujaremos el primer hexágono con la función draw_hexagon() que ya tenemos construida. Ahora, movamos la tortuga un poco para que pueda pintar el siguiente hexágono. Para hacer eso necesitamos decirle al programa que al terminar de dibujar el hexágono se mueva hacia adelante 50 pixeles y luego gire a la derecha 60 grados.\nDibujar la colmena puede tomar un rato. Para que la tortuga vaya más rápido puedes modificar la velocidad a la que se mueve. Las velocidades van del 1 al 10 donde 1 es la más lenta y 10 la más rápida. Pon el siguiente código justo debajo de donde está la línea que cambia el color de la tortuga.\n turtle.speed(8)  Parte 2: Construyendo una Flor de Mandala ¡Buen Trabajo! Terminaste de construir un panal para la colmena de Alex, pero ¡Alex también necesita conseguir polen de las flores! ¿No seria agradable también agregar una flor a la imagen? En la parte 2, ¡crearemos una flor de mandala! (Permanece atento - te mostraremos como luce una flor de mandala.)\nActividad 6 - Moviendo la tortuga Nuestro primer paso es mover la tortuga a una nueva posición para dibujar la flor (¡no queremos dibujar la flor encima de la colmena!). Para hacer esto, primero necesitamos usar los siguientes métodos:\nturtle.penup() turtle.goto(x,y) turtle.pendown() turtle.penup() le dice a la tortuga que levante su pluma para que no dibuje mientras se mueve. Entonces, con turtle.goto(x,y), le estamos diciendo a la tortuga la posición donde debe moverse. Después de eso le decimos a la tortuga que vuelva a bajar su pluma usando turtle.pendown() para que pueda comenzar a dibujar nuevamente.\nPista La x y la y en el método turtle.goto() son las coordenadas x y y de la tortuga. Queremos cambiar las coordenadas x, y de la tortuga desde (0, 0) que es el centro de la imagen, a algún lugar un poco mas lejos para que la flor de mandala no cubra parte de la colmena.\n Para completar esta actividad, mueve a la tortuga a la posición (300, 300) sobre el lienzo. Esto la moverá a la esquina superior derecha.\n Actividad 7 - Dibujando una figura 8 ¡Excelente! Ahora hagamos la figura de un 8 como primer paso para hacer una flor de mandala! Una figura de un 8 son solo dos círculos opuestos entre sí. Para hacer esto podemos hacer uso del método turtle.circle(x), el cual toma un entero x como el radio del círculo. (Puede recordar que radio * 2 es que tan ancho es el circulo.) Tener el radio como un argumento significa que podemos decidir qué tan grande o pequeño debe ser el círculo.\n import turtle turtle.circle(50) En el ejemplo anterior, el círculo es de 100 píxeles de ancho y es dibujado en sentido contrario a las manecillas del reloj. Si el argumento para turtle.circle() es negativo, entonces el círculo se dibuja en dirección de las manecillas del reloj y es opuesto a la versión original.\nUsando esta información, crea una nueva función llamada figure_8() que dibuje una figura de un 8.\n Actividad 8 - Creando una flor de mandala Hemos terminado de crear nuestra primera figura de un 8! Ahora podemos usar la función figure_8() para crear una flor de mandala! Una flor de mandala es muchas figuras 8 puestas encima de otras en ángulos diferentes. Entonces, para hacer esto necesitamos usar un\u0026hellip; lo has adivinado, un ciclo!\nCrea una nueva función llamada mandala_flower(). En el ciclo llamaremos la función figure_8() que escribimos anteriormente para crear una figura de un 8. Luego, hay que girar la tortuga a la izquierda o derecha un cierto número de grados (por ejemplo, 10 grados). Repita estos pasos muchas veces para hacer una flor de mandala; es una buena idea crear un ciclo que se repita al menos 35 veces.\n Actividad 9 - Coloreando tu flor de mandala Ahora que ya tenemos la forma de una flor de mandala, ¡es momento de colorearla! Aun vamos a utilizar el método turtle.color(); sin embargo esta vez vamos a utilizar un valor RGB en lugar un valor de color en cadena de texto, así que podemos producir una gran variedad de colores.\nColores RGB (Red-Green-Blue) En la escuela primaria, puede que recuerdes que al mezclar colores, puedes producir nuevos colores. Por ejemplo, la combinación de rojo y azul hace el purpura. También podemos cambiar la cantidad de rojo y azul mezclados para crear diferentes tonos de purpura. La computadora hace algo similar para producir colores. Al combinar varias intensidades de rojo, verde y azul, podemos crear colores más variados, tal como como azul polvo, amarillo dorado y rosa salmón. Click aqui para ver los colres y su forma correspondiente en hexadecimal.\nEl el método turtle.color(), podemos especificar argumentos enteros correspondientes a la cantidad de rojo, verde y azul a mezclar. Cada número entero debe estar entre 0 y 255 inclusivos. Un ejemplo puede ser turtle.color(30, 100, 238), que produce un tono azul oscuro.\n Actualiza tu flor de mandala para usar un color de tu preferencia. ¡Siéntete libre de experimentar con colores diferentes!\n Actividad 10 - Randomizar el color de los pétalos de tu flor de mandala Hemos establecido con éxito el color de la flor de mandala en un valor RGB. Ahora, exploremos cambiar el color de los pétalos individuales de la flor de mandala\nHaremos uso de la biblioteca random de python. El método random.randint() nos permite elegir un valor aleatorio para cada uno de los valores rojo, verde o azul. Para elegir un valor que esté entre 0 inclusivo y 256 exclusivo (en otras palabras, entre 0 y 255 inclusivo), necesitamos usar random.randint(0, 256).\nUsa random.randint(0, 256) tres veces para generar tres valores aleatorios y utilizalos en el método turtle.color(). ¡Ahora deberías poder ver una flor de mandala multicolor! ¡Esta es definitivamente una flor de la que Alex estaría interesado en recolectar néctar!\n ¡Felicidades! ¡Ayudaste a Alex a hacer un panal y una flor! ¡Ahora puede vivir feliz en su colmena y hacer mucha miel! Su imagen final debería verse así:\nActividad 11 - Ahora es tu turno! Si queda algo de tiempo, ¡Intenta dibujar tus propias formas y diseños! Has de tu imagen interesante usando varias formas y colores.\nClick aquí para abrir una ventana en blanco repl.it e iniciar tu propia creación.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/","title":"Nuevo Foundation Workshops","tags":[],"description":"","content":"Proyectos   Programando Frutas Musicales con Adafruit Una guía introductoria para crear sonidos usando Adafruit para aprender acerca del hardware\n   Python Turtle Aprender Python con Turtle\n  Pautas para colaboradores (en inglés)  Pautas para colaboradores Pautas para desarrolladores de sitios web  "},{"uri":"https://nuevofoundation.github.io/workshops/es/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://nuevofoundation.github.io/workshops/es/tags/","title":"Tags","tags":[],"description":"","content":""}]