[{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/using-repl-it/","title":"Usando Repl.It","tags":[],"description":"","content":"Para que Alex pueda vivir en una colmena, necesita aprender a construir un panal. Vamos a usar una biblioteca de Python que se llama turtle (tortuga) para dibujar el panal.\nUsando Repl.it Vamos a utilizar la herramienta Repl.it para jugar con nuestros códigos Python. Este es un ejemplo de una ventana interactiva como las que usaremos en todo el tutorial:\n Antes de empezar, entendamos como funciona esta ventana. El programa main.py contiene las intrucciones que la computadora va a ejecutar o \u0026ldquo;correr\u0026rdquo; (Run en inglés). Al presionar el botón Run, le estás diciendo a la computadora que ejecute las instrucciones que están en el programa. Los resultados del programa los puedes ver en la pantalla blanca que está debajo, en la pestaña result\nAhora explicaremos parte del código que tenemos en el archivo main.py\nBibliotecas (Library) e instrucciones \u0026ldquo;import\u0026rdquo; Mira el inicio del código. Ahí puedes ver la siguiente línea\nimport turtle Esta instrucción nos permite toda la funcionalidad para dibujar que proporciona la biblioteca turtle. Una biblioteca es el lugar donde se agrupan en Python las instrucciones relacionadas a un tema en particular. Hay bibliotecas para hacer documentos, otras para conectarse a internet, otras para hacer operaciones matemáticas. turtle es una biblioteca para dibujar y que podemos controlar a través de las instrucciones que le demos.\nComentarios (Comments) La línea gris que empieza con # se llama comentario. Estos son notas en el código que nos ayudan a explicar qué está pasando. Como los comentarios son ignorados por la computadora, suelen ser usados para que otros puedan entender lo que nuestro código está haciendo.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/starting-up/","title":"Empezando","tags":[],"description":"","content":"Empezando La meta de la actividad de hoy es aprender C# y usar tus nuevas habilidades a crear un juego de Adivina la palabra. Empezamos a configurar el juego.\nAbre tu browser favorito (como Edge, Firefox, Google Chrome, Internet Explorer), y navega a https://aka.ms/nuevoguesstheword. Tu pantalla debe aparecer así:\nVamos a ignorar unos de los detalles en esta pantalla, pero examinemos unos elementos básicos que se ven aquí. El archivo principal main.cs contiene código, o instrucciones para la computadora. Presionando el botón ‘run’, tú le dices a la computadora que debe ejecutar las instrucciones en el código. Cualquier resultado de ejecutar el código se verá al lado derecho, llamado la consola.\nSi presionas ‘run’ en este momento, ¡verás que nada pasa! Tu trabajo es ayudarle a Nuvi terminar el código de este juego.\nPresiona el botón ‘fork’ para crear una copia tuya de este código. Harás estas actividades sol@, pero siempre hará ayuda disponible si la necesitas.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/adventure/time-to-create/","title":"Hora de crear","tags":[],"description":"","content":"¡Es hora de empezar a crear nuestras propias historias con todas las habilidades que hemos aprendido hoy! ¡La pregunta que estamos abordando hoy es cómo involucrar a la audiencia con la historia, y la respuesta es con código!\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/adafruit/the-components/","title":"Los Componentes","tags":[],"description":"","content":"Los componentes que utilizaremos para el proyecto se listan a continuación. Asegúrate de tener todo esto antes de comenzar:\n Una Adafruit Un cable USB-C a USB Dos cables de pinza cocodrilo de cualquier color Dos naranjas  "},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/the-basics/","title":"Los basicos - Dibujando una línea de color","tags":[],"description":"","content":"Ante de que Alex pueda aprender a crear una colmena, él debe aprender primero cómo dibujar una línea. Haremos esto en dos partes.\nPrimero, necesitamos decirle a la tortuga qué color queremos usar para dibujar la línea. Para hacerlo de color naranja (orange in inglés) esta es la instrucción:\nturtle.color(\u0026quot;orange\u0026quot;) Intentemos entender esta línea de código en más detalle.\nCadenas (Strings) Todo lo que veas entre comillas \u0026ldquo;\u0026quot; se llama cadena o string. Un string es solo una secuencia de caracteres, es decir, de números, letras o símbolos.\nEn el código que escribimos arriba \u0026quot;orange\u0026quot; es un string. Otros ejemplos de string pueden ser \u0026quot;123\u0026quot;, \u0026quot;abc!\u0026quot; o \u0026quot;green\u0026quot;. ¡Ojo!, 123, abc! and green NO son strings ¡porque no tienen comillas!arks!\nMétodos turtle.color() es un método. Usamos los métodos para hacer que la tortuga haga ciertas acciones. En este caso, turtle.color() está cambiando el color con el que va a dibujar. Nosotros le dijimos que cambiara su color original por naranja (orange) cuando mandamos el string \u0026quot;orange\u0026quot; como un argument.\nArgumentos Los argumentos son los valores que le pasamos a los métodos. En nuestro ejemplo, turtle.color() necesita un argumento que represente el nombre del color que va a usar la tortuga, así que pasamos \u0026quot;orange\u0026quot; como un argument al método. Podríamos usar otro color pero tiene que ser un color que el método entienda. Los colores que reconoce son \u0026quot;red\u0026quot;, \u0026quot;orange\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;blue\u0026quot;, \u0026quot;purple\u0026quot;, \u0026quot;black\u0026quot;, \u0026quot;pink\u0026quot;, y \u0026quot;gray\u0026quot;. Si mandamos algún color diferente, el método no lo reconocerá y usará el color que tenía al inicio: negro.\n Ahora que ya escogimos el color que queremos, ¡ya podemos dibujar la línea! Para dibujar la línea tenemos dos métodos que podemos usar:\nturtle.forward(50) turtle.backward(50) turtle.forward(50) hará que la tortuga se mueva hacia adelante 50 pixeles y dibujará la línea en esa dirección mientras que turtle.backward(50) hará lo mismo pero hacia atrás.\nPixeles Una imagen está compuesta por miles o millones de pixeles. Un pixel es una unidad de medida para las imagenes digitales. Imagínalo como cada uno de los pequeños puntos de los que está hecha una imagen.\nEnteros (Integers) Un integer es sólo un número, ya sea negativo o positivo. En nuestro ejemplo, tanto turtle.forward() como turtle.backward() necesitan un entero como argumento. Cuando escogimos el color necesitabamos un string pero esta vez necesitamos un entero. Esto es porque el argumento representa el número de pixeles que se moverá la tortuga en la dirección que le indicamos. No tendría sentido decirle que se mueva \u0026quot;orange\u0026quot; pixeles, ¿o sí?\nPara que la tortuga se mueva hacia adelante el código debería verse así:\nimport turtle turtle.color(\u0026quot;orange\u0026quot;) turtle.forward(50) Copia las líneas de arriba, pégalas en el archivo main.py que teníamos al inicio, y da click en Run.\n Como ejercicio, trata de entender que hace la siguiente línea de código. Después pégala al final del archivo main.py y vuélvelo a correr.\nturtle.shape(\u0026quot;turtle\u0026quot;) ¡AYUDA! No se ve nada en la pantalla Si, después de presionar el botón Run, no logras ver nada en la pestaña result, revisa si hay una x roja en la pestaña console. Si la ves, es porque tienes errores en el código. Pídele ayuda al instructor par revisar tu código.\nMientas tanto puedes revisar lo siguiente:\n No uses letras mayúsculas. Asegúrate que ninguna línea que hayas escrito tenga espacios al inicio. Revisa que el color que hayas escogido esté entre comillas y que esté entre os paréntesis del commando turtle.color().   "},{"uri":"https://nuevofoundation.github.io/workshops/es/adafruit/building-the-dj-station/","title":"Construyendo la estación de DJ","tags":[],"description":"","content":"Conectando las naranjas Toma una naranja y uno de tus cables. Abre una de las pinzas de cocodrilo e inserta la mitad inferior en la naranja, dejando la parte superior de la pinza en el exterior. Esto es más fácil de hacer si lo insertas a la mitad de la parte inferior de la naranja. En ll mismo lugar donde comenzarías a pelar si fueras a comer la naranja.\nRepite la operacion con la segunda naranja y tu otro cable.\nConecta una naranja a A1 y la otra a A2 Así es como tiene que verse cuando termines. Usando tu cable USB, conecta el lado pequeño al chip. Entrará en el puerto plateado.\n¡Ahora creemos el programa antes de conectar nuestro chip a la computadora! Asegúrate de que tu computadora esté silenciada antes de comenzar.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/writing-to-console/","title":"Escribiendo a la consola","tags":[],"description":"","content":"Escribiendo a la consola Console.WriteLine le dice a la computadora que debe imprimir la frase dentro de los paréntesis () a la consola..\nTrabajando junt@s  En la repl.it ventana abajo, presiona ‘run’. Vea que Hello World se imprimió en la ventana a la derecha. Sin quitar las comillas, intenta a cambiar Hello World a otra frase. Presiona ‘run’ a ver si algo cambia. Añade otra línea de Console.WriteLine debajo de la primera línea para imprimir una segunda frase debajo de la primera frase. Presiona ‘run’ a ver si las dos frases se imprimen. Si ves cualquier texto rojo, pide ayuda.  \n Vamos a usar la habilidad de imprimir a la consola muchísimo en las siguientes secciones, ¡entonces asegúrate que entiendes como hacerlo antes de continuar!\n¡Auxilio! ¡Me salió un montón de texto rojo! Si ves cualquier texto rojo, ¡has encontrado unos errores! Por favor pide ayuda o fíjate en la página de ‘debugging’ al final de este taller. Tenga cuidado con los próximos errores comunes mientras que escribes código en C#:\n La c en Console, la w y la l en WriteLine se escriben en mayúscula. Hay un punto y comilla ; al final de cada línea. Asegúrate que la frase que quieres imprimir está dentro de comillas, y que la frase está entre paréntesis. No borrar ningún paréntesis { o }. \n "},{"uri":"https://nuevofoundation.github.io/workshops/es/adventure/story-boarding/","title":"Sección 1: Diseñando del Guion (Story Boarding)","tags":[],"description":"","content":"Para empezar, saque un pedazo de un papel y comience a \u0026ldquo;diseñar el guion\u0026rdquo;. ¿Qué significa eso? Con el fin de desarrollar una gran historia que permite al lector elegir entre opciones, uno puede esbozar el flujo de su historia. ¡Este es un gran paso de planificación, que le ayudará tremendamente una vez que comience a codificar! Empezaría con las 3 o 4 decisiones principales que tu protagonista va a tomar en la historia. A partir de ahí dibuja flechas para saber cómo las diferentes elecciones que hace tu protagonista afectan la historia.\nEjemplo de Nuvi ¡Aquí un ejemplo de cómo diseñar el guion! Las 4 opciones principales que tomará el protagonista son:\n ¿Caminará a casa desde la práctica de robótica? ¿Va a andar en bicicleta a casa de la práctica de robótica? ¿Jugará al fútbol con sus amigos en casa? ¿Irá a nadar con sus amigos a casa?  Aquí está el tablero de historias:\nAhora, es genial marcar la sección diferente del tablero de historias para que coincida con diferentes conceptos de codificación que hemos aprendido. Si nuestra historia necesita tomar una decisión, nuestro código usamos declaraciones if-else. Si estamos pidiendo a la audiencia que nos dé información para tomar decisiones en nuestra historia, utilizaremos la entrada del usuario (user input). ¡La historia real que la audiencia leerá sera basada en las variables del usuario!\nEsto es lo que parece:\n¡Es muy útil anotar tu diseño del guion para que sepas qué temas relacionados con el código podemos usar! Vemos que la línea de la historia se compone de variables de texto o string. La entrada del usuario puede ser el lector que escribe si desea \u0026ldquo;caminar\u0026rdquo; o \u0026ldquo;bicicleta\u0026rdquo; o elegir \u0026ldquo;fútbol\u0026rdquo; o \u0026ldquo;nadar\u0026rdquo;. ¡El usuario puede elegir su historia basada en la entrada que dan a la computadora! Los diferentes caminos que Nuevi puede tomar son una serie de decisiones. Por suerte, aprendimos a usar declaraciones if–else, por lo que el Nuevi puede elegir fácilmente diferentes caminos que la historia puede tomar!\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/activity-1/","title":"Actividad 1 - Dibujando un cuadrado","tags":[],"description":"","content":"¡Muy bien! Has ayudado a Alex a dibujar una línea. Ahora demos un paso más y dibujemos un cuadrado. Para dibujarlo, necesitamos seguir los siguientes pasos:\n Ir hacia adelante 50 pixeles. Girar a la izquierda 90 grados. Ir hacia adelante 50 pixeles. Girar a la izquierda 90 grados. Ir hacia adelante 50 pixeles. Girar a la izquierda 90 grados. Ir hacia adelante 50 pixeles.  Recuerda que debes usar turtle.forward() para dibujar líneas. Para girar 90 grados necesitas pasar 90 como argumento al método turtle.left():\nturtle.left(90)  "},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/comments/","title":"Comentarios","tags":[],"description":"","content":"Comentarios Desarrollador@s frecuentemente tienen que colaborar con otr@s desarrollador@s. Escribiendo comentarios es una manera fácil que desarrollador@s usan para comunicarse. La computadora ignora los comentarios, entonces comentarios también son una manera fácil para decirle a la computadora que no debe ejecutar alguna línea de código. Hay dos maneras de crear comentarios:\n Para comentar una línea, añade // al inicio de la línea. Por ejemplo:  // Esto es una sola línea de comentario. Para comentar varias líneas de código a la vez, indica el inicio del comentario con /* y añade */ al final del comentario. Por ejemplo:  /* Esto es un comentario que ocupa varias líneas. Esta línea también es parte del mismo comentario. */ Para quitar un comentario (o cambiar el comentario a código que la computadora sí ejecutará), simplemente borra el // de un comentario de una sola línea, o el /* y */ de un comentario de varias líneas.\nTrabajando junt@s  Añade // al inicio de Console.WriteLine(\u0026quot;Hello World\u0026quot;);. Después de presionar run, asegúrate que Hello World no se imprimió a la consola. Borra el // y añade /* y */ a cada lado de Console.WriteLine(\u0026quot;Hello World\u0026quot;);. Asegúrate que Hello World todavía no se imprime a la consola cuando presionas run. Borra /* , */ y presiona run. Hello World debe imprimirse en la consola.   Durante las actividades de hoy vas a ver varios comentarios que ocupan varias líneas y unos comentarios // TODO comments. Estos comentarios nos guiarán a completar el juego de Adivina la palabra, entonces asegúrate que entiendes como cambiar código a un comentario y vise versa.\n "},{"uri":"https://nuevofoundation.github.io/workshops/es/adafruit/creating-the-program/","title":"Creando el programa","tags":[],"description":"","content":"Abre tu navegador de internet favorito (como Edge, Firefox, Google Chrome, Internet Explorer) y entra a https://aka.ms/oranges.\nTu pantalla debería verse así:\nDefiniendo las variables Hoy vamos a usar naranjas para decirle a nuestra Adafruit cuándo hacer ruido. Lo primero que debemos hacer es darle a la computadora un nombre para cada naranja y dónde buscar lo que están diciendo. Hacemos la primera parte definiendo una variable. Haz clic en la sección que dice VARIABLES, es de color salmón y es el séptimo si cuentas desde la parte superior. Luego define una variable haciendo clic en Make a variable y dale un nombre. Haz esto dos veces. En estas imágenes de ejemplo puedes ver como nosotros nombramos las nuestras como analog1 y analog2, pero puedes llamarlas como quieras.\nInterpretando las entradas Ahora que tenemos un nombre que nuestra computadora conoce para nuestras naranjas, debemos dejar que Adafruit sepa cómo entenderlas. Hay dos tipos de entradas: digitales y analógicas. Los interruptores de luz y los botones de encendido son ejemplos de entradas digitales. Están activados o desactivados, son 1 o 0. Las entradas analógicas son como un atenuador de luz o un botón de volumen. Tienen más opciones para los valores. Nuestras naranjas serán entradas analógicas y cuánto las toquemos o exprimiremos cambiará el valor que mandan al Adafruit.\nHaz clic nuevamente en la sección Variables. Esta vez deberías poder ver más opciones ya que hemos definido nuestras dos variables. Arrastra uno de los bloques \u0026ldquo;set ___ to __\u0026rdquo; hacia bloque verde \u0026ldquo;forever\u0026rdquo; en nuestro espacio de trabajo. Usando la flecha blanca hacia abajo, cambia el primer espacio en blanco a \u0026ldquo;analog1\u0026rdquo; o al nombre que hayas escogido para tu primer variable.\nAhora haz clic en la opción \u0026ldquo;ADVANCED\u0026rdquo; y luego haz clic en PINS. Busca el bloque \u0026ldquo;analog read pin __\u0026quot;, es el tercero desde la parte superior e insértalo donde está el 0 en nuestro bloque \u0026ldquo;set analog1 to 0\u0026quot;. Para insertarlo en esa ranura, arrástralo para que se mueva sobre el cero, verifica que el 0 esté resaltado en amarillo y luego suelte el mouse (o el panel táctil). Deberías ver que el bloque se extiende para acomodar el bloque. Si no ves esto, intenta nuevamente.\nUna vez que hayas hecho eso, tu espacio de trabajo debería verse como en la imagen de arriba. Repite este proceso nuevamente pero esta vez usa las flechas blancas hacia abajo para seleccionar analog2 y A2. En la siguiente imagen está como debe de quedar tu espacio de trabajo.\nCreando nuestros bucles, ciclos, iteraciones o como se traduzca \u0026ldquo;loop\u0026rdquo; en tu país Ahora que nuestra computadora sabe cómo llamar a nuestras naranjas y cómo entender lo que están diciendo, creemos un bucle que verifique cuándo estamos sosteniendo nuestra naranja. Haz clic en la sección LOGIC y arrastra el bloque \u0026ldquo;If ____ then\u0026rdquo; para colocarlo debajo de tus bloques de variables.\nVolvamos al ejemplo de la perilla de volumen para comprender la comparación que vamos a hacer en nuestro bucle. Cada persona tiene un punto en el que le gusta escuchar su música para poder disfrutarla. Este punto también es cierto para nuestras naranjas. Le dirán a la computadora un número cuando nadie las toque y un número más bajo cuando las toquemos. El truco es encontrar el punto intermedio para que solo hagamos ruido cuando queramos.\nPara configurar lo anterior, ve a la sección LOGIC nuevamente y toma el bloque hexagonal \u0026ldquo;**__ \u0026lt;__**\u0026rdquo; que es el segundo en la subsección \u0026ldquo;**Comparison**\u0026quot;. Coloca el bloque sobre el \u0026ldquo;**true**\u0026rdquo; en el bloque \u0026ldquo;**if __ then**\u0026quot;. Asegúrate de ver el resaltado amarillo antes de colocarlo allí. Revisa la imagen a continuación para verificar tu espacio de trabajo\nAhora vamos a poner lo que estamos comparando. Vuelve a la sección VARIABLES, toma la variable analog1 y colóquela en la primer espacio. Luego haz clic en el segundo espacio y escribe 40. Este 40 debería ser un buen punto adecuado para la mayoría de las personas. Si al final, la naranja hace ruido sin que la toques, puedes volver a este paso y aumentar el número. Si tu naranja no hace ruido cuando la toques, puedes regresar y aumentar el número. Por ahora, vamos a dejarlo en 40.\n¡Ahora podemos elegir nuestra música! Haz clic en la sección MUSIC y arrastra el segundo bloque \u0026ldquo;play _____ until done\u0026rdquo; en nuestro bloque If-Then. Puedes hacer click en la flecha hacia abajo para probar otros sonidos.\nAhora queremos repetir estos últimos pasos para la variable analog2. Una vez que hagas esto, tu espacio de trabajo se verá como la imagen de abajo (con tus opciones de música).\nDivitiéndonos con Luces (Time Permitting) The Adafruit chip has a lot of lights on it! They’re super fun to play with so let’s add a bit of color to our sounds so we can both see and hear the difference when we touch our oranges. Click on the LIGHT section and drag the “Set all Pixels to ___” block into our two If-Then chunks. You’ll want to drop them in right before we play a sound. You can click on the color portion to change which color you want to display.\n¡El chip Adafruit tiene muchas luces! Son súper divertidos para jugar, así que agreguemos un poco de color a nuestros sonidos para que podamos ver y escuchar la diferencia cuando tocamos nuestras naranjas. Haz clic en la sección LIGHT y arrastre el bloque \u0026ldquo;Set all Pixels to ___\u0026rdquo; en nuestros dos bloques If-Then. Deberás colocarlos justo antes de que reproduzcamos un sonido. Puedes hacer clic en la porción de color para cambiar el color que desea mostrar. "},{"uri":"https://nuevofoundation.github.io/workshops/es/adventure/story-board-code/","title":"Sección 2: ¡Pasar del diseño del guion (Story Board) al código!","tags":[],"description":"","content":"Es hora de abrir repl.it. ¡Ahora es el momento de crear, vamos a ser creativos!\nPuedes seguir trabajando en la historia de Nuvi:\n #Here is Nuvi\u0026#39;s Adventure! start = \u0026#34;Nuvi esta apunto de abandonar la practica de robotica.¿Debe ir a casa caminando o en bicicleta?\u0026#34; walk = \u0026#34;Cuando Nuvi caminaba para ir a casa se encontró con su amiga Julie. Quieren jugar al aire libre ¿deben nadar o jugar futbol?\u0026#34; bike = \u0026#34;¡oh no! Nuvi cayó de su Bicicleta, por suerte su amiga Julie estaba allí. Curó sus heridas y están listas para jugar ¿Deben nadar o jugar futbol?\u0026#34; soccer = \u0026#34;¡Nuvi anota un gol! woow\u0026#34; swim = \u0026#34;¡Nuvi y Julie hacen un concurso de balas de cañon en la oficina!\u0026#34; print(start) walkOrBike = input(\u0026#34;Elige \u0026#39;Caminar\u0026#39;o \u0026#39;Bicicleta\u0026#39;\\n\u0026#34;) if(walkOrBike == \u0026#39;Caminar\u0026#39;): print(walk) else: print(bike) swimOrSoccer = input(\u0026#34;Elige \u0026#39;Nadar\u0026#39;o \u0026#39;Jugar Futbol\u0026#39;\\n\u0026#34;) if(swimOrSoccer == \u0026#39;Nadar\u0026#39;): print(swim) else: print(soccer) Ahora tu puedes trabajar en tu propio codigo para elegir tu propio juego de \u0026lsquo;Elegir tu aventura\u0026rsquo;:\n #Esta es una plantilla para elegir tu propia aventura #Asegúrate de enumerar tus cuatro opciones que el protagonista va a tomar. Los llamaremos choice_1, choice_2, choice_3, choice_4 -  #¡Siéntase libre de cambiar los nombres para que encajen con su historia! #Aquí hay una variable de cadena llamada start - esta puede ser la introducción a su historia (el primer paso de su tablero de historias).  #¡Llénalo con tu historia! start = \u0026#34;\u0026#34; #¡Aquí están las cuatro opciones diferentes que el protagonista puede tomar! Se asegura de completar cada elección con su propia historia.  #El usuario puede elegir entre choice_1 y choice_2 después de la parte inicial de la historia. ¡A continuación, el usuario puede elegir entre  #choice_3 y choice_4 para la segunda mitad de la historia! Rellena las variables con tu propia historia. ¡Veamos lo creativos que podemos llegar a ser! choice_1 = \u0026#34;\u0026#34; choice_2 = \u0026#34;\u0026#34; choice_3 = \u0026#34;\u0026#34; choice_4 = \u0026#34;\u0026#34; print(start) firstChoice = input(\u0026#34;Choose \u0026#39;choice_1\u0026#39;or \u0026#39;choice_2\u0026#39;\u0026#34;) if(firstChoice == \u0026#39;choice_1\u0026#39;): print(choice_1) else: print(choice_2) secondChoice = input(\u0026#34;Choose \u0026#39;choice_3\u0026#39;or \u0026#39;choice_4\u0026#39;\u0026#34;) if(secondChoice == \u0026#39;choice_3\u0026#39;): print(choice_3) else: print(choice_4) ¡O puede empezar de cero y hacerlo suyo! ¡Solo ve a repl.it y empieza a contar historias!\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/activity-2/","title":"Actividad 2 - Simplificando el código con ciclos (loops)","tags":[],"description":"","content":"¡Genial! Dibujaste un cuadrado. ¿Pero notas cómo estamos escribiendo las mismas líneas una y otra vez? Tuvimos que repetir las instrucciones para dibujar una línea y dar la vuelta cuatro veces. ¿No sería genial que en vez de dar todas las instrucciones le dijeramos al programa que repita cuatro veces lo qu ele dijimos? ¡Intentémoslo!\nPara hacer esto tenemos que usar CICLOS. Un ciclo ejecuta un grupo de instrucciones varias veces. Miremos este ejemplo donde se hace un triángulo:\nfor i in range(3): turtle.forward(50) turtle.left(120) Intentemos entender lo que hace este código. for i in range(3): esta sentencia le dice al programa que las intrucciones que están debajo deben correrse dentro de un ciclo. range(3) dice cuántas veces va a repetirse el código (3 veces en este caso). La letra i es una variable y la usamos para llevar la cuenta de cuántas veces hemos corrido el ciclo.\nLa sintaxis \u0026ldquo;tricky\u0026rdquo; de Python - Parte 1 La Sintaxis es la forma en que escribimos los programas para hacerlos entendibles. Cuando hablamos español tenemos reglas (ortografía, gramática, etc) para podernos entender. El lenguaje Python tiene algo parecido para que la computadora pueda entender el código que escribimos.\nPrimero, notemos que al final de la línea que empieza con for agregamos dos punts (:); esto significa que la siguiente línea será parte del ciclo for. Si no ponemos los dos puntos, la computadora no sabrá qué hacer.\nFíjate que la siguiente línea tiene unos espacios en blanco, un \u0026ldquo;tab\u0026rdquo; le llamamos. Este tab le dice a la computadora que las sentencias deben de considerarse dentro del ciclo.\nAs well, we added a tab in front of some lines of code in the example above. The tab tells the computer these statements are considered a part of the for loop.\nPara dar en ejemplo de lo improtante que es poner el tab, veamos el siguiente código. Podemos ver que le quitamos el tab a la línea turtle.left(120) así que el código no funcionará como esperamos. El código repetirá la línea turtle.forward(50) tres veces y obteneremos una larga línea recta.\nfor i in range(3): turtle.forward(50) turtle.left(120) \n Bueno, ahora tomemos el código que teníamos y modifiquemoslo un poco para dibujar un cuadrado en vez de un triángulo. Como pista, puedes volver a revisar lo que hicimos en la Avtividad 2.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/activity-1/","title":"Activitdad 1","tags":[],"description":"","content":"Actividad 1 Navega al código que contiene el juego GuessTheWord o Adivina la Palabra. Fíjate que Press 'run' on the top of the screen to play again. es la única cosa que se imprime a la consola. Agreguemos un mensaje de bienvenido para que el jugador sepa que esté jugando GuessTheWord o Adivina la Palabra.\nEncuentra // TODO (ACTIVITY 1) en el código. Añade una línea de código para imprimir Welcome to C# GuessTheWord o \u0026quot;Bienvenido al juego de C# AdivinaLaPalabra\u0026quot; a la consola. Si lo hiciste correctamente, veras el texto impreso en la consola después de presionar ‘run’.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/adafruit/downloading-your-program/","title":"Descargando el Programa","tags":[],"description":"","content":"En la parte inferior de tu espacio de trabajo, debería ver este botón rosado de descarga al lado del nombre de tu programa. Puedes asignarle un nombre a tu programa, aquí se llama adafruit_musicalfruit. Haz clic en el botón de descarga.\nDebe apareceruna ventana emergente, preguntando dónde guardar tu archivo. Lo usual es que abra apuntando a la carpeta Descargas; de lo contrario, ve a tu carpeta de descargas y guarda el archivo allí.\nAhora puedes conectar tu cable USB a la computadora. ¡Deberías poder ver algunas luces que prenden! Esto significa que tu chip está encendido y ejecuta el programa predeterminado. Vamos a reemplazar eso con nuestro programa. Haz clic en el pequeño botón de reinicio en el centro del chip. Las luces deben volverse rojas y luego verdes. Si las luces no se pusieron verdes, haz doble clic rápidamente en el botón de reinicio y espera unos segundos\nUna vez que las luces estén verdes, abre una ventana del Explorador de Windows (puedes abrir una apretando las teclas Windows + E al mismo tiempo)si no aparece ninguna. Ahora debería ver una unidad CPLAYBOOT. Aquí se muestra como la unidad D: pero podría ser E :, F :, etc.\nUna vez que hayas verificado que puedes ver este CPLAYBOOT, ve a la carpeta Descargas y busca el archivo que guardaste allí. Debes hacer clic y arrastrar ese archivo hasta que pase el mouse sobre CPLAYBOOT. Debería ver un texto emergente que dice \u0026ldquo;-\u0026gt; Mover a CPLAYBOOT\u0026rdquo;. Coloque el archivo allí para copiarlo en CPLAYBOOT\nUna vez que hayas dejado el archivo en el lugar correcto, las luces verdes se apagarán para indicar que ha programado con éxito tu Adafruit.\n¡FELICITACIONES! ¡Lo lograste!. Siéntase libre de regresar y ajustar los sonidos o su número mágico en las comparaciones "},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/activity-3/","title":"Actividad 3 - Dibujar un hexágono","tags":[],"description":"","content":"¡Buen trabajo! Acabas de dibujar tu primera figura con Python y Turtle. Hagamos otros pequeños cambios al código que escribimos para hacer el cuadrado e intentemos hacer un hexágono. Alex es una abeja así que después de todo, él necesita dibujar hexágonos para crear su colmena.\nPiensa en cuántos lados tiene un hexágono. Si divides los 360° que tiene un círculo entre el número de lados del hexágono, tendrás los grados del ángulo para hacer tu nueva figura.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/strings/","title":"Strings","tags":[],"description":"","content":"Strings Cualquier cosa que esté entre comillas se llama un string. Así se representan palabras o frases en las computadoras. Por ejemplo,\u0026quot;a\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;banana!\u0026quot;, y \u0026quot;Hello World\u0026quot; son strings, pero Hello World y 2 no son strings, porque no están entre comillas.\nPuedes combinar varios strings usando el operador de +. Por ejemplo::\n \u0026quot;Manzana\u0026quot; + \u0026quot;Piña\u0026quot; produce el string \u0026quot;ManzanaPiña\u0026quot;. \u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot; produce el string \u0026quot;Nuevo Foundation\u0026quot;.  Console.WriteLine(\u0026#34;Manzana\u0026#34; + \u0026#34;Piña\u0026#34;); Console.WriteLine(\u0026#34;Nuevo\u0026#34; + \u0026#34; \u0026#34; + \u0026#34;Foundation\u0026#34;); Trabajando junt@s En la ventana de repl.it debajo, empezamos el código con la línea Console.WriteLine(\u0026quot;Nuevo\u0026quot; + \u0026quot; \u0026quot; + \u0026quot;Foundation\u0026quot;);.\nHay muchas maneras de combinar strings. Por ejemplo, otra manera de imprimir Nuevo Foundation podría ser Console.WriteLine(\u0026quot;Nue\u0026quot; + \u0026quot;vo Fou\u0026quot; + \u0026quot;ndation\u0026quot;);.\nPensaremos de, por lo mínimo, una manera más de imprimir \u0026quot;Nuevo Foundation\u0026quot; usando dos + símbolos en cada declaración de Console.WriteLine. Verifica que Nuevo Foundation se imprima 3 veces. En otras palabras, tu consola debe aparecer así:\nNuevo Foundation Nuevo Foundation Nuevo Foundation   "},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/activity-4/","title":"Actividad 4 - Simplificando el código con funciones","tags":[],"description":"","content":"Ya dibujamos un hexágono. Pero es sólo uno de los muchos que necesita para construir su colmena. Una vez más parece we tendríamos que repetir el código varias veces para dibujar muchos hexágonos. Afortunadamente no tenemos qué hacerlo. ¡Las funciones vienen a nuestro rescate!\nFunciones Una función es una manera de agrupar líneas de código para hacer algo. Por ejemplo, turtle.forward(50) mueve la tortuga hacia delante 50 paso y turtle.left(120) gira la tortuga 120 grados hacia la izquierda. ¿Y qué pasaría si siempre quisieramos hacer esas dos cosas juntas? Podríamos ponerlas en una función que se llame draw_line() para que cada que mandemos llamar a esa función esas dos acciones juntas sucedan.\n Este es un ejemplo de la definición de funcion y cómo se usa\ndef draw_line(): turtle.forward(50) turtle.left(120) La primera línea se llama cabecera o header. La palabra def le dice a la computadora que estamos definiendo una función. Después le pone a la función un nombre, en este caso draw_line. Finalmente, no olvidemos esto que va al final: ():, que le dice a la computadora que estamos empezando el cuerpo de la función.\nMaterial extra : Parámetros Dentro de los paréntesis () solemos poner los parámetros de la función. Un parámetro es un dato de entrada que le damos a la función para que esta la use para generar una salida. Por ejemplo, para hacer una suma necesitamos dos dígitos. Cada uno de estos dígitos sería un parámetro. En nuestro ejemplo no vamos a usar parámetros así que vamos a dejar los paréntesis en blanco.\n Similar a un ciclo for, lo que sea que queramos que la función ejecute debe tener un tab el inicio.\nPero no basta sólo con crearla sino que hay que mandarla llamar. Esto se hace escribiendo el nombre de la función seguido de paréntesis:\ndef draw_line(): turtle.forward(50) turtle.left(120) draw_line() # Aquí llamamos a la función A esto se le llama una llamada de la función draw_line(). Una llamada corre el código que tiene dentro la función que estamos invocando.\nSi nos imaginamos la función como una recete, una llamada a una función es como hacer la receta.\nTips  Siempre asegúrate de que los nombres de tus funciones sean descriptivos. Es decir que digan qué hace la función. Las llamadas a tu función siempre deben estar escritas más abajo que la definición de tu función. \n La sintaxis \u0026ldquo;tricky\u0026rdquo; de Python - Parte 2 Notemos que las funciones usan una sintaxis similar a la que usan los ciclos for: tienes que poner el símbolo : al final de la línea donde se declara la función y todas las líneas que estén dentro de la función deben empezar con dos espacios.\n¿Pero qué pasaría si necesitaramos un ciclo for dentro de nuestra función? Entonces hay que combinar las reglas. A continuación hay un ejemplo de cómo poner un ciclo for dentro de una función:\ndef draw_line(): for i in range(3): turtle.forward(50) ¿Te fijas cómo la línea turtle.forward(50) tiene dos tabs al inicio? Esto es porque ocupa un tab por estar dentro del ciclo for y otro tab por estar dentro de la función.\n Intentemos ahora crear nuestra propia función y llamémosla draw_hexagon(). Recuerda incluir la cabecera o header dela función, el número de lados que tiene un hexágono y el ángulo que debes usar: 60 grados.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/activity-2/","title":"Actividad 2","tags":[],"description":"","content":"Actividad 2 Encuentra // TODO (ACTIVITY 2) en el código de GuessTheWord. Para el juego de Guess the Word game o Adivina la palabra, , vamos a dar la computadora un banco de palabras, y la computadora va a escoger una palabra al azar para el juego. Aunque ya hemos añadido las palabras \u0026quot;Hello\u0026quot; y \u0026quot;World\u0026quot; tal banco de palabras, ¡un juego de Adivina la palabra no es divertido con solo dos palabras! Tenemos que añadir por lo menos 3 strings más al banco de palabras.\nOjo: El producto en la consola no ha cambiado desde la actividad pasada. ¡No queremos revelar las palabras en el banco a los jugadores mientras que juegan! Para esta actividad, asegúrate que no recibiste ningún mensaje de error en la consola después de presionar run.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/activity-5/","title":"Actividad 5 - Dibujar una colmena","tags":[],"description":"","content":"¡Llegamos a la prueba final! Vamos a crear la colmena para que Alex viva en ella. Afortunadamente una colmena es cimplemente 6 hexágonos así que podemos usar lo que ya aprendimos sobre funciones y ciclos para crear la colmena.\nEn esta actividad primero crearemos una función llamada draw_honeycomb(). Dentro del cuerpo de esta función pondremos un ciclo que se repita seis veces. Dentro del ciclo dibujaremos el primer hexágono con la función draw_hexagon() que ya tenemos construida. Ahora, movamos la tortuga un poco para que pueda pintar el siguiente hexágono. Para hacer eso necesitamos decirle al programa que al terminar de dibujar el hexágono se mueva hacia adelante 50 pixeles y luego gire a la derecha 60 grados.\nDibujar la colmena puede tomar un rato. Para que la tortuga vaya más rápido puedes modificar la velocidad a la que se mueve. Las velocidades van del 1 al 10 donde 1 es la más lenta y 10 la más rápida. Pon el siguiente código justo debajo de donde está la línea que cambia el color de la tortuga.\n turtle.speed(8) "},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/numbers/","title":"Números","tags":[],"description":"","content":"Números La computadora también puede hacer operaciones matemáticas, como las que tú haces en la escuela. Usa Console.WriteLine para imprimir el resultado de las expresiones matemáticas. No es necesario incluir comillas para los números.\nConsole.WriteLine(5 + 4); Console.WriteLine(6 * (9 - 7) / 3); Aquí está una lista de los símbolos matemáticos que puedes usar:\n   Operador Descripción Operador Descripción     + Adición \\ | División |    - Sustracción % Modulo (Remanente)   * Multiplicación (,) Paréntesis    Ojo: División en la computadora La computadora divide los números de una manera diferente comparado con una calculadora. Division en una computadora excluye los remanentes o decimales. Por ejemplo, 15 / 4 produce 3, y no 3.75.\n Trabajando junt@s Intenta imprimir los resultados de los siguientes a la consola. Asegúrate que los paréntesis tienen pareja. Usa una calculadora (o hazlo tú sol@) para verificar que tienes el resultado correcto.\n 2 - 19 (3 + 5) * 6 (13 + 5 * 8) / (6 - (3 + 7))  \n Ojo: Números aleatorios Aquí ensenamos como imprimir un numero aleatorio entre 1 (inclusivo) y 10 (exclusivo):\nRandom random = new Random(); Console.WriteLine(random.Next(1, 10)); Intenta adivinar dónde en nuestro juego de Adivina la palabra vamos a usar Random en el juego de GuessTheWord! Los números aleatorios son complicados, entonces omitimos los detalles sobre cómo funcionan en esta sección.\n "},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/part-2/","title":"Parte 2: Construyendo una Flor de Mandala","tags":[],"description":"","content":"¡Buen Trabajo! Terminaste de construir un panal para la colmena de Alex, pero ¡Alex también necesita conseguir polen de las flores! ¿No seria agradable también agregar una flor a la imagen? En la parte 2, ¡crearemos una flor de mandala! (Permanece atento - te mostraremos como luce una flor de mandala.)\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/booleans/","title":"Booleans","tags":[],"description":"","content":"Booleans Un boolean es una frase que puede ser true (verdadero) o false (falso). Diferente a los strings o los números, los Booleans archivan una declaración de la verdad: ¿es lo que yo digo verdadero o falso? Por ejemplo, so yo pregunto, ¿“Eres un robot” ?, esta pregunta produce un resultado true o false, lo que llamamos un boolean. En este caso, porque tú no eres un robot (¡esperadamente!), esta pregunta produce el resultado false.\nTambién podemos usar operadores de la matemática para crear expresiones de Booleans. Aquí hay unos ejemplos. Ojo: nota los símbolos para “igual a” y “no igual a”.\n   Operador Descripción Operator Description     \u0026lt; Menos que \u0026gt; Más que   \u0026lt;= Menos que o igual a \u0026gt;= Más que o igual a   == Igual a != No igual    Como siempre, usa Console.WriteLine para imprimir los resultados:\nConsole.WriteLine(10 \u0026lt; 8); Console.WriteLine((3 * 6) == (32 - 14)); Trabajando junt@s Intenta adivinar los resultados de las siguientes expresiones. Usa Console.WriteLine a verificar tus respuestas.\n 54 \u0026lt; (10 + 32) (37 / 5) == 7 \u0026quot;Hello\u0026quot; + \u0026quot;World\u0026quot; == \u0026quot;Hello World\u0026quot; false == false  \n "},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/activity-6/","title":"Actividad 6 - Moviendo la tortuga","tags":[],"description":"","content":"Nuestro primer paso es mover la tortuga a una nueva posición para dibujar la flor (¡no queremos dibujar la flor encima de la colmena!). Para hacer esto, primero necesitamos usar los siguientes métodos:\nturtle.penup() turtle.goto(x,y) turtle.pendown() turtle.penup() le dice a la tortuga que levante su pluma para que no dibuje mientras se mueve. Entonces, con turtle.goto(x,y), le estamos diciendo a la tortuga la posición donde debe moverse. Después de eso le decimos a la tortuga que vuelva a bajar su pluma usando turtle.pendown() para que pueda comenzar a dibujar nuevamente.\nPista La x y la y en el método turtle.goto() son las coordenadas x y y de la tortuga. Queremos cambiar las coordenadas x, y de la tortuga desde (0, 0) que es el centro de la imagen, a algún lugar un poco mas lejos para que la flor de mandala no cubra parte de la colmena.\n Para completar esta actividad, mueve a la tortuga a la posición (300, 300) sobre el lienzo. Esto la moverá a la esquina superior derecha.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/booleans-operators/","title":"Operadores para booleans","tags":[],"description":"","content":"Operadores para Booleans Puedes conectar expresiones de booleans usando \u0026amp;\u0026amp; (Y) y || (O) operator. \u0026ldquo;¿Eres un ser humano, y es Nuvi un robot? La palabra “y” conecta dos preguntas de verdadero/falso. En este caso, porque es verdad que tú eres en ser humano, y también es verdad que Nuvi es un robot, el resultado total es true (verdad).\nAquí describimos lo que pasa cuando combinas expresiones de booleans:\n   Expresión Resultado Expresión Resultado     true \u0026amp;\u0026amp; true true true || true true   true \u0026amp;\u0026amp; false false true || false true   false \u0026amp;\u0026amp; true false false || true true   false \u0026amp;\u0026amp; false false false || false false    Recuerda que true es verdadero y false es falso. Para resumirlo todo, \u0026amp;\u0026amp; requiere que las dos expresiones booleans a cada lado sean verdaderas, mientras que || solo requiere que una de las dos expresiones booleans a cada lado sea verdadera.\nAquí tenemos unos ejemplos más:\n (5 \u0026lt; 8) \u0026amp;\u0026amp; (9 != 10) produce true (verdad) porque 5 es menos que 8 y 9 no es igual a 10. (8 \u0026lt;= 2) || (\u0026quot;h\u0026quot; + \u0026quot;e\u0026quot; == \u0026quot;he\u0026quot;) produce true (verdad) porque \u0026quot;h\u0026quot; + \u0026quot;e\u0026quot; resulta en \u0026quot;he\u0026quot;, aunque 8 no es igual a o menos que 2. (6 != 2 * 3) || (8 \u0026lt; 2 * 4) produce false (falso) porque 6 no es igual a 2 * 3, y 8 no es menos que2 * 4. Entonces, la expresión se puede simplificar a false (falso).  Trabajando junt@s Intenta adivinar las respuestas a las siguientes expresiones. Usa Console.WriteLine para imprimir las respuestas.\n (9 \u0026lt; 10) \u0026amp;\u0026amp; (12 =\u0026gt; 11) (15 - 2 == 11) || (4 % 3 != 2)  \n "},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/activity-7/","title":"Actividad 7 - Dibujando una figura 8","tags":[],"description":"","content":"¡Excelente! Ahora hagamos la figura de un 8 como primer paso para hacer una flor de mandala! Una figura de un 8 son solo dos círculos opuestos entre sí. Para hacer esto podemos hacer uso del método turtle.circle(x), el cual toma un entero x como el radio del círculo. (Puede recordar que radio * 2 es que tan ancho es el circulo.) Tener el radio como un argumento significa que podemos decidir qué tan grande o pequeño debe ser el círculo.\n import turtle turtle.circle(50) En el ejemplo anterior, el círculo es de 100 píxeles de ancho y es dibujado en sentido contrario a las manecillas del reloj. Si el argumento para turtle.circle() es negativo, entonces el círculo se dibuja en dirección de las manecillas del reloj y es opuesto a la versión original.\nUsando esta información, crea una nueva función llamada figure_8() que dibuje una figura de un 8.\n "},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/variables/","title":"Variables","tags":[],"description":"","content":"Variables Variables simplemente son los nombres que le damos a ciertas cosas, como strings, números, y booleans. Usamos los variables para archivar información que la computadora puede encontrar.\nEsto es cómo declarar un variable que se llama str. Digamos que str contiene \u0026quot;Hello World\u0026quot;. ¿Puedes describir qué significan las siguientes variables?\nvar str = \u0026#34;Hello World\u0026#34;; var x = 88; var happy = true; Presiona run. Nota que los variables no se impriman a la consola. Si no, el variable simplemente representa la información archivada a la memoria de la computadora usando el variable, como un string, número, o boolean.\nPodemos usar estos variables en otras expresiones. Por ejemplo, el siguiente código imprimiría Hello Nuevo Foundation a la consola:\nvar str1 = \u0026#34;Hello\u0026#34;; var str2 = \u0026#34;Nuevo Foundation\u0026#34;; Console.WriteLine(str1 + \u0026#34; \u0026#34; + str2); Puedes cambiar el contenido de un variable en cualquier momento usando el = operador otra vez. Si estás cambiando el contenido de un variable, no necesitas usar var otra vez. En el siguiente ejemplo, vamos a imprimir Hola en vez de Hello.\nvar str = \u0026#34;Hello\u0026#34;; str = \u0026#34;Hola\u0026#34;; Console.WriteLine(str); Aquí tenemos otro ejemplo: 10 se va a imprimir en vez de 9.\nvar num = 9; num = num + 1; Console.WriteLine(num); Nota que NO PUEDES reemplazar un variable de string con un número o un boolean, o cualquier otra combinación. El siguiente código no funcionará:\nvar happy = \u0026#34;Hello\u0026#34;; happy = 9; Otra manera de declarar variables es reemplazando var con el tipo (string, int, bool) de variable que quieres crear. Declarando el tipo de variable explícitamente, evitas el problema que vimos arriba. Por ejemplo:\nstring str = \u0026#34;Hello World\u0026#34;; int x = 88; bool happy = true; Nota que var, string, int, or bool son palabras claves in C#, entonces no puedes crear variables con esos nombres.\nTrabajando junt@s Creemos dos variables nuevas:\n Un variable llamado comp que contiene el string \u0026quot;Computer\u0026quot;. Un variable llamado five que contiene el número 5.  Ahora, usamos estos variables para imprimir lo siguiente a la consola.\nConsejo: vamos a usar el + operador para combinar strings, y también para sumir números.\nComputer 5 ComputerComputer 10 ComputerComputerComputer 15   "},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/activity-8/","title":"Actividad 8 - Creando una flor de mandala","tags":[],"description":"","content":"Hemos terminado de crear nuestra primera figura de un 8! Ahora podemos usar la función figure_8() para crear una flor de mandala! Una flor de mandala es muchas figuras 8 puestas encima de otras en ángulos diferentes. Entonces, para hacer esto necesitamos usar un\u0026hellip; lo has adivinado, un ciclo!\nCrea una nueva función llamada mandala_flower(). En el ciclo llamaremos la función figure_8() que escribimos anteriormente para crear una figura de un 8. Luego, hay que girar la tortuga a la izquierda o derecha un cierto número de grados (por ejemplo, 10 grados). Repita estos pasos muchas veces para hacer una flor de mandala; es una buena idea crear un ciclo que se repita al menos 35 veces.\n "},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/activity-3/","title":"Actividad 3","tags":[],"description":"","content":"Actividad 3 Esta actividad viene en dos partes y examinará tu conocimiento de los variables. Antes de empezar, busca HINT (ACTIVITY 3) (CONSEJO (ACTIVIDAD 3)) en el código, donde declaramos un variable llamado vidas que contiene el número de vidas del jugador. Usa este variable para imprimir el número de vidas del jugador al inicio del juego.\nActivity 3.1 Al inicio del juego, debemos decirle al jugador cuántas letras hay en la palabra que están adivinando. Por ejemplo, si el jugador tiene que adivinar la palabra \u0026quot;Hello\u0026quot;, debemos decirle al jugador: The word has 5 letters (La palabra tiene 5 letras). Si la palabra que están adivinando es \u0026quot;Foundation\u0026quot;, debemos decirle: The word has 10 letters (La palabra tiene 10 letras). Ya tenemos el número de letras archivado con el variable numberOfLetters (numeroDeLetras), entonces úsalo para esta actividad.\nAsegúrate de chequear que has completado la actividad presionando ’run’, y asegúrate que veas The word has 5 letters (la palabra tiene 5 letras) o cualquier otro numero que no sea 5 en la consola.\nActividad 3.2 Hay dos cosas más que la computadora tiene que archivar:\n El número de letras que el jugador ha adivinado correctamente Si el jugador ha ganado el juego o no  Vamos a declarar dos variables para representar estas dos piezas de información. Presiona run para asegurarte que ningún error aparece en la consola. Recuerda que los variables no producen nada en la consola, entonces para esta parte, simplemente estamos asegurándonos que no hay errores.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/activity-9/","title":"Actividad 9 - Coloreando tu flor de mandala","tags":[],"description":"","content":"Ahora que ya tenemos la forma de una flor de mandala, ¡es momento de colorearla! Aun vamos a utilizar el método turtle.color(); sin embargo esta vez vamos a utilizar un valor RGB en lugar un valor de color en cadena de texto, así que podemos producir una gran variedad de colores.\nColores RGB (Red-Green-Blue) En la escuela primaria, puede que recuerdes que al mezclar colores, puedes producir nuevos colores. Por ejemplo, la combinación de rojo y azul hace el purpura. También podemos cambiar la cantidad de rojo y azul mezclados para crear diferentes tonos de purpura. La computadora hace algo similar para producir colores. Al combinar varias intensidades de rojo, verde y azul, podemos crear colores más variados, tal como como azul polvo, amarillo dorado y rosa salmón. Click aqui para ver los colres y su forma correspondiente en hexadecimal.\nEl el método turtle.color(), podemos especificar argumentos enteros correspondientes a la cantidad de rojo, verde y azul a mezclar. Cada número entero debe estar entre 0 y 255 inclusivos. Un ejemplo puede ser turtle.color(30, 100, 238), que produce un tono azul oscuro.\n Actualiza tu flor de mandala para usar un color de tu preferencia. ¡Siéntete libre de experimentar con colores diferentes!\n "},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/reading-from-console/","title":"Leyendo la consola","tags":[],"description":"","content":"Leyendo la consola Ya que sabemos lo básico de los variables, podemos aceptar entradas del usuario. Usa la línea siguiente para decirle a la consola que debe esperar hasta que el usuario entra algo en la consola. Después, la computadora archivará lo que el usuario entró en un variable llamado input.\nvar input = Console.ReadLine(); Aquí tenemos un ejemplo de cómo usar Console.ReadLine para aceptar entradas de usuario:\nConsole.WriteLine(\u0026#34;Escribe algo:\u0026#34;); var input = Console.ReadLine(); Console.WriteLine(\u0026#34;Escribiste: \u0026#34; + input); Cuando el usuario presiona ’run’, el usuario ve un saludo con el siguiente programa:\nEn este caso, luego de que el usuario escribe Hello World! en la consola, el programa termina e imprime en la consola:\nTrabajando junt@s Escribe el programa que primero imprima las siguientes dos líneas:\n! Bienvenid@! ¿Como te puedo ayudar hoy? Luego, la consola va a esperar el input del usuario. Una vez que el usuario escriba algo, debe presionar ‘Enter’ o la ‘barra de espacio’, para que la consola imprima:\nTu preguntaste: [input]? ¡Yo no sé cuál es la respuesta! ¡Hasta luego! [input] (entrada) debería ser remplazada por cualquier palabra que el usuario haya escrito en la consola.\n  "},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/activity-10/","title":"Actividad 10 - Randomizar el color de los pétalos de tu flor de mandala","tags":[],"description":"","content":"Hemos establecido con éxito el color de la flor de mandala en un valor RGB. Ahora, exploremos cambiar el color de los pétalos individuales de la flor de mandala\nHaremos uso de la biblioteca random de python. El método random.randint() nos permite elegir un valor aleatorio para cada uno de los valores rojo, verde o azul. Para elegir un valor que esté entre 0 inclusivo y 256 exclusivo (en otras palabras, entre 0 y 255 inclusivo), necesitamos usar random.randint(0, 256).\nUsa random.randint(0, 256) tres veces para generar tres valores aleatorios y utilizalos en el método turtle.color(). ¡Ahora deberías poder ver una flor de mandala multicolor! ¡Esta es definitivamente una flor de la que Alex estaría interesado en recolectar néctar!\n ¡Felicidades! ¡Ayudaste a Alex a hacer un panal y una flor! ¡Ahora puede vivir feliz en su colmena y hacer mucha miel! Su imagen final debería verse así:\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/activity-11/","title":"Actividad 11 - Ahora es tu turno!","tags":[],"description":"","content":"Si queda algo de tiempo, ¡Intenta dibujar tus propias formas y diseños! Has de tu imagen interesante usando varias formas y colores.\nClick aquí para abrir una ventana en blanco repl.it e iniciar tu propia creación.\nAyuda, estoy atascado! ¿Atascado? ¡Compruebe la Clave de respuestas para ver la actividad en la que está atascado!\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/answer-key/","title":"Python Turtle - Answer Key","tags":[],"description":"","content":"Las siguientes 3 líneas son necesarias para la actividad de introducción y todas las demás actividades también.\nimport turtle turtle.color(\u0026#34;orange\u0026#34;) turtle.shape(\u0026#34;turtle\u0026#34;) Actividad de introducción turtle.color(\u0026#34;orange\u0026#34;) turtle.forward(50) Actividad 1 turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) turtle.forward(50) turtle.left(90) Actividad 2 for i in range(4): turtle.forward(50) turtle.left(90) Actividad 3 for i in range(6): turtle.forward(50) turtle.left(60) Actividad 4 def draw_hexagon(): for i in range(6): turtle.forward(50) turtle.left(60) draw_hexagon() Actividad 5 def draw_honeycomb(): for i in range(6): draw_hexagon() turtle.forward(50) turtle.right(60) draw_honeycomb() Actividad 6 turtle.penup() turtle.goto(300, 300) turtle.pendown() Actividad 7 def figure_8(): turtle.circle(50) turtle.circle(-50) figure_8() Actividad 8 def mandala_flower(): for i in range(35): figure_8() turtle.right(10) mandala_flower() Actividad 9 def mandala_flower(): turtle.color(30, 100, 160) for i in range(35): figure_8() turtle.right(10) mandala_flower() Actividad 10 def mandala_flower(): for i in range(35): turtle.color(random.randint(0, 256),random.randint(0, 256), random.randint(0, 256)) figure_8() turtle.right(10) mandala_flower() "},{"uri":"https://nuevofoundation.github.io/workshops/es/microbit/","title":"Microbit: Codificación con mini computadoras","tags":[],"description":"Usando MicroBits para enseñar a los estudientes JavaScript y hardware","content":"Una introducción a JavaScript y hardware mediante Micro:Bits Lo básico ¿Qué es JavaScript? JavaScript es uno de los muchos lenguajes de programación y se conoce como el lenguaje de programación para la web. Se utiliza para controlar el comportamiento de la página web como clics de botón, ventanas emergentes, flujos de datos y muchas otras funciones.\nVariables Las variables son contenedores en el código que pueden contener un solo número, palabra u otra información. Esta información se puede utilizar y cambiar llamando la variable más adelante en el programa. Esto significa que puedes solicitar a tu programa que acceda a la información que has almacenado.\nCon algunas excepciones, las variables se pueden identificar con cualquier letra, dígito, ora inferior o signo de dólar. PERO pase lo que pase, no pueden tener espacios y siempre deben empezar con una letra.\nLas variables pueden contener diferentes tipos de datos. Vamos a repasar lo básico.\nTipos de Datos Números Enteros Un número entero es básicamente sólo un nombre elegante para cualquier número que no es un decimal. Por ejemplo, los números enteros son números como 3, 100, 6,000, -3, ¡y más!\n// Este es un comentario. Estos se utilizan para describir lo que hace tu código. // A continuación se muestran diferentes ejemplos de variables.  // Ejemplos de variables enteras (no decimales):  var a = 5; var b = 10; var c = 15; Dobles Los dobles son los otros números que tienen un punto decimal. Ejemplos son números como 0.5, 1.5, ¡y más!\n// Ejemplos de variables dobles (números decimales):  var x = 0.5; var y = 1.5; var z = 2.0; Cadenas Las cadenas son variables que pueden almacenar palabras. Si te ayuda a recordar que las cadenas son palabras, considérelos como una \u0026ldquo;cadena\u0026rdquo; de caracteres. Las cadenas pueden ser cualquier cosa como tu nombre o el nombre de tu mascota favorita.\nLas cadenas están rodeadas por comillas.\n// Ejemplos de Cadenas (una o más palabras también conocidas como \u0026#34;cadena\u0026#34; de caracteres): // Los valores de las variables de cadena están rodeados por comillas  var compania = \u0026#34;MICROSOFT\u0026#34;; var curso = \u0026#34;Codificar es divertido!\u0026#34;; var mensaje = \u0026#34;Codificar es divertido!\u0026#34;; Caracteres Los caracteres son letras individuales. Están rodeados por comillas.\n// Ejemplo de variable de carácter (una sola letra): // los valores de las variables de carácter están rodeados por comillas.  var letter = \u0026#34;A\u0026#34;; Booleanos A veces los programadores quieren comprobar si ciertas condiciones son verdaderas o falsas. Esta información se almacena en un dato tipo booleano.\nSi tienes curiosidad acerca de por qué se llaman booleanos, un tipo llamado George Boole es el que los creó.\n// Un variable booleano puede ser verdadero (true) o falso (false).  var puedenVolarLosCerdos = false; var codificarEsPadre = true; Operaciones matemáticas ¡Ah sí! Las computadoras son esencialmente calculadoras por lo que debe ser un hecho que podemos hacer matemáticas en ellas. Aquí hay ejemplos de las matemáticas que puedes hacer en tus programas de JavaScript.\nSuma var a = a + b; //a = 15 var a += b; //a = 25 Resta var a = a - b; //a = 15 var a -= b; //a = 5 Multiplicación var a = a * b; //a = 50 var a *= b; //a = 500 División var a = a / b; //a = 50 var a /= b; //a = 5 Módulo Ah sí, puede sonar aterrador pero en realidad no lo es. Las operaciones de módulo sólo te dan el residuo después de la división. Por ejemplo, 10 % 2 da 0 porque cuando se divide 10 por 2, no le queda ningún residuo.\nvar d = 10 % 2; //d= 0 var e = 5 % 2; //e= 1 Declaraciones impresas A veces deseas que tu computadora muestre realmente el texto o los datas que contienen las variables. Para ello utilizamos instrucciones de impresión.\nconsole.log(\u0026#34;Esto aparecerá en la consola, pero no en la página web\u0026#34;); alert(\u0026#34;Esto se mostrará como una ventana emergente\u0026#34;); var respuestaDelUsario = prompt(\u0026#34;¿Quieres jugar un juego?\u0026#34;); Sentencias Condicionales y Operadores Lógicos Las sentencias condicionales más comúnmente llamadas “if statements” se utilizan para elegir qué código ejecutar dependiendo del valor de las variables u otras condiciones.\n// Sentencias Condicionales if (true) { // esta sección de código se ejecutará porque la expresión es cierta (true) } if (false) { //esta sección de código no se ejecutará porque la expresión es falsa (false) } var edad = 10; if (edad \u0026lt; 18) { // si el valor de la variable “edad” es menos que 18  print(\u0026#34;Usted no es un adulto todavía! :( \u0026#34;); } Bucles Y por último, pero no menos importante tenemos cosas llamadas bucles. Esto te permite repetir partes del código hasta que se cumpla una determinada condición. La función “alert()” que se ve en el código a continuación produce una ventana emergente que te muestra el parámetro que le pasas. El parámetro es lo que está entre paréntesis. En este caso está mostrando el valor de la cuenta actualizada.\n// Este bucle “while” cuenta hacia abajo desde 10 var cuenta = 10; while (cuenta \u0026gt; 0) { alert(cuenta); cuenta--; } // Este bucle “for” cuenta hacia abajo desde 10. for (var i = 10; i \u0026gt; 0; i--) { alert(i); } // Este es un bucle “while” sin fin o un bucle “while” infinito. while (true) { // Esta parte del código se ejecutará una y otra vez para siempre ya que la condición nunca será falsa.  // Cierto (true) siempre es cierto (true). } // ”break” rompe un bucle inmediatamente y se mueve a la línea siguiente del bucle while (true) { break; } // El programa se sale del bucle después del “break” y sigue ejecutando en esta línea. Comenzando con Micro:Bit Ahora que conoces los conceptos básicos de JavaScript, ¡puedes usar tus habilidades de conocimiento para empezar a programar tu Micro:Bit!\n¿Qué es un Micro:Bit? Un Micro:Bit es una mini computadora programable! Se puede codificar desde cualquier navegador web en varios lenguajes de programación como JavaScript, Python, Scratch y Block. Para nuestra sesión de hoy vamos a utilizar JavaScript.\nTu Micro:Bit tiene las siguientes características físicas:\n 25 LEDs programables individualmente 2 botones programables Pines de conexión física Sensores de movimiento (acelerómetro y brújula) Comunicación inalámbrica a través de bluetooth y radio Interfaz USB  Si deseas aprender más acerca de cada componente individual y todas las características que vienen con tu Micro:Bit puedes hacer clic aquí.\nVe y saca el Micro:Bit y el resto de los componentes de la bolsa. Debes tener un Micro:Bit, 2 baterías, un cable micro USB, y el soporte de la batería (la caja negra con los cables rojos y negros que salen de ella). Si te falta algo o necesitas ayuda, ¡no dudes en preguntar a uno de los instructores!\nInicio rápido Continúa y conecta tu Micro:Bit a tu computadora usando el cable USB. No necesitarás las baterías por un tiempo entonces puedas dejarlas a un lado.\nUna vez que conectes el Micro:Bit a tu computadora, se mostrará en tu computadora como una unidad llamada \u0026lsquo;MICROBIT\u0026rsquo;. Si abres el explorador de archivos, deberías ver algo similar a la imagen de abajo.\n¡He codificado un juego para darte un ejemplo de lo que puedes hacer! Sigue adelante y descarga mi juego haciendo clic en la siguiente liga.\nHaz aquí clic para descargar\nUna vez que se descarga, deberás mirar el archivo ‘HEX’ dentro de tu carpeta de Descargas (o ‘Downloads’). (También notarás que he nombrado este juego \u0026lsquo;Asteroides.\u0026rsquo; Si tienes un nombre mejor por favor hazme saber.)\nPara jugar el juego tendrás que copiar este archivo a tu Micro:Bit. Para ello puedes simplemente copiar y pegar el archivo en el directorio de Micro:Bit pero encontré otro método mucho más fácil. Simplemente haz clic con el botón derecho en el archivo y luego haz clic en Enviar A (o Sent To) y luego selecciona MICROBIT\nSi lo hiciste correctamente, notarás que los LEDs de tu Micro:Bit se detendrán durante un rato y el LED amarillo de la parte de atrás parpadea mientras el Micro:Bit descarga el código. Si no ves esto, no te preocupes y pídenos ayuda.\n¿Tienes curiosidad por saber cómo es el código de mi juego? Haz clic aquí\nProtege tu nave espacial ¿Listo para jugar? Esta es la lista de controles:\n A + B: Dispara láseres para destruir asteroides entrantes Tilt: Inclina tu Micro:Bit hacia la izquierda o la derecha para mover tu nave espacial  Simple ¿verdad? Ya veremos. He programado este juego para ir más rápido cuanto más asteroides destruyas. ¿Crees que tienes el puntaje más alto? ¡Presume y haz nos lo saber! Puedes ver tus puntos cuando la pantalla de “game over” termine.\nCONSEJO: Si llegas a la pantalla de “game over” y quieres iniciar un nuevo juego, simplemente haz clic en el botón de reinicio detrás de tu Micro:Bit.\nEmpezar a codificar ¡Finalmente! ¡Aquí está la mejor parte! ¡Ahora puedes usar todo lo que has aprendido para crear tus propios programas y codificar tu Micro:Bit!\nEn primer lugar, vamos a mostrar nuestro nombre en el Micro:Bit. Continua conmigo.\n¡Ahora vamos a repasar dos tutoriales juntos! Ve a esta liga y encuentre el tutorial \u0026ldquo;Flashing Heart.\u0026rdquo;\nVamos a ir a través de esto y los tutoriales de \u0026ldquo;Micro Chat.\u0026rdquo;\nTu turno Avanza y encuentra otro tutorial en el que estés interesado. Si te sientes seguro, codifica tu propio programa desde el comienzo. ¡Diviértete!\nRecursos y Hoja de Trucos Avanzados de Micro:Bit Variables, Impresión y Descarga   Las variables de JavaScript son las mismas, excepto que se utiliza la palabra clave \u0026lsquo;let\u0026rsquo; en lugar de ‘var’ para definir un variable.\nlet variable = \u0026#34;texto\u0026#34;;   El comando basic.showString(variable); hará que el texto aparezca en el LED del Micro:Bit\nlet nombre = \u0026#34;Gonzo\u0026#34;; basic.showString(nombre);   Comandos útiles de JavaScript Los siguientes comandos están en JavaScript, si prefieres usar el equivalente en código Block simplemente busca en la biblioteca correspondiente. Por ejemplo, puedes encontrar la función ‘basic.forever()’ haciendo clic en la pestaña ‘Basic’ y arrastrando la función ‘forever’ a tu pantalla.\nbasic.forever(function() { // El código entre estos corchetes se ejecutará para siempre en tu Micro:Bit. }); // Muestra el número dentro de los paréntesis en tu Micro:Bit basic.showNumber(number); // Muestra la cadena (palabra) dentro de los paréntesis en tu Micro:Bit basic.showString(string); // Genera un número aleatorio entre 0 y el número dentro de los paréntesis Math.random(number); input.onButtonPressed(Button.A, function() { // El código aquí se ejecuta cuando se hace clic el botón que especifiques.  // En este caso cuando se presiona el botón A. }); // Muestra el caractér especificado en la pantalla LED basic.showIcon(IconNames.Character); // Pausa a tu Micro:Bit por la cantidad especificada de microsegundos basic.pause(microseconds); "},{"uri":"https://nuevofoundation.github.io/workshops/es/guidelines/","title":"Directrices para colaboradores del taller","tags":[],"description":"","content":"¡Bienvenido! Estas pautas son para crear o editar un Taller de Nuevo Foundation.\nPróximamente La orientación del taller es un trabajo en progreso. Mientras tanto, visite el readme.md del proyecto para obtener instrucciones de configuración.\nFormateo de Referencia  Hoja de trucos para Markdown Estandár Opciones de formato personalizado mediante “shortcodes”  Ejemplos de formato Este tema incluye una serie de opciones para personalizar el aspecto de tu página.\nAlertas Información {{% alert theme=\u0026quot;info\u0026quot; %}}**Esta** es una alerta de información{{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;Esta es una alerta de información\nÉxito {{% alert theme=\u0026quot;success\u0026quot; %}}**Lo lograste!** es un ejemplo de un éxito{{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;Lo lograste! es un ejemplo de un éxito\nAdvertencia {{% alert theme=\u0026quot;warning\u0026quot; %}}***Ten cuidado** es una advertencia{{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;Ten cuidado es una advertencia\nPeligro {{% alert theme=\u0026quot;danger\u0026quot; %}}**Cuidado** es un ejemplo de un peligro{{% /alert %}}  role=\u0026quot;alert\u0026quot;\u0026gt;Cuidado es un ejemplo de un peligro\nBotones {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; \u0026gt;}} ir a Nuevo Foundation {{\u0026lt; /button \u0026gt;}}  ir a Nuevo Foundation  Botón de Éxito {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;success\u0026quot; \u0026gt;}} Éxito {{\u0026lt; /button \u0026gt;}}  Éxito  Botón de Información {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;info\u0026quot; \u0026gt;}} Información {{\u0026lt; /button \u0026gt;}}  Información  Botón de Advertencia {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;warning\u0026quot; \u0026gt;}} Advertencia {{\u0026lt; /button \u0026gt;}}  Advertencia  Botón de Peligro {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;danger\u0026quot; \u0026gt;}} ¡Peligro! {{\u0026lt; /button \u0026gt;}}  ¡Peligro!  Botón Predeterminado {{\u0026lt; button href=\u0026quot;https://nuevofoundation.org\u0026quot; theme=\u0026quot;default\u0026quot; \u0026gt;}} Predeterminado {{\u0026lt; /button \u0026gt;}}  Predeterminado  Expand {{% expand %}}Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.{{% /expand %}}     \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;expand-content\u0026quot; style=\u0026quot;display: none;\u0026quot;\u0026gt;  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \n Avisos Aviso de Apunte {{% notice note %}} Aviso de apunte {{% /notice %}}  rinde\nAviso de apunte\n Aviso de Información {{% notice info %}} Aviso de información {{% /notice %}}  rinde\nAviso de información\n Aviso de Artimaña {{% notice tip %}} Aviso de artimaña {{% /notice %}}  rinde\nAviso de artimaña\n Aviso de Advertencia {{% notice warning %}} Aviso de advertencia {{% /notice %}}  rinde\nAviso de advertencia\n Ejemplos de Iconos Disponibles Lista completa aquí\n   asterisco   más   euro   eur   menos   nube   sobre   lápiz   copa   música   búsqueda   corazón   estrella   estrella vacía   usuario   película   th-grande   th   th-lista   marcar   eliminar   zoom-in   zoom-out   apagar   señal   rueda dentada   basura   casa   archivo   hora   camino   descargar-alt   descargar   subir   buzón electrónico   botón de play   repetir   actualizar   lista-alt   cerradura   bandera   auriculares   volumen apagado   volumen bajar   volumen aumentar   código QR   código de barras   etiqueta   etiquetas   libro   marcapáginas   imprimir   cámara   fuente   negrita   cursiva  "},{"uri":"https://nuevofoundation.github.io/workshops/es/python-turtle/","title":"Python Tortuga","tags":[],"description":"Aprender Python con Turtle","content":"Python con tortuga Introducción Bienvenidos al mundo de Nueva Colmena! Llegaste justo a tiempo para ayudar a nuestra abeja bebé Alex.\nAlex vive en un país llamado Isla Tortuga. Los habitantes de Isla Tortuga hablan un lenguaje llamado Python. Vamos a usar este lenguaje para enseñar a Alex cómo vivir en una colmena. ¿Estás listo para jugar?\nContenido  Secciones  Usando Repl.It \n   Los basicos - Dibujando una línea de color \n   Actividad 1 - Dibujando un cuadrado \n   Actividad 2 - Simplificando el código con ciclos (loops) \n   Actividad 3 - Dibujar un hexágono \n   Actividad 4 - Simplificando el código con funciones \n   Actividad 5 - Dibujar una colmena \n   Parte 2: Construyendo una Flor de Mandala \n   Actividad 6 - Moviendo la tortuga \n   Actividad 7 - Dibujando una figura 8 \n   Actividad 8 - Creando una flor de mandala \n   Actividad 9 - Coloreando tu flor de mandala \n   Actividad 10 - Randomizar el color de los pétalos de tu flor de mandala \n   Actividad 11 - Ahora es tu turno! \n    "},{"uri":"https://nuevofoundation.github.io/workshops/es/","title":"Nuevo Foundation Workshops","tags":[],"description":"","content":"Proyectos   C#: Adivina la palabra Una guía introductoria para aprender C# y para usar tus nuevas habilidades a crear un juego de Adivina la palabra.\n   Programando Frutas Musicales con Adafruit Una guía introductoria para crear sonidos usando Adafruit para aprender acerca del hardware\n   Python Tortuga Aprender Python con Turtle\n   Python: Elige tu propia aventura Introduccion para hacer un juego de Python donde puedes elegir tu propia aventura\n  Pautas para colaboradores (en inglés)  Pautas para colaboradores Pautas para desarrolladores de sitios web  "},{"uri":"https://nuevofoundation.github.io/workshops/es/csharp-guess-the-word/","title":"C#: Adivina la palabra","tags":[],"description":"Una guía introductoria para aprender C# y para usar tus nuevas habilidades a crear un juego de Adivina la palabra.","content":"Traducciones de términos comunes El lado izquierdo del índice abajo contiene términos frecuentemente usados en el mundo de informática en general o en el idioma de C# específicamente. Estos términos están en inglés, y tienen que ser usados en ingles (las computadoras no son bilingües, desafortunadamente). En inglés, son directivos básicos. Hemos dado las traducciones de estos términos para que puedes entenderlos al nivel lingüístico mientras que aprendes durante estas actividades cómo funcionan al nivel programático.\n   Término Traducción/Significado     Boolean Booleano – una expresión que puede ser true (verdadera) o false (falsa)   Bug/Debugging En el mundo de la informática ‘bug’ se refiere a un error en el código. ‘Debugging’ es el proceso de corregir errores en código.   Console.ReadLine Consola.LeaLínea – directivo de C# a la consola que debe esperar y leer una línea entrada por el usuario   Console.WriteLine Consola.EscribeLínea – directivo de C# a la consola que escribe una línea de texto   False Un Boolean. Falso.   Hello World Literalmente, Hola Mundo. Tradicionalmente, esta frase es la primera cosa que tod@s l@s desarrollador@s impriman cuando están aprendiendo un idioma nuevo.   Random Aleatorio   Run Literalmente, corre. ‘Run’ le dice a la computadora que debe ejecutar todo el código.   String Literalmente, una cuerda. En el mundo de la informática ‘string’ se refiere a cualquier grupo de símbolos, números, o letras que la computadora entiende como una palabra o frase. En C#, los strings se indican con comillas “ ”.   True Un Boolean. Verdad, verdadero    ¡Bienvenid@s! El objetivo de la actividad de hoy es aprender el lenguaje de C# e incorporar lo que vas a aprender hoy para asi poder crear el juego ¡Adivina la palabra!\nContenido  Empezando \n   Escribiendo a la consola \n   Comentarios \n   Activitdad 1 \n   Strings \n   Actividad 2 \n   Números \n   Booleans \n   Operadores para booleans \n   Variables \n   Actividad 3 \n   Leyendo la consola \n   "},{"uri":"https://nuevofoundation.github.io/workshops/es/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://nuevofoundation.github.io/workshops/es/adafruit/","title":"Programando Frutas Musicales con Adafruit","tags":[],"description":"Una guía introductoria para crear sonidos usando Adafruit para aprender acerca del hardware","content":"Contenido Secciones  Los Componentes \n   Construyendo la estación de DJ \n   Creando el programa \n   Descargando el Programa \n    "},{"uri":"https://nuevofoundation.github.io/workshops/es/adventure/","title":"Python: Elige tu propia aventura","tags":[],"description":"Introduccion para hacer un juego de Python donde puedes elegir tu propia aventura","content":"Parte 1 – ¡Bienvenido! El Poder de las historias ¡Hola a todos! Hoy vamos a utilizar nuestros superpoderes de ingeniería para ser los mejores narradores. ¡Las historias son una gran manera de conectar a las personas, compartir tradiciones y aprender cosas nuevas!\n¡Vuelve a tu vecino y comparte tu historia favorita! Puede ser una historia que los miembros de su familia hayan compartido. Tu historia favorita de una película de Marvel o tu novela favorita.\n¡Ahora a través del código, tenemos la oportunidad de crear o volver a contar historias increíbles y difundir nuestras ideas aún más!\n¡Elige tus propios juegos de aventura! ¡Hoy estarás eligiendo y diseñando la trama de las historias que te están contando! En Elige tus propios juegos de aventura eres el protagonista de la historia, y podrás elegir las acciones que los personajes están tomando y los resultados de esas acciones. ¡Tienes el control!\nDemo ¡Vamos a probarlo!\n ¿Qué pensaron? Ahora vamos a aprender algunas habilidades interesantes que nos permitirán crear nuestras propias historias.\n"},{"uri":"https://nuevofoundation.github.io/workshops/es/tags/","title":"Tags","tags":[],"description":"","content":""}]